; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Downloads\MediaPoint\src\filters\BaseClasses\mtype.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
CONST	SEGMENT
$SG82323 DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG82324 DB	'p', 00H, 'b', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG82339 DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG82340 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+2
$SG82348 DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG82349 DB	'p', 00H, 'b', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG82356 DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG82357 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+2
$SG82365 DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG82366 DB	'p', 00H, 'b', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG82398 DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG82399 DB	'p', 00H, 'S', 00H, 'r', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG82413 DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG82414 DB	'p', 00H, 'm', 00H, 't', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, 'p', 00H, 'm', 00H, 't', 00H, 'T', 00H, 'a', 00H, 'r', 00H
	DB	'g', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG82417 DB	'.', 00H, '.', 00H, '\', 00H, 'm', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG82418 DB	'p', 00H, 'm', 00H, 't', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, '-', 00H, '>', 00H, 'p', 00H, 'b'
	DB	00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	?FreeMediaType@@YGXAAU_AMMediaType@@@Z		; FreeMediaType
PUBLIC	??1CMediaType@@QAE@XZ				; CMediaType::~CMediaType
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??1CMediaType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMediaType@@QAE@XZ PROC				; CMediaType::~CMediaType, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?FreeMediaType@@YGXAAU_AMMediaType@@@Z	; FreeMediaType
; Line 20
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMediaType@@QAE@XZ ENDP				; CMediaType::~CMediaType
_TEXT	ENDS
PUBLIC	?InitMediaType@CMediaType@@QAEXXZ		; CMediaType::InitMediaType
PUBLIC	??0CMediaType@@QAE@XZ				; CMediaType::CMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMediaType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMediaType@@QAE@XZ PROC				; CMediaType::CMediaType, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 25
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitMediaType@CMediaType@@QAEXXZ	; CMediaType::InitMediaType
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMediaType@@QAE@XZ ENDP				; CMediaType::CMediaType
_TEXT	ENDS
PUBLIC	??0CMediaType@@QAE@PBU_GUID@@@Z			; CMediaType::CMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMediaType@@QAE@PBU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
??0CMediaType@@QAE@PBU_GUID@@@Z PROC			; CMediaType::CMediaType, COMDAT
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitMediaType@CMediaType@@QAEXXZ	; CMediaType::InitMediaType
; Line 32
	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMediaType@@QAE@PBU_GUID@@@Z ENDP			; CMediaType::CMediaType
_TEXT	ENDS
PUBLIC	?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z	; CopyMediaType
PUBLIC	??0CMediaType@@QAE@ABU_AMMediaType@@PAJ@Z	; CMediaType::CMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMediaType@@QAE@ABU_AMMediaType@@PAJ@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
_phr$ = 12						; size = 4
??0CMediaType@@QAE@ABU_AMMediaType@@PAJ@Z PROC		; CMediaType::CMediaType, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 40
	mov	eax, DWORD PTR _rt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z ; CopyMediaType
	mov	DWORD PTR _hr$[ebp], eax
; Line 41
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CMediaType
	cmp	DWORD PTR _phr$[ebp], 0
	je	SHORT $LN2@CMediaType
; Line 42
	mov	edx, DWORD PTR _phr$[ebp]
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CMediaType:
; Line 44
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0CMediaType@@QAE@ABU_AMMediaType@@PAJ@Z ENDP		; CMediaType::CMediaType
_TEXT	ENDS
PUBLIC	??0CMediaType@@QAE@ABV0@PAJ@Z			; CMediaType::CMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMediaType@@QAE@ABV0@PAJ@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
_phr$ = 12						; size = 4
??0CMediaType@@QAE@ABV0@PAJ@Z PROC			; CMediaType::CMediaType, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	mov	eax, DWORD PTR _rt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z ; CopyMediaType
	mov	DWORD PTR _hr$[ebp], eax
; Line 50
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CMediaType@2
	cmp	DWORD PTR _phr$[ebp], 0
	je	SHORT $LN2@CMediaType@2
; Line 51
	mov	edx, DWORD PTR _phr$[ebp]
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CMediaType@2:
; Line 53
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0CMediaType@@QAE@ABV0@PAJ@Z ENDP			; CMediaType::CMediaType
_TEXT	ENDS
PUBLIC	?Set@CMediaType@@QAEJABU_AMMediaType@@@Z	; CMediaType::Set
PUBLIC	??4CMediaType@@QAEAAV0@ABU_AMMediaType@@@Z	; CMediaType::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CMediaType@@QAEAAV0@ABU_AMMediaType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
??4CMediaType@@QAEAAV0@ABU_AMMediaType@@@Z PROC		; CMediaType::operator=, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 64
	mov	eax, DWORD PTR _rt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@CMediaType@@QAEJABU_AMMediaType@@@Z ; CMediaType::Set
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
; Line 66
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CMediaType@@QAEAAV0@ABU_AMMediaType@@@Z ENDP		; CMediaType::operator=
_TEXT	ENDS
PUBLIC	??4CMediaType@@QAEAAV0@ABV0@@Z			; CMediaType::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CMediaType@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
??4CMediaType@@QAEAAV0@ABV0@@Z PROC			; CMediaType::operator=, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _rt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CMediaType@@QAEAAV0@ABU_AMMediaType@@@Z ; CMediaType::operator=
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
; Line 73
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CMediaType@@QAEAAV0@ABV0@@Z ENDP			; CMediaType::operator=
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
PUBLIC	??8CMediaType@@QBEHABV0@@Z			; CMediaType::operator==
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8CMediaType@@QBEHABV0@@Z
_TEXT	SEGMENT
tv175 = -8						; size = 4
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
??8CMediaType@@QBEHABV0@@Z PROC				; CMediaType::operator==, COMDAT
; _this$ = ecx
; Line 77
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _rt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_IsEqualGUID@8
	cmp	eax, 1
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR _rt$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_IsEqualGUID@8
	cmp	eax, 1
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _rt$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	_IsEqualGUID@8
	cmp	eax, 1
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rt$[ebp]
	mov	edx, DWORD PTR [eax+64]
	cmp	edx, DWORD PTR [ecx+64]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN4@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _rt$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@operator
$LN4@operator:
	mov	DWORD PTR tv175[ebp], 1
	jmp	SHORT $LN5@operator
$LN3@operator:
	mov	DWORD PTR tv175[ebp], 0
$LN5@operator:
	mov	eax, DWORD PTR tv175[ebp]
; Line 91
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8CMediaType@@QBEHABV0@@Z ENDP				; CMediaType::operator==
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	??9CMediaType@@QBEHABV0@@Z			; CMediaType::operator!=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??9CMediaType@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
??9CMediaType@@QBEHABV0@@Z PROC				; CMediaType::operator!=, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.cpp
; Line 96
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 99
	mov	eax, DWORD PTR _rt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8CMediaType@@QBEHABV0@@Z		; CMediaType::operator==
	test	eax, eax
	je	SHORT $LN1@operator@2
; Line 100
	xor	eax, eax
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:
; Line 102
	mov	eax, 1
$LN2@operator@2:
; Line 103
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9CMediaType@@QBEHABV0@@Z ENDP				; CMediaType::operator!=
_TEXT	ENDS
PUBLIC	?Set@CMediaType@@QAEJABV1@@Z			; CMediaType::Set
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Set@CMediaType@@QAEJABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
?Set@CMediaType@@QAEJABV1@@Z PROC			; CMediaType::Set, COMDAT
; _this$ = ecx
; Line 108
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 109
	mov	eax, DWORD PTR _rt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@CMediaType@@QAEJABU_AMMediaType@@@Z ; CMediaType::Set
; Line 110
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@CMediaType@@QAEJABV1@@Z ENDP			; CMediaType::Set
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Set@CMediaType@@QAEJABU_AMMediaType@@@Z
_TEXT	SEGMENT
_hr$82282 = -8						; size = 4
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
?Set@CMediaType@@QAEJABU_AMMediaType@@@Z PROC		; CMediaType::Set, COMDAT
; _this$ = ecx
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	mov	eax, DWORD PTR _rt$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Set
; Line 117
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?FreeMediaType@@YGXAAU_AMMediaType@@@Z	; FreeMediaType
; Line 118
	mov	edx, DWORD PTR _rt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z ; CopyMediaType
	mov	DWORD PTR _hr$82282[ebp], eax
; Line 119
	cmp	DWORD PTR _hr$82282[ebp], 0
	jge	SHORT $LN2@Set
; Line 120
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN3@Set
$LN2@Set:
; Line 124
	xor	eax, eax
$LN3@Set:
; Line 125
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@CMediaType@@QAEJABU_AMMediaType@@@Z ENDP		; CMediaType::Set
_TEXT	ENDS
PUBLIC	?IsValid@CMediaType@@QBEHXZ			; CMediaType::IsValid
EXTRN	_GUID_NULL:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsValid@CMediaType@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsValid@CMediaType@@QBEHXZ PROC			; CMediaType::IsValid, COMDAT
; _this$ = ecx
; Line 130
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 131
	push	OFFSET _GUID_NULL
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_IsEqualGUID@8
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 132
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsValid@CMediaType@@QBEHXZ ENDP			; CMediaType::IsValid
_TEXT	ENDS
PUBLIC	?SetType@CMediaType@@QAEXPBU_GUID@@@Z		; CMediaType::SetType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetType@CMediaType@@QAEXPBU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptype$ = 8						; size = 4
?SetType@CMediaType@@QAEXPBU_GUID@@@Z PROC		; CMediaType::SetType, COMDAT
; _this$ = ecx
; Line 137
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	mov	eax, DWORD PTR _ptype$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 139
	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@CMediaType@@QAEXPBU_GUID@@@Z ENDP		; CMediaType::SetType
_TEXT	ENDS
PUBLIC	?SetSubtype@CMediaType@@QAEXPBU_GUID@@@Z	; CMediaType::SetSubtype
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetSubtype@CMediaType@@QAEXPBU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptype$ = 8						; size = 4
?SetSubtype@CMediaType@@QAEXPBU_GUID@@@Z PROC		; CMediaType::SetSubtype, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 145
	mov	eax, DWORD PTR _ptype$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 146
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSubtype@CMediaType@@QAEXPBU_GUID@@@Z ENDP		; CMediaType::SetSubtype
_TEXT	ENDS
PUBLIC	?IsFixedSize@CMediaType@@QBEHXZ			; CMediaType::IsFixedSize
PUBLIC	?GetSampleSize@CMediaType@@QBEKXZ		; CMediaType::GetSampleSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetSampleSize@CMediaType@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSampleSize@CMediaType@@QBEKXZ PROC			; CMediaType::GetSampleSize, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsFixedSize@CMediaType@@QBEHXZ		; CMediaType::IsFixedSize
	test	eax, eax
	je	SHORT $LN2@GetSampleS
; Line 152
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	jmp	SHORT $LN3@GetSampleS
; Line 153
	jmp	SHORT $LN3@GetSampleS
$LN2@GetSampleS:
; Line 154
	xor	eax, eax
$LN3@GetSampleS:
; Line 156
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSampleSize@CMediaType@@QBEKXZ ENDP			; CMediaType::GetSampleSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsFixedSize@CMediaType@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFixedSize@CMediaType@@QBEHXZ PROC			; CMediaType::IsFixedSize, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFixedSize@CMediaType@@QBEHXZ ENDP			; CMediaType::IsFixedSize
_TEXT	ENDS
PUBLIC	?SetVariableSize@CMediaType@@QAEXXZ		; CMediaType::SetVariableSize
PUBLIC	?SetSampleSize@CMediaType@@QAEXK@Z		; CMediaType::SetSampleSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetSampleSize@CMediaType@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 4
?SetSampleSize@CMediaType@@QAEXK@Z PROC			; CMediaType::SetSampleSize, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.cpp
; Line 160
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 161
	cmp	DWORD PTR _sz$[ebp], 0
	jne	SHORT $LN2@SetSampleS
; Line 162
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetVariableSize@CMediaType@@QAEXXZ	; CMediaType::SetVariableSize
; Line 163
	jmp	SHORT $LN3@SetSampleS
$LN2@SetSampleS:
; Line 164
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 1
; Line 165
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _sz$[ebp]
	mov	DWORD PTR [ecx+40], edx
$LN3@SetSampleS:
; Line 167
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSampleSize@CMediaType@@QAEXK@Z ENDP			; CMediaType::SetSampleSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetVariableSize@CMediaType@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetVariableSize@CMediaType@@QAEXXZ PROC		; CMediaType::SetVariableSize, COMDAT
; _this$ = ecx
; Line 171
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 173
	mov	esp, ebp
	pop	ebp
	ret	0
?SetVariableSize@CMediaType@@QAEXXZ ENDP		; CMediaType::SetVariableSize
_TEXT	ENDS
PUBLIC	?SetTemporalCompression@CMediaType@@QAEXH@Z	; CMediaType::SetTemporalCompression
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetTemporalCompression@CMediaType@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bCompressed$ = 8					; size = 4
?SetTemporalCompression@CMediaType@@QAEXH@Z PROC	; CMediaType::SetTemporalCompression, COMDAT
; _this$ = ecx
; Line 177
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 178
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bCompressed$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 179
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTemporalCompression@CMediaType@@QAEXH@Z ENDP	; CMediaType::SetTemporalCompression
_TEXT	ENDS
PUBLIC	?AllocFormatBuffer@CMediaType@@QAEPAEK@Z	; CMediaType::AllocFormatBuffer
PUBLIC	?SetFormat@CMediaType@@QAEHPAEK@Z		; CMediaType::SetFormat
EXTRN	_memcpy:PROC
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetFormat@CMediaType@@QAEHPAEK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pformat$ = 8						; size = 4
_cb$ = 12						; size = 4
?SetFormat@CMediaType@@QAEHPAEK@Z PROC			; CMediaType::SetFormat, COMDAT
; _this$ = ecx
; Line 183
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 184
	mov	eax, DWORD PTR _cb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocFormatBuffer@CMediaType@@QAEPAEK@Z ; CMediaType::AllocFormatBuffer
	test	eax, eax
	jne	SHORT $LN2@SetFormat
; Line 185
	xor	eax, eax
	jmp	SHORT $LN3@SetFormat
$LN2@SetFormat:
; Line 187
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	jne	SHORT $LN1@SetFormat
	push	187					; 000000bbH
	push	OFFSET $SG82323
	push	OFFSET $SG82324
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetFormat:
; Line 188
	mov	edx, DWORD PTR _cb$[ebp]
	push	edx
	mov	eax, DWORD PTR _pformat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 189
	mov	eax, 1
$LN3@SetFormat:
; Line 190
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetFormat@CMediaType@@QAEHPAEK@Z ENDP			; CMediaType::SetFormat
_TEXT	ENDS
PUBLIC	?SetFormatType@CMediaType@@QAEXPBU_GUID@@@Z	; CMediaType::SetFormatType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetFormatType@CMediaType@@QAEXPBU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pformattype$ = 8					; size = 4
?SetFormatType@CMediaType@@QAEXPBU_GUID@@@Z PROC	; CMediaType::SetFormatType, COMDAT
; _this$ = ecx
; Line 200
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 201
	mov	eax, DWORD PTR _pformattype$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 202
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFormatType@CMediaType@@QAEXPBU_GUID@@@Z ENDP	; CMediaType::SetFormatType
_TEXT	ENDS
PUBLIC	?ResetFormatBuffer@CMediaType@@QAEXXZ		; CMediaType::ResetFormatBuffer
EXTRN	__imp__CoTaskMemFree@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ResetFormatBuffer@CMediaType@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetFormatBuffer@CMediaType@@QAEXXZ PROC		; CMediaType::ResetFormatBuffer, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 209
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN1@ResetForma
; Line 210
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	DWORD PTR __imp__CoTaskMemFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ResetForma:
; Line 212
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 213
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0
; Line 214
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetFormatBuffer@CMediaType@@QAEXXZ ENDP		; CMediaType::ResetFormatBuffer
_TEXT	ENDS
EXTRN	__imp__CoTaskMemAlloc@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AllocFormatBuffer@CMediaType@@QAEPAEK@Z
_TEXT	SEGMENT
_pNewFormat$ = -8					; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?AllocFormatBuffer@CMediaType@@QAEPAEK@Z PROC		; CMediaType::AllocFormatBuffer, COMDAT
; _this$ = ecx
; Line 223
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 224
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN6@AllocForma
	push	224					; 000000e0H
	push	OFFSET $SG82339
	push	OFFSET $SG82340
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@AllocForma:
; Line 228
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	ecx, DWORD PTR _length$[ebp]
	jne	SHORT $LN5@AllocForma
; Line 229
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	jmp	$LN7@AllocForma
$LN5@AllocForma:
; Line 234
	mov	esi, esp
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewFormat$[ebp], eax
; Line 235
	cmp	DWORD PTR _pNewFormat$[ebp], 0
	jne	SHORT $LN4@AllocForma
; Line 236
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	cmp	edx, DWORD PTR [ecx+64]
	ja	SHORT $LN3@AllocForma
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	jmp	SHORT $LN7@AllocForma
$LN3@AllocForma:
; Line 237
	xor	eax, eax
	jmp	SHORT $LN7@AllocForma
$LN4@AllocForma:
; Line 242
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN2@AllocForma
; Line 243
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jne	SHORT $LN1@AllocForma
	push	243					; 000000f3H
	push	OFFSET $SG82348
	push	OFFSET $SG82349
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@AllocForma:
; Line 244
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	DWORD PTR __imp__CoTaskMemFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@AllocForma:
; Line 247
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx+64], eax
; Line 248
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pNewFormat$[ebp]
	mov	DWORD PTR [ecx+68], edx
; Line 249
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
$LN7@AllocForma:
; Line 250
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AllocFormatBuffer@CMediaType@@QAEPAEK@Z ENDP		; CMediaType::AllocFormatBuffer
_TEXT	ENDS
PUBLIC	?ReallocFormatBuffer@CMediaType@@QAEPAEK@Z	; CMediaType::ReallocFormatBuffer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReallocFormatBuffer@CMediaType@@QAEPAEK@Z
_TEXT	SEGMENT
tv152 = -12						; size = 4
_pNewFormat$ = -8					; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?ReallocFormatBuffer@CMediaType@@QAEPAEK@Z PROC		; CMediaType::ReallocFormatBuffer, COMDAT
; _this$ = ecx
; Line 260
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 261
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN6@ReallocFor
	push	261					; 00000105H
	push	OFFSET $SG82356
	push	OFFSET $SG82357
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@ReallocFor:
; Line 265
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	ecx, DWORD PTR _length$[ebp]
	jne	SHORT $LN5@ReallocFor
; Line 266
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	jmp	$LN7@ReallocFor
$LN5@ReallocFor:
; Line 271
	mov	esi, esp
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pNewFormat$[ebp], eax
; Line 272
	cmp	DWORD PTR _pNewFormat$[ebp], 0
	jne	SHORT $LN4@ReallocFor
; Line 273
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	cmp	edx, DWORD PTR [ecx+64]
	ja	SHORT $LN3@ReallocFor
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	jmp	$LN7@ReallocFor
$LN3@ReallocFor:
; Line 274
	xor	eax, eax
	jmp	$LN7@ReallocFor
$LN4@ReallocFor:
; Line 280
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN2@ReallocFor
; Line 281
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jne	SHORT $LN1@ReallocFor
	push	281					; 00000119H
	push	OFFSET $SG82365
	push	OFFSET $SG82366
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@ReallocFor:
; Line 282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	ecx, DWORD PTR [eax+64]
	jae	SHORT $LN9@ReallocFor
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv152[ebp], edx
	jmp	SHORT $LN10@ReallocFor
$LN9@ReallocFor:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR tv152[ebp], ecx
$LN10@ReallocFor:
	mov	edx, DWORD PTR tv152[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _pNewFormat$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 283
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	DWORD PTR __imp__CoTaskMemFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ReallocFor:
; Line 286
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx+64], eax
; Line 287
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pNewFormat$[ebp]
	mov	DWORD PTR [ecx+68], edx
; Line 288
	mov	eax, DWORD PTR _pNewFormat$[ebp]
$LN7@ReallocFor:
; Line 289
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReallocFormatBuffer@CMediaType@@QAEPAEK@Z ENDP		; CMediaType::ReallocFormatBuffer
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitMediaType@CMediaType@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitMediaType@CMediaType@@QAEXXZ PROC			; CMediaType::InitMediaType, COMDAT
; _this$ = ecx
; Line 294
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 295
	push	72					; 00000048H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 296
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 1
; Line 297
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 1
; Line 298
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitMediaType@CMediaType@@QAEXXZ ENDP			; CMediaType::InitMediaType
_TEXT	ENDS
PUBLIC	_==@8
PUBLIC	?IsPartiallySpecified@CMediaType@@QBEHXZ	; CMediaType::IsPartiallySpecified
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsPartiallySpecified@CMediaType@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPartiallySpecified@CMediaType@@QBEHXZ PROC		; CMediaType::IsPartiallySpecified, COMDAT
; _this$ = ecx
; Line 306
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 308
	push	OFFSET _GUID_NULL
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	jne	SHORT $LN2@IsPartiall
	push	OFFSET _GUID_NULL
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN3@IsPartiall
$LN2@IsPartiall:
; Line 309
	mov	eax, 1
	jmp	SHORT $LN4@IsPartiall
; Line 310
	jmp	SHORT $LN4@IsPartiall
$LN3@IsPartiall:
; Line 311
	xor	eax, eax
$LN4@IsPartiall:
; Line 313
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPartiallySpecified@CMediaType@@QBEHXZ ENDP		; CMediaType::IsPartiallySpecified
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
PUBLIC	_!=@8
PUBLIC	?MatchesPartial@CMediaType@@QBEHPBV1@@Z		; CMediaType::MatchesPartial
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MatchesPartial@CMediaType@@QBEHPBV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ppartial$ = 8						; size = 4
?MatchesPartial@CMediaType@@QBEHPBV1@@Z PROC		; CMediaType::MatchesPartial, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.cpp
; Line 317
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 319
	push	OFFSET _GUID_NULL
	mov	eax, DWORD PTR _ppartial$[ebp]
	push	eax
	call	_!=@8
	test	eax, eax
	je	SHORT $LN6@MatchesPar
	mov	ecx, DWORD PTR _ppartial$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_!=@8
	test	eax, eax
	je	SHORT $LN6@MatchesPar
; Line 320
	xor	eax, eax
	jmp	$LN7@MatchesPar
$LN6@MatchesPar:
; Line 323
	push	OFFSET _GUID_NULL
	mov	eax, DWORD PTR _ppartial$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_!=@8
	test	eax, eax
	je	SHORT $LN5@MatchesPar
	mov	ecx, DWORD PTR _ppartial$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_!=@8
	test	eax, eax
	je	SHORT $LN5@MatchesPar
; Line 324
	xor	eax, eax
	jmp	SHORT $LN7@MatchesPar
$LN5@MatchesPar:
; Line 327
	push	OFFSET _GUID_NULL
	mov	eax, DWORD PTR _ppartial$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	call	_!=@8
	test	eax, eax
	je	SHORT $LN4@MatchesPar
; Line 329
	mov	ecx, DWORD PTR _ppartial$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	_!=@8
	test	eax, eax
	je	SHORT $LN3@MatchesPar
; Line 330
	xor	eax, eax
	jmp	SHORT $LN7@MatchesPar
$LN3@MatchesPar:
; Line 332
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ppartial$[ebp]
	mov	edx, DWORD PTR [eax+64]
	cmp	edx, DWORD PTR [ecx+64]
	je	SHORT $LN2@MatchesPar
; Line 333
	xor	eax, eax
	jmp	SHORT $LN7@MatchesPar
$LN2@MatchesPar:
; Line 336
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN4@MatchesPar
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _ppartial$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@MatchesPar
; Line 337
	xor	eax, eax
	jmp	SHORT $LN7@MatchesPar
$LN4@MatchesPar:
; Line 341
	mov	eax, 1
$LN7@MatchesPar:
; Line 343
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?MatchesPartial@CMediaType@@QBEHPBV1@@Z ENDP		; CMediaType::MatchesPartial
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _!=@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_!=@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 198
	push	ebp
	mov	ebp, esp
; Line 199
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_==@8
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 200
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_!=@8	ENDP
_TEXT	ENDS
PUBLIC	?DeleteMediaType@@YGXPAU_AMMediaType@@@Z	; DeleteMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteMediaType@@YGXPAU_AMMediaType@@@Z
_TEXT	SEGMENT
_pmt$ = 8						; size = 4
?DeleteMediaType@@YGXPAU_AMMediaType@@@Z PROC		; DeleteMediaType, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.cpp
; Line 353
	push	ebp
	mov	ebp, esp
	push	esi
; Line 356
	cmp	DWORD PTR _pmt$[ebp], 0
	jne	SHORT $LN1@DeleteMedi
; Line 357
	jmp	SHORT $LN2@DeleteMedi
$LN1@DeleteMedi:
; Line 360
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	call	?FreeMediaType@@YGXAAU_AMMediaType@@@Z	; FreeMediaType
; Line 361
	mov	esi, esp
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoTaskMemFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeleteMedi:
; Line 362
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?DeleteMediaType@@YGXPAU_AMMediaType@@@Z ENDP		; DeleteMediaType
_TEXT	ENDS
PUBLIC	?CreateMediaType@@YGPAU_AMMediaType@@PBU1@@Z	; CreateMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateMediaType@@YGPAU_AMMediaType@@PBU1@@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pMediaType$ = -4					; size = 4
_pSrc$ = 8						; size = 4
?CreateMediaType@@YGPAU_AMMediaType@@PBU1@@Z PROC	; CreateMediaType, COMDAT
; Line 371
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 372
	cmp	DWORD PTR _pSrc$[ebp], 0
	jne	SHORT $LN3@CreateMedi
	push	372					; 00000174H
	push	OFFSET $SG82398
	push	OFFSET $SG82399
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CreateMedi:
; Line 377
	mov	esi, esp
	push	72					; 00000048H
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pMediaType$[ebp], eax
; Line 379
	cmp	DWORD PTR _pMediaType$[ebp], 0
	jne	SHORT $LN2@CreateMedi
; Line 380
	xor	eax, eax
	jmp	SHORT $LN4@CreateMedi
$LN2@CreateMedi:
; Line 384
	mov	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMediaType$[ebp]
	push	ecx
	call	?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z ; CopyMediaType
	mov	DWORD PTR _hr$[ebp], eax
; Line 385
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateMedi
; Line 386
	mov	esi, esp
	mov	edx, DWORD PTR _pMediaType$[ebp]
	push	edx
	call	DWORD PTR __imp__CoTaskMemFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 387
	xor	eax, eax
	jmp	SHORT $LN4@CreateMedi
$LN1@CreateMedi:
; Line 390
	mov	eax, DWORD PTR _pMediaType$[ebp]
$LN4@CreateMedi:
; Line 391
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CreateMediaType@@YGPAU_AMMediaType@@PBU1@@Z ENDP	; CreateMediaType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z
_TEXT	SEGMENT
_pmtTarget$ = 8						; size = 4
_pmtSource$ = 12					; size = 4
?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z PROC	; CopyMediaType, COMDAT
; Line 397
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 400
	mov	eax, DWORD PTR _pmtSource$[ebp]
	cmp	eax, DWORD PTR _pmtTarget$[ebp]
	jne	SHORT $LN6@CopyMediaT
	push	400					; 00000190H
	push	OFFSET $SG82413
	push	OFFSET $SG82414
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@CopyMediaT:
; Line 401
	mov	esi, DWORD PTR _pmtSource$[ebp]
	mov	ecx, 18					; 00000012H
	mov	edi, DWORD PTR _pmtTarget$[ebp]
	rep movsd
; Line 402
	mov	ecx, DWORD PTR _pmtSource$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN5@CopyMediaT
; Line 403
	mov	edx, DWORD PTR _pmtSource$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jne	SHORT $LN4@CopyMediaT
	push	403					; 00000193H
	push	OFFSET $SG82417
	push	OFFSET $SG82418
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CopyMediaT:
; Line 404
	mov	esi, esp
	mov	eax, DWORD PTR _pmtSource$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _pmtTarget$[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 405
	mov	eax, DWORD PTR _pmtTarget$[ebp]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN3@CopyMediaT
; Line 406
	mov	ecx, DWORD PTR _pmtTarget$[ebp]
	mov	DWORD PTR [ecx+64], 0
; Line 407
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN7@CopyMediaT
; Line 408
	jmp	SHORT $LN5@CopyMediaT
$LN3@CopyMediaT:
; Line 410
	mov	edx, DWORD PTR _pmtTarget$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _pmtSource$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _pmtTarget$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@CopyMediaT:
; Line 413
	mov	edx, DWORD PTR _pmtTarget$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN1@CopyMediaT
; Line 414
	mov	eax, DWORD PTR _pmtTarget$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _pmtTarget$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@CopyMediaT:
; Line 417
	xor	eax, eax
$LN7@CopyMediaT:
; Line 418
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z ENDP	; CopyMediaType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?FreeMediaType@@YGXAAU_AMMediaType@@@Z
_TEXT	SEGMENT
_mt$ = 8						; size = 4
?FreeMediaType@@YGXAAU_AMMediaType@@@Z PROC		; FreeMediaType, COMDAT
; Line 423
	push	ebp
	mov	ebp, esp
	push	esi
; Line 424
	mov	eax, DWORD PTR _mt$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN2@FreeMediaT
; Line 425
	mov	esi, esp
	mov	ecx, DWORD PTR _mt$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	DWORD PTR __imp__CoTaskMemFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 428
	mov	eax, DWORD PTR _mt$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 429
	mov	ecx, DWORD PTR _mt$[ebp]
	mov	DWORD PTR [ecx+68], 0
$LN2@FreeMediaT:
; Line 431
	mov	edx, DWORD PTR _mt$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN3@FreeMediaT
; Line 432
	mov	eax, DWORD PTR _mt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _mt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 433
	mov	eax, DWORD PTR _mt$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN3@FreeMediaT:
; Line 435
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?FreeMediaType@@YGXAAU_AMMediaType@@@Z ENDP		; FreeMediaType
_TEXT	ENDS
PUBLIC	??0FOURCCMap@@QAE@K@Z				; FOURCCMap::FOURCCMap
PUBLIC	__$ArrayPad$
PUBLIC	_CreateAudioMediaType@12
EXTRN	_FORMAT_WaveFormatEx:BYTE
EXTRN	_MEDIATYPE_Audio:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _CreateAudioMediaType@12
_TEXT	SEGMENT
$T82441 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_pwfx$ = 8						; size = 4
_pmt$ = 12						; size = 4
_bSetFormat$ = 16					; size = 4
_CreateAudioMediaType@12 PROC				; COMDAT
; Line 444
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 445
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	ecx, DWORD PTR _MEDIATYPE_Audio
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _MEDIATYPE_Audio+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _MEDIATYPE_Audio+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _MEDIATYPE_Audio+12
	mov	DWORD PTR [eax+12], edx
; Line 446
	mov	eax, DWORD PTR _pwfx$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 65534				; 0000fffeH
	jne	SHORT $LN8@CreateAudi
; Line 447
	mov	edx, DWORD PTR _pwfx$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pmt$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 448
	jmp	SHORT $LN7@CreateAudi
$LN8@CreateAudi:
; Line 449
	mov	eax, DWORD PTR _pwfx$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR $T82441[ebp]
	call	??0FOURCCMap@@QAE@K@Z			; FOURCCMap::FOURCCMap
	mov	edx, DWORD PTR _pmt$[ebp]
	add	edx, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
$LN7@CreateAudi:
; Line 451
	mov	ecx, DWORD PTR _pmt$[ebp]
	add	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _FORMAT_WaveFormatEx
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _FORMAT_WaveFormatEx+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _FORMAT_WaveFormatEx+8
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _FORMAT_WaveFormatEx+12
	mov	DWORD PTR [ecx+12], eax
; Line 452
	mov	ecx, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR [ecx+32], 1
; Line 453
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 454
	mov	eax, DWORD PTR _pwfx$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 455
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR [eax+60], 0
; Line 456
	cmp	DWORD PTR _bSetFormat$[ebp], 0
	je	$LN6@CreateAudi
; Line 457
	mov	ecx, DWORD PTR _pwfx$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 1
	jne	SHORT $LN5@CreateAudi
; Line 458
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR [eax+64], 18			; 00000012H
; Line 459
	jmp	SHORT $LN4@CreateAudi
$LN5@CreateAudi:
; Line 460
	mov	ecx, DWORD PTR _pwfx$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	add	edx, 18					; 00000012H
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR [eax+64], edx
$LN4@CreateAudi:
; Line 462
	mov	esi, esp
	mov	ecx, DWORD PTR _pmt$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR [ecx+68], eax
; Line 463
	mov	edx, DWORD PTR _pmt$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jne	SHORT $LN3@CreateAudi
; Line 464
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN9@CreateAudi
$LN3@CreateAudi:
; Line 466
	mov	eax, DWORD PTR _pwfx$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN2@CreateAudi
; Line 467
	push	16					; 00000010H
	mov	edx, DWORD PTR _pwfx$[ebp]
	push	edx
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 468
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	eax, DWORD PTR [edx+68]
	xor	ecx, ecx
	mov	WORD PTR [eax+16], cx
; Line 469
	jmp	SHORT $LN6@CreateAudi
$LN2@CreateAudi:
; Line 470
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _pwfx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN6@CreateAudi:
; Line 473
	xor	eax, eax
$LN9@CreateAudi:
; Line 474
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_CreateAudioMediaType@12 ENDP
_TEXT	ENDS
PUBLIC	?SetFOURCC@FOURCCMap@@QAEXK@Z			; FOURCCMap::SetFOURCC
PUBLIC	?InitGUID@FOURCCMap@@AAEXXZ			; FOURCCMap::InitGUID
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0FOURCCMap@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fourcc$ = 8						; size = 4
??0FOURCCMap@@QAE@K@Z PROC				; FOURCCMap::FOURCCMap, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\fourcc.h
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitGUID@FOURCCMap@@AAEXXZ		; FOURCCMap::InitGUID
; Line 71
	mov	eax, DWORD PTR _fourcc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFOURCC@FOURCCMap@@QAEXK@Z		; FOURCCMap::SetFOURCC
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0FOURCCMap@@QAE@K@Z ENDP				; FOURCCMap::FOURCCMap
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?InitGUID@FOURCCMap@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitGUID@FOURCCMap@@AAEXXZ PROC			; FOURCCMap::InitGUID, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 55
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 56
	mov	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+6], dx
; Line 57
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], -1442840448		; aa000080H
; Line 58
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 1905997824		; 719b3800H
; Line 59
	mov	esp, ebp
	pop	ebp
	ret	0
?InitGUID@FOURCCMap@@AAEXXZ ENDP			; FOURCCMap::InitGUID
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetFOURCC@FOURCCMap@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fourcc$ = 8						; size = 4
?SetFOURCC@FOURCCMap@@QAEXK@Z PROC			; FOURCCMap::SetFOURCC, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fourcc$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFOURCC@FOURCCMap@@QAEXK@Z ENDP			; FOURCCMap::SetFOURCC
_TEXT	ENDS
END
