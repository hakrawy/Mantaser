; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Downloads\MediaPoint\src\filters\BaseClasses\outputq.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
CONST	SEGMENT
$SG81569 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81570 DB	'm', 00H, '_', 00H, 'l', 00H, 'B', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG81586 DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'p', 00H, 'i', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG81652 DB	'S', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 00H, 00H
$SG81664 DB	'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'p', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'd', 00H
	DB	'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'l', 00H, 'y'
	DB	00H, ' ', 00H, '-', 00H, ' ', 00H, 'n', 00H, 'o', 00H, ' ', 00H
	DB	't', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG81668 DB	'C', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, '~', 00H, 'C', 00H, 'O', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u'
	DB	00H, 'e', 00H, 00H, 00H
$SG81674 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81675 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'h', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81677 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81678 DB	'm', 00H, '_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG81684 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81685 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'h', 00H, 'S', 00H, 'e', 00H, 'm', 00H, ')', 00H
	DB	00H, 00H
$SG81726 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81727 DB	'm', 00H, '_', 00H, 'l', 00H, 'W', 00H, 'a', 00H, 'i', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H
$SG81738 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81739 DB	'p', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	't', 00H, 00H, 00H
$SG81747 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81748 DB	'!', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'F', 00H, 'l', 00H
	DB	'u', 00H, 's', 00H, 'h', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG81754 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81755 DB	'!', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'F', 00H, 'l', 00H
	DB	'u', 00H, 's', 00H, 'h', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG81761 DB	'R', 00H, 'e', 00H, 'c', 00H, 'e', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p'
	DB	00H, 'l', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%'
	DB	00H, '8', 00H, '.', 00H, '8', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG81767 DB	'C', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ' '
	DB	00H, 's', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'O', 00H, 'f'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81771 DB	'C', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ' '
	DB	00H, 'g', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '8'
	DB	00H, '.', 00H, '8', 00H, 'X', 00H, ' ', 00H, 'f', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'O'
	DB	00H, 'f', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'm', 00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81818 DB	'C', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ' '
	DB	00H, 's', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'O', 00H, 'f'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81822 DB	'C', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ' '
	DB	00H, 'g', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '8'
	DB	00H, '.', 00H, '8', 00H, 'X', 00H, ' ', 00H, 'f', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'O'
	DB	00H, 'f', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'm', 00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81847 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81848 DB	'm', 00H, '_', 00H, 'b', 00H, 'F', 00H, 'l', 00H, 'u', 00H
	DB	's', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG81876 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81877 DB	'!', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'F', 00H, 'l', 00H
	DB	'u', 00H, 's', 00H, 'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'F', 00H
	DB	'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H
	ORG $+6
$SG81882 DB	'C', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ' '
	DB	00H, '(', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, ')', 00H, ' ', 00H, ':', 00H, ' ', 00H, 'D', 00H, 'i'
	DB	00H, 's', 00H, 'c', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 's'
	DB	00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, '8', 00H, '.', 00H, '8', 00H, 'X', 00H
	DB	00H, 00H
	ORG $+2
$SG81885 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81886 DB	'!', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'F', 00H, 'l', 00H
	DB	'u', 00H, 's', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H
	ORG $+2
$SG81888 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81889 DB	'm', 00H, '_', 00H, 'n', 00H, 'B', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'm', 00H, '_', 00H, 'l', 00H, 'B', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H
	DB	00H
$SG81891 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81892 DB	'm', 00H, '_', 00H, 'n', 00H, 'B', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	'm', 00H, '_', 00H, 'b', 00H, 'B', 00H, 'a', 00H, 't', 00H, 'c'
	DB	00H, 'h', 00H, 'E', 00H, 'x', 00H, 'a', 00H, 'c', 00H, 't', 00H
	DB	00H, 00H
	ORG $+2
$SG81900 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81901 DB	'm', 00H, '_', 00H, 'n', 00H, 'B', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'm', 00H, '_', 00H, 'l', 00H, 'B', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H
	DB	00H
$SG81907 DB	'B', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 's'
	DB	00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 's', 00H
	DB	00H, 00H
$SG81920 DB	'C', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ' '
	DB	00H, '(', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H
	DB	'd', 00H, ')', 00H, ' ', 00H, ':', 00H, ' ', 00H, 'D', 00H, 'i'
	DB	00H, 's', 00H, 'c', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 's'
	DB	00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, '8', 00H, '.', 00H, '8', 00H, 'X', 00H
	DB	00H, 00H
	ORG $+2
$SG81963 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81964 DB	'p', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG81974 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81975 DB	'I', 00H, 's', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H
	DB	'e', 00H, 'd', 00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81987 DB	'.', 00H, '.', 00H, '\', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'q', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81988 DB	'!', 00H, 'I', 00H, 's', 00H, 'Q', 00H, 'u', 00H, 'e', 00H
	DB	'u', 00H, 'e', 00H, 'd', 00H, '(', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'L', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e', 00H, 't'
	DB	00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	?InitialThreadProc@COutputQueue@@KGKPAX@Z	; COutputQueue::InitialThreadProc
PUBLIC	??0?$CGenericList@UIMediaSample@@@@QAE@PA_WHHH@Z ; CGenericList<IMediaSample>::CGenericList<IMediaSample>
PUBLIC	??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z	; COutputQueue::COutputQueue
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??1CAMEvent@@QAE@XZ:PROC			; CAMEvent::~CAMEvent
EXTRN	??1CCritSec@@QAE@XZ:PROC			; CCritSec::~CCritSec
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__CreateSemaphoreW@16:PROC
EXTRN	?DbgLogInfo@@YAXKKPB_WZZ:PROC			; DbgLogInfo
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_IID_IMemInputPin:BYTE
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
EXTRN	??0CAMEvent@@QAE@H@Z:PROC			; CAMEvent::CAMEvent
EXTRN	??0CCritSec@@QAE@XZ:PROC			; CCritSec::CCritSec
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\outputq.cpp
xdata$x	SEGMENT
__unwindtable$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z$2
__ehfuncinfo$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z
_TEXT	SEGMENT
tv200 = -60						; size = 4
tv80 = -56						; size = 4
$T82305 = -52						; size = 4
$T82304 = -48						; size = 4
$T82303 = -44						; size = 4
_dwError$81658 = -40					; size = 4
_dwThreadId$81655 = -32					; size = 4
_dwError$81588 = -24					; size = 4
_hr$81577 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pInputPin$ = 8						; size = 4
_phr$ = 12						; size = 4
_bAuto$ = 16						; size = 4
_bQueue$ = 20						; size = 4
_lBatchSize$ = 24					; size = 4
_bBatchExact$ = 28					; size = 4
_lListSize$ = 32					; size = 4
_dwPriority$ = 36					; size = 4
_bFlushingOpt$ = 40					; size = 1
??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z PROC	; COutputQueue::COutputQueue, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pInputPin$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	cmp	DWORD PTR _bBatchExact$[ebp], 0
	je	SHORT $LN14@COutputQue
	cmp	DWORD PTR _lBatchSize$[ebp], 1
	jle	SHORT $LN14@COutputQue
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN15@COutputQue
$LN14@COutputQue:
	mov	DWORD PTR tv80[ebp], 0
$LN15@COutputQue:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _lBatchSize$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0CAMEvent@@QAE@H@Z			; CAMEvent::CAMEvent
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bFlushingOpt$[ebp]
	mov	BYTE PTR [eax+88], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+104], 0
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jg	SHORT $LN11@COutputQue
	push	71					; 00000047H
	push	OFFSET $SG81569
	push	OFFSET $SG81570
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN11@COutputQue:
; Line 74
	mov	ecx, DWORD PTR _phr$[ebp]
	cmp	DWORD PTR [ecx], 0
	jge	SHORT $LN10@COutputQue
; Line 75
	jmp	$LN12@COutputQue
$LN10@COutputQue:
; Line 80
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	esi, esp
	push	edx
	push	OFFSET _IID_IMemInputPin
	mov	eax, DWORD PTR _pInputPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pInputPin$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 81
	mov	edx, DWORD PTR _phr$[ebp]
	cmp	DWORD PTR [edx], 0
	jge	SHORT $LN9@COutputQue
; Line 82
	jmp	$LN12@COutputQue
$LN9@COutputQue:
; Line 87
	cmp	DWORD PTR _bAuto$[ebp], 0
	je	SHORT $LN8@COutputQue
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81577[ebp], eax
; Line 89
	cmp	DWORD PTR _hr$81577[ebp], 0
	jl	SHORT $LN8@COutputQue
; Line 90
	xor	eax, eax
	cmp	DWORD PTR _hr$81577[ebp], 0
	sete	al
	mov	DWORD PTR _bQueue$[ebp], eax
$LN8@COutputQue:
; Line 96
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T82303[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T82303[ebp]
	mov	DWORD PTR [eax+68], ecx
; Line 97
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jne	SHORT $LN6@COutputQue
; Line 98
	mov	eax, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [eax], -2147024882		; 8007000eH
; Line 99
	jmp	$LN12@COutputQue
$LN6@COutputQue:
; Line 104
	cmp	DWORD PTR _bQueue$[ebp], 0
	je	$LN5@COutputQue
; Line 105
	push	OFFSET $SG81586
	push	2
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 106
	mov	esi, esp
	push	0
	push	2147483647				; 7fffffffH
	push	0
	push	0
	call	DWORD PTR __imp__CreateSemaphoreW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 107
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN4@COutputQue
; Line 108
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwError$81588[ebp], eax
; Line 109
	mov	eax, DWORD PTR _dwError$81588[ebp]
	or	eax, -2147024896			; 80070000H
	mov	ecx, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 110
	jmp	$LN12@COutputQue
$LN4@COutputQue:
; Line 115
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T82305[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T82305[ebp], 0
	je	SHORT $LN16@COutputQue
	push	0
	push	0
	mov	edx, DWORD PTR _lListSize$[ebp]
	push	edx
	push	OFFSET $SG81652
	mov	ecx, DWORD PTR $T82305[ebp]
	call	??0?$CGenericList@UIMediaSample@@@@QAE@PA_WHHH@Z ; CGenericList<IMediaSample>::CGenericList<IMediaSample>
	mov	DWORD PTR tv200[ebp], eax
	jmp	SHORT $LN17@COutputQue
$LN16@COutputQue:
	mov	DWORD PTR tv200[ebp], 0
$LN17@COutputQue:
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR $T82304[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T82304[ebp]
	mov	DWORD PTR [ecx+52], edx
; Line 116
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN3@COutputQue
; Line 117
	mov	ecx, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [ecx], -2147024882		; 8007000eH
; Line 118
	jmp	SHORT $LN12@COutputQue
$LN3@COutputQue:
; Line 128
	mov	esi, esp
	lea	edx, DWORD PTR _dwThreadId$81655[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?InitialThreadProc@COutputQueue@@KGKPAX@Z ; COutputQueue::InitialThreadProc
	push	0
	push	0
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax
; Line 129
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+64], 0
	jne	SHORT $LN2@COutputQue
; Line 130
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwError$81658[ebp], eax
; Line 131
	mov	eax, DWORD PTR _dwError$81658[ebp]
	or	eax, -2147024896			; 80070000H
	mov	ecx, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 132
	jmp	SHORT $LN12@COutputQue
$LN2@COutputQue:
; Line 134
	mov	esi, esp
	mov	edx, DWORD PTR _dwPriority$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	DWORD PTR __imp__SetThreadPriority@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 135
	jmp	SHORT $LN12@COutputQue
$LN5@COutputQue:
; Line 136
	push	OFFSET $SG81664
	push	2
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
$LN12@COutputQue:
; Line 138
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@COutputQue
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
$LN24@COutputQue:
	DD	1
	DD	$LN23@COutputQue
$LN23@COutputQue:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN21@COutputQue
$LN21@COutputQue:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__unwindfunclet$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
__unwindfunclet$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z$2:
	mov	eax, DWORD PTR $T82305[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COutputQueue@@QAE@PAUIPin@@PAJHHJHJK_N@Z ENDP	; COutputQueue::COutputQueue
PUBLIC	?FreeSamples@COutputQueue@@IAEXXZ		; COutputQueue::FreeSamples
PUBLIC	??_G?$CGenericList@UIMediaSample@@@@QAEPAXI@Z	; CGenericList<IMediaSample>::`scalar deleting destructor'
PUBLIC	?GetCount@?$CGenericList@UIMediaSample@@@@QBEHXZ ; CGenericList<IMediaSample>::GetCount
PUBLIC	??1CAutoLock@@QAE@XZ				; CAutoLock::~CAutoLock
PUBLIC	?NotifyThread@COutputQueue@@IAEXXZ		; COutputQueue::NotifyThread
PUBLIC	??0CAutoLock@@QAE@PAVCCritSec@@@Z		; CAutoLock::CAutoLock
PUBLIC	??1COutputQueue@@QAE@XZ				; COutputQueue::~COutputQueue
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	?DbgWaitForSingleObject@@YGKPAX@Z:PROC		; DbgWaitForSingleObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COutputQueue@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COutputQueue@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COutputQueue@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1COutputQueue@@QAE@XZ$2
__ehfuncinfo$??1COutputQueue@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1COutputQueue@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COutputQueue@@QAE@XZ
_TEXT	SEGMENT
tv153 = -44						; size = 4
$T82341 = -40						; size = 4
$T82338 = -36						; size = 4
$T82337 = -32						; size = 4
_lck$81671 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COutputQueue@@QAE@XZ PROC				; COutputQueue::~COutputQueue, COMDAT
; _this$ = ecx
; Line 149
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COutputQueue@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 150
	push	OFFSET $SG81668
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 152
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN7@COutputQue@2
; Line 153
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@COutputQue@2:
; Line 155
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	$LN6@COutputQue@2
; Line 157
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _lck$81671[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 158
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 1
; Line 159
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 1
; Line 160
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyThread@COutputQueue@@IAEXXZ	; COutputQueue::NotifyThread
; Line 161
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _lck$81671[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 162
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	?DbgWaitForSingleObject@@YGKPAX@Z	; DbgWaitForSingleObject
; Line 163
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@COutputQue@2
	push	163					; 000000a3H
	push	OFFSET $SG81674
	push	OFFSET $SG81675
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@COutputQue@2:
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	?GetCount@?$CGenericList@UIMediaSample@@@@QBEHXZ ; CGenericList<IMediaSample>::GetCount
	test	eax, eax
	je	SHORT $LN4@COutputQue@2
	push	167					; 000000a7H
	push	OFFSET $SG81677
	push	OFFSET $SG81678
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@COutputQue@2:
; Line 168
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR $T82338[ebp], edx
	mov	eax, DWORD PTR $T82338[ebp]
	mov	DWORD PTR $T82337[ebp], eax
	cmp	DWORD PTR $T82337[ebp], 0
	je	SHORT $LN10@COutputQue@2
	push	1
	mov	ecx, DWORD PTR $T82337[ebp]
	call	??_G?$CGenericList@UIMediaSample@@@@QAEPAXI@Z
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN11@COutputQue@2
$LN10@COutputQue@2:
	mov	DWORD PTR tv153[ebp], 0
$LN11@COutputQue@2:
; Line 169
	jmp	SHORT $LN3@COutputQue@2
$LN6@COutputQue@2:
; Line 170
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeSamples@COutputQueue@@IAEXXZ	; COutputQueue::FreeSamples
$LN3@COutputQue@2:
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN2@COutputQue@2
; Line 173
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@COutputQue@2
	push	173					; 000000adH
	push	OFFSET $SG81684
	push	OFFSET $SG81685
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@COutputQue@2:
; Line 175
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR $T82341[ebp], edx
	mov	eax, DWORD PTR $T82341[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 176
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@COutputQue@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@COutputQue@2:
	DD	1
	DD	$LN17@COutputQue@2
$LN17@COutputQue@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@COutputQue@2
$LN15@COutputQue@2:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COutputQueue@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__unwindfunclet$??1COutputQueue@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
__unwindfunclet$??1COutputQueue@@QAE@XZ$2:
	lea	ecx, DWORD PTR _lck$81671[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$??1COutputQueue@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COutputQueue@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COutputQueue@@QAE@XZ ENDP				; COutputQueue::~COutputQueue
EXTRN	?Lock@CCritSec@@QAEXXZ:PROC			; CCritSec::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAutoLock@@QAE@PAVCCritSec@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plock$ = 8						; size = 4
??0CAutoLock@@QAE@PAVCCritSec@@@Z PROC			; CAutoLock::CAutoLock, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plock$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 97
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAutoLock@@QAE@PAVCCritSec@@@Z ENDP			; CAutoLock::CAutoLock
_TEXT	ENDS
EXTRN	?Unlock@CCritSec@@QAEXXZ:PROC			; CCritSec::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoLock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoLock@@QAE@XZ PROC				; CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
; Line 102
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoLock@@QAE@XZ ENDP				; CAutoLock::~CAutoLock
_TEXT	ENDS
PUBLIC	??1?$CGenericList@UIMediaSample@@@@QAE@XZ	; CGenericList<IMediaSample>::~CGenericList<IMediaSample>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$CGenericList@UIMediaSample@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CGenericList@UIMediaSample@@@@QAEPAXI@Z PROC	; CGenericList<IMediaSample>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CGenericList@UIMediaSample@@@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CGenericList@UIMediaSample@@@@QAEPAXI@Z ENDP	; CGenericList<IMediaSample>::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CBaseList@@QAE@XZ:PROC			; CBaseList::~CBaseList
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CGenericList@UIMediaSample@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CGenericList@UIMediaSample@@@@QAE@XZ PROC		; CGenericList<IMediaSample>::~CGenericList<IMediaSample>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseList@@QAE@XZ			; CBaseList::~CBaseList
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGenericList@UIMediaSample@@@@QAE@XZ ENDP		; CGenericList<IMediaSample>::~CGenericList<IMediaSample>
_TEXT	ENDS
PUBLIC	?ThreadProc@COutputQueue@@IAEKXZ		; COutputQueue::ThreadProc
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	?CoInitializeHelper@CAMThread@@SGJXZ:PROC	; CAMThread::CoInitializeHelper
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitialThreadProc@COutputQueue@@KGKPAX@Z
_TEXT	SEGMENT
_dwReturn$ = -12					; size = 4
_pSampleQueue$ = -8					; size = 4
_hrCoInit$ = -4						; size = 4
_pv$ = 8						; size = 4
?InitialThreadProc@COutputQueue@@KGKPAX@Z PROC		; COutputQueue::InitialThreadProc, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\outputq.cpp
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 183
	call	?CoInitializeHelper@CAMThread@@SGJXZ	; CAMThread::CoInitializeHelper
	mov	DWORD PTR _hrCoInit$[ebp], eax
; Line 185
	mov	eax, DWORD PTR _pv$[ebp]
	mov	DWORD PTR _pSampleQueue$[ebp], eax
; Line 186
	mov	ecx, DWORD PTR _pSampleQueue$[ebp]
	call	?ThreadProc@COutputQueue@@IAEKXZ	; COutputQueue::ThreadProc
	mov	DWORD PTR _dwReturn$[ebp], eax
; Line 188
	cmp	DWORD PTR _hrCoInit$[ebp], 0
	jne	SHORT $LN1@InitialThr
; Line 189
	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@InitialThr:
; Line 192
	mov	eax, DWORD PTR _dwReturn$[ebp]
; Line 193
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InitialThreadProc@COutputQueue@@KGKPAX@Z ENDP		; COutputQueue::InitialThreadProc
_TEXT	ENDS
PUBLIC	?IsSpecialSample@COutputQueue@@IAEHPAUIMediaSample@@@Z ; COutputQueue::IsSpecialSample
PUBLIC	?RemoveHead@?$CGenericList@UIMediaSample@@@@QAEPAUIMediaSample@@XZ ; CGenericList<IMediaSample>::RemoveHead
PUBLIC	??BCAMEvent@@QBEPAXXZ				; CAMEvent::operator void *
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_UninitUse:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ThreadProc@COutputQueue@@IAEKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ThreadProc@COutputQueue@@IAEKXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThreadProc@COutputQueue@@IAEKXZ$1
__ehfuncinfo$?ThreadProc@COutputQueue@@IAEKXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ThreadProc@COutputQueue@@IAEKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ThreadProc@COutputQueue@@IAEKXZ
_TEXT	SEGMENT
$T82376 = -86						; size = 1
$T82375 = -85						; size = 1
$T82368 = -84						; size = 4
$T82367 = -80						; size = 4
_hr$81768 = -76						; size = 4
_lck$81750 = -68					; size = 4
_hr$81749 = -60						; size = 4
_nProcessed$81743 = -52					; size = 4
_lck$81712 = -40					; size = 4
_ppacket$81711 = -32					; size = 4
_lNumberToSend$81710 = -28				; size = 4
_pSample$81709 = -24					; size = 4
_bWait$81708 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ThreadProc@COutputQueue@@IAEKXZ PROC			; COutputQueue::ThreadProc, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ThreadProc@COutputQueue@@IAEKXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
$LN38@ThreadProc:
; Line 204
	mov	eax, 1
	test	eax, eax
	je	$LN32@ThreadProc
	mov	BYTE PTR $T82376[ebp], 0
	mov	BYTE PTR $T82375[ebp], 0
; Line 205
	mov	DWORD PTR _bWait$81708[ebp], 0
; Line 216
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _lck$81712[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
$LN39@ThreadProc:
; Line 217
	mov	edx, 1
	test	edx, edx
	je	$LN30@ThreadProc
; Line 219
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN29@ThreadProc
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeSamples@COutputQueue@@IAEXXZ	; COutputQueue::FreeSamples
; Line 221
	mov	DWORD PTR $T82367[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81712[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82367[ebp]
	jmp	$LN32@ThreadProc
$LN29@ThreadProc:
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	je	SHORT $LN28@ThreadProc
; Line 224
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeSamples@COutputQueue@@IAEXXZ	; COutputQueue::FreeSamples
; Line 225
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??BCAMEvent@@QBEPAXXZ			; CAMEvent::operator void *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@ThreadProc:
; Line 230
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	call	?RemoveHead@?$CGenericList@UIMediaSample@@@@QAEPAUIMediaSample@@XZ ; CGenericList<IMediaSample>::RemoveHead
	mov	DWORD PTR _pSample$81709[ebp], eax
; Line 232
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN27@ThreadProc
; Line 234
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN27@ThreadProc:
; Line 238
	cmp	DWORD PTR _pSample$81709[ebp], 0
	je	SHORT $LN26@ThreadProc
	mov	eax, DWORD PTR _pSample$81709[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpecialSample@COutputQueue@@IAEHPAUIMediaSample@@@Z ; COutputQueue::IsSpecialSample
	test	eax, eax
	jne	SHORT $LN26@ThreadProc
; Line 243
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _pSample$81709[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], edx
; Line 244
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	cmp	eax, DWORD PTR [edx+48]
	jne	SHORT $LN25@ThreadProc
; Line 245
	jmp	$LN30@ThreadProc
$LN25@ThreadProc:
; Line 247
	jmp	$LN24@ThreadProc
$LN26@ThreadProc:
; Line 254
	cmp	DWORD PTR _pSample$81709[ebp], 0
	jne	SHORT $LN23@ThreadProc
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN22@ThreadProc
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], 0
	jne	SHORT $LN23@ThreadProc
$LN22@ThreadProc:
; Line 259
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN21@ThreadProc
	push	259					; 00000103H
	push	OFFSET $SG81726
	push	OFFSET $SG81727
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN21@ThreadProc:
; Line 260
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], edx
; Line 261
	mov	DWORD PTR _bWait$81708[ebp], 1
; Line 262
	jmp	SHORT $LN16@ThreadProc
$LN23@ThreadProc:
; Line 267
	cmp	DWORD PTR _pSample$81709[ebp], -2	; fffffffeH
	jne	SHORT $LN19@ThreadProc
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	jne	SHORT $LN19@ThreadProc
; Line 268
	jmp	$LN39@ThreadProc
$LN19@ThreadProc:
; Line 271
	cmp	DWORD PTR _pSample$81709[ebp], -5	; fffffffbH
	jne	SHORT $LN16@ThreadProc
; Line 274
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	call	?RemoveHead@?$CGenericList@UIMediaSample@@@@QAEPAUIMediaSample@@XZ ; CGenericList<IMediaSample>::RemoveHead
	mov	BYTE PTR $T82375[ebp], 1
	mov	DWORD PTR _ppacket$81711[ebp], eax
; Line 276
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN17@ThreadProc
; Line 278
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@ThreadProc:
; Line 281
	cmp	BYTE PTR $T82375[ebp], 0
	jne	SHORT $LN40@ThreadProc
	push	OFFSET $LN41@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN40@ThreadProc:
	cmp	DWORD PTR _ppacket$81711[ebp], 0
	jne	SHORT $LN16@ThreadProc
	push	281					; 00000119H
	push	OFFSET $SG81738
	push	OFFSET $SG81739
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN16@ThreadProc:
; Line 286
	jmp	SHORT $LN30@ThreadProc
$LN24@ThreadProc:
; Line 288
	jmp	$LN39@ThreadProc
$LN30@ThreadProc:
; Line 289
	cmp	DWORD PTR _bWait$81708[ebp], 0
	jne	SHORT $LN15@ThreadProc
; Line 292
	mov	BYTE PTR $T82376[ebp], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _lNumberToSend$81710[ebp], ecx
; Line 293
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], 0
$LN15@ThreadProc:
; Line 295
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81712[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 299
	cmp	DWORD PTR _bWait$81708[ebp], 0
	je	SHORT $LN14@ThreadProc
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	?DbgWaitForSingleObject@@YGKPAX@Z	; DbgWaitForSingleObject
; Line 301
	jmp	$LN38@ThreadProc
$LN14@ThreadProc:
; Line 312
	cmp	BYTE PTR $T82376[ebp], 0
	jne	SHORT $LN42@ThreadProc
	push	OFFSET $LN43@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN42@ThreadProc:
	cmp	DWORD PTR _lNumberToSend$81710[ebp], 0
	je	$LN6@ThreadProc
; Line 314
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], 0
	jne	$LN12@ThreadProc
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN11@ThreadProc
	push	315					; 0000013bH
	push	OFFSET $SG81747
	push	OFFSET $SG81748
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN11@ThreadProc:
; Line 318
	cmp	BYTE PTR $T82376[ebp], 0
	jne	SHORT $LN44@ThreadProc
	push	OFFSET $LN43@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN44@ThreadProc:
	mov	esi, esp
	lea	ecx, DWORD PTR _nProcessed$81743[ebp]
	push	ecx
	mov	edx, DWORD PTR _lNumberToSend$81710[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81749[ebp], eax
; Line 320
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _lck$81750[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 321
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN10@ThreadProc
; Line 322
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hr$81749[ebp]
	mov	DWORD PTR [ecx+100], edx
$LN10@ThreadProc:
; Line 324
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN9@ThreadProc
	push	324					; 00000144H
	push	OFFSET $SG81754
	push	OFFSET $SG81755
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN9@ThreadProc:
; Line 325
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81750[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
$LN12@ThreadProc:
; Line 326
	cmp	BYTE PTR $T82376[ebp], 0
	jne	SHORT $LN45@ThreadProc
	push	OFFSET $LN43@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN45@ThreadProc:
	cmp	DWORD PTR _lNumberToSend$81710[ebp], 0
	je	SHORT $LN7@ThreadProc
; Line 327
	cmp	BYTE PTR $T82376[ebp], 0
	jne	SHORT $LN46@ThreadProc
	push	OFFSET $LN43@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN46@ThreadProc:
	mov	ecx, DWORD PTR _lNumberToSend$81710[ebp]
	sub	ecx, 1
	mov	BYTE PTR $T82376[ebp], 1
	mov	DWORD PTR _lNumberToSend$81710[ebp], ecx
	cmp	BYTE PTR $T82376[ebp], 0
	jne	SHORT $LN47@ThreadProc
	push	OFFSET $LN43@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN47@ThreadProc:
	cmp	BYTE PTR $T82376[ebp], 0
	jne	SHORT $LN48@ThreadProc
	push	OFFSET $LN43@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN48@ThreadProc:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _lNumberToSend$81710[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _lNumberToSend$81710[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 328
	jmp	$LN12@ThreadProc
$LN7@ThreadProc:
; Line 329
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN6@ThreadProc
; Line 335
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	push	OFFSET $SG81761
	push	2
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
$LN6@ThreadProc:
; Line 341
	cmp	DWORD PTR _pSample$81709[ebp], -3	; fffffffdH
	jne	SHORT $LN3@ThreadProc
; Line 349
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN3@ThreadProc
; Line 350
	push	OFFSET $SG81767
	push	2
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 351
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81768[ebp], eax
; Line 352
	cmp	DWORD PTR _hr$81768[ebp], 0
	jge	SHORT $LN3@ThreadProc
; Line 353
	push	OFFSET $SG81771
	push	2
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
$LN3@ThreadProc:
; Line 360
	cmp	DWORD PTR _pSample$81709[ebp], -4	; fffffffcH
	jne	SHORT $LN2@ThreadProc
; Line 361
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 0
; Line 362
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??BCAMEvent@@QBEPAXXZ			; CAMEvent::operator void *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ThreadProc:
; Line 365
	cmp	DWORD PTR _pSample$81709[ebp], -5	; fffffffbH
	jne	$LN1@ThreadProc
; Line 366
	cmp	BYTE PTR $T82375[ebp], 0
	jne	SHORT $LN49@ThreadProc
	push	OFFSET $LN41@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN49@ThreadProc:
	cmp	BYTE PTR $T82375[ebp], 0
	jne	SHORT $LN50@ThreadProc
	push	OFFSET $LN41@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN50@ThreadProc:
	cmp	BYTE PTR $T82375[ebp], 0
	jne	SHORT $LN51@ThreadProc
	push	OFFSET $LN41@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN51@ThreadProc:
	mov	esi, esp
	mov	edx, DWORD PTR _ppacket$81711[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx+16]
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _ppacket$81711[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _ppacket$81711[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 367
	cmp	BYTE PTR $T82375[ebp], 0
	jne	SHORT $LN52@ThreadProc
	push	OFFSET $LN41@ThreadProc
	call	__RTC_UninitUse
	add	esp, 4
$LN52@ThreadProc:
	mov	eax, DWORD PTR _ppacket$81711[ebp]
	mov	DWORD PTR $T82368[ebp], eax
	mov	ecx, DWORD PTR $T82368[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@ThreadProc:
; Line 369
	jmp	$LN38@ThreadProc
$LN32@ThreadProc:
; Line 370
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN58@ThreadProc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN58@ThreadProc:
	DD	3
	DD	$LN57@ThreadProc
$LN57@ThreadProc:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN53@ThreadProc
	DD	-52					; ffffffccH
	DD	4
	DD	$LN54@ThreadProc
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN55@ThreadProc
$LN55@ThreadProc:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN54@ThreadProc:
	DB	110					; 0000006eH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN53@ThreadProc:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN43@ThreadProc:
	DB	108					; 0000006cH
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN41@ThreadProc:
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ThreadProc@COutputQueue@@IAEKXZ$0:
	lea	ecx, DWORD PTR _lck$81712[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__unwindfunclet$?ThreadProc@COutputQueue@@IAEKXZ$1:
	lea	ecx, DWORD PTR _lck$81750[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?ThreadProc@COutputQueue@@IAEKXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ThreadProc@COutputQueue@@IAEKXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ThreadProc@COutputQueue@@IAEKXZ ENDP			; COutputQueue::ThreadProc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BCAMEvent@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCAMEvent@@QBEPAXXZ PROC				; CAMEvent::operator void *, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCAMEvent@@QBEPAXXZ ENDP				; CAMEvent::operator void *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsSpecialSample@COutputQueue@@IAEHPAUIMediaSample@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSample$ = 8						; size = 4
?IsSpecialSample@COutputQueue@@IAEHPAUIMediaSample@@@Z PROC ; COutputQueue::IsSpecialSample, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\outputq.h
; Line 77
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 78
	mov	eax, -16				; fffffff0H
	cmp	eax, DWORD PTR _pSample$[ebp]
	sbb	eax, eax
	neg	eax
; Line 79
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSpecialSample@COutputQueue@@IAEHPAUIMediaSample@@@Z ENDP ; COutputQueue::IsSpecialSample
_TEXT	ENDS
PUBLIC	?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z ; COutputQueue::QueueSample
PUBLIC	?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z ; COutputQueue::ReceiveMultiple
PUBLIC	?IsQueued@COutputQueue@@IAEHXZ			; COutputQueue::IsQueued
PUBLIC	?SendAnyway@COutputQueue@@QAEXXZ		; COutputQueue::SendAnyway
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\outputq.cpp
xdata$x	SEGMENT
__unwindtable$?SendAnyway@COutputQueue@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendAnyway@COutputQueue@@QAEXXZ$0
__ehfuncinfo$?SendAnyway@COutputQueue@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendAnyway@COutputQueue@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SendAnyway@COutputQueue@@QAEXXZ
_TEXT	SEGMENT
_lck$81786 = -36					; size = 4
_nProcessed$81784 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SendAnyway@COutputQueue@@QAEXXZ PROC			; COutputQueue::SendAnyway, COMDAT
; _this$ = ecx
; Line 374
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendAnyway@COutputQueue@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 375
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	jne	SHORT $LN2@SendAnyway
; Line 379
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 1
; Line 381
	lea	ecx, DWORD PTR _nProcessed$81784[ebp]
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z ; COutputQueue::ReceiveMultiple
; Line 382
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+96], 0
; Line 384
	jmp	SHORT $LN3@SendAnyway
$LN2@SendAnyway:
; Line 385
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$81786[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 386
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z ; COutputQueue::QueueSample
; Line 387
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyThread@COutputQueue@@IAEXXZ	; COutputQueue::NotifyThread
; Line 388
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81786[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
$LN3@SendAnyway:
; Line 389
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SendAnyway
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@SendAnyway:
	DD	2
	DD	$LN9@SendAnyway
$LN9@SendAnyway:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@SendAnyway
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN7@SendAnyway
$LN7@SendAnyway:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@SendAnyway:
	DB	110					; 0000006eH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendAnyway@COutputQueue@@QAEXXZ$0:
	lea	ecx, DWORD PTR _lck$81786[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SendAnyway@COutputQueue@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendAnyway@COutputQueue@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendAnyway@COutputQueue@@QAEXXZ ENDP			; COutputQueue::SendAnyway
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsQueued@COutputQueue@@IAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsQueued@COutputQueue@@IAEHXZ PROC			; COutputQueue::IsQueued, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\outputq.h
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+52], 0
	setne	cl
	mov	eax, ecx
; Line 71
	mov	esp, ebp
	pop	ebp
	ret	0
?IsQueued@COutputQueue@@IAEHXZ ENDP			; COutputQueue::IsQueued
_TEXT	ENDS
PUBLIC	?NewSegment@COutputQueue@@QAEX_J0N@Z		; COutputQueue::NewSegment
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\outputq.cpp
xdata$x	SEGMENT
__unwindtable$?NewSegment@COutputQueue@@QAEX_J0N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewSegment@COutputQueue@@QAEX_J0N@Z$0
__ehfuncinfo$?NewSegment@COutputQueue@@QAEX_J0N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewSegment@COutputQueue@@QAEX_J0N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?NewSegment@COutputQueue@@QAEX_J0N@Z
_TEXT	SEGMENT
$T82422 = -36						; size = 4
_lck$81806 = -28					; size = 4
_ppack$81802 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tStart$ = 8						; size = 8
_tStop$ = 16						; size = 8
_dRate$ = 24						; size = 8
?NewSegment@COutputQueue@@QAEX_J0N@Z PROC		; COutputQueue::NewSegment, COMDAT
; _this$ = ecx
; Line 396
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewSegment@COutputQueue@@QAEX_J0N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 397
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	jne	SHORT $LN6@NewSegment
; Line 398
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN5@NewSegment
; Line 399
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN4@NewSegment
; Line 400
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAnyway@COutputQueue@@QAEXXZ	; COutputQueue::SendAnyway
$LN4@NewSegment:
; Line 402
	mov	esi, esp
	sub	esp, 8
	fld	QWORD PTR _dRate$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _tStop$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _tStop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _tStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@NewSegment:
; Line 404
	jmp	$LN2@NewSegment
$LN6@NewSegment:
; Line 405
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	$LN2@NewSegment
; Line 415
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T82422[ebp], eax
	mov	ecx, DWORD PTR $T82422[ebp]
	mov	DWORD PTR _ppack$81802[ebp], ecx
; Line 416
	cmp	DWORD PTR _ppack$81802[ebp], 0
	jne	SHORT $LN1@NewSegment
; Line 417
	jmp	SHORT $LN7@NewSegment
$LN1@NewSegment:
; Line 419
	mov	edx, DWORD PTR _ppack$81802[ebp]
	mov	eax, DWORD PTR _tStart$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _tStart$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
; Line 420
	mov	edx, DWORD PTR _ppack$81802[ebp]
	mov	eax, DWORD PTR _tStop$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _tStop$[ebp+4]
	mov	DWORD PTR [edx+12], ecx
; Line 421
	mov	edx, DWORD PTR _ppack$81802[ebp]
	fld	QWORD PTR _dRate$[ebp]
	fstp	QWORD PTR [edx+16]
; Line 423
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$81806[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z ; COutputQueue::QueueSample
; Line 425
	mov	ecx, DWORD PTR _ppack$81802[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z ; COutputQueue::QueueSample
; Line 426
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyThread@COutputQueue@@IAEXXZ	; COutputQueue::NotifyThread
; Line 427
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81806[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
$LN2@NewSegment:
$LN7@NewSegment:
; Line 429
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@NewSegment
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN13@NewSegment:
	DD	1
	DD	$LN12@NewSegment
$LN12@NewSegment:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN10@NewSegment
$LN10@NewSegment:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewSegment@COutputQueue@@QAEX_J0N@Z$0:
	lea	ecx, DWORD PTR _lck$81806[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?NewSegment@COutputQueue@@QAEX_J0N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewSegment@COutputQueue@@QAEX_J0N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewSegment@COutputQueue@@QAEX_J0N@Z ENDP		; COutputQueue::NewSegment
PUBLIC	?EOS@COutputQueue@@QAEXXZ			; COutputQueue::EOS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EOS@COutputQueue@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EOS@COutputQueue@@QAEXXZ$0
__ehfuncinfo$?EOS@COutputQueue@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EOS@COutputQueue@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?EOS@COutputQueue@@QAEXXZ
_TEXT	SEGMENT
_hr$81819 = -32						; size = 4
_lck$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?EOS@COutputQueue@@QAEXXZ PROC				; COutputQueue::EOS, COMDAT
; _this$ = ecx
; Line 436
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EOS@COutputQueue@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 437
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 438
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	jne	SHORT $LN6@EOS
; Line 439
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN5@EOS
; Line 440
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAnyway@COutputQueue@@QAEXXZ	; COutputQueue::SendAnyway
$LN5@EOS:
; Line 442
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], 0
	jne	SHORT $LN4@EOS
; Line 443
	push	OFFSET $SG81818
	push	2
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 444
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0
; Line 445
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81819[ebp], eax
; Line 446
	cmp	DWORD PTR _hr$81819[ebp], 0
	jge	SHORT $LN4@EOS
; Line 447
	push	OFFSET $SG81822
	push	2
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
$LN4@EOS:
; Line 450
	jmp	SHORT $LN2@EOS
$LN6@EOS:
; Line 451
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	jne	SHORT $LN2@EOS
; Line 452
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], 0
; Line 453
	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z ; COutputQueue::QueueSample
; Line 454
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyThread@COutputQueue@@IAEXXZ	; COutputQueue::NotifyThread
$LN2@EOS:
; Line 457
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@EOS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@EOS:
	DD	1
	DD	$LN12@EOS
$LN12@EOS:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@EOS
$LN10@EOS:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EOS@COutputQueue@@QAEXXZ$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?EOS@COutputQueue@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EOS@COutputQueue@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EOS@COutputQueue@@QAEXXZ ENDP				; COutputQueue::EOS
PUBLIC	?Reset@CAMEvent@@QAEXXZ				; CAMEvent::Reset
PUBLIC	?BeginFlush@COutputQueue@@QAEXXZ		; COutputQueue::BeginFlush
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BeginFlush@COutputQueue@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BeginFlush@COutputQueue@@QAEXXZ$0
__ehfuncinfo$?BeginFlush@COutputQueue@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BeginFlush@COutputQueue@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?BeginFlush@COutputQueue@@QAEXXZ
_TEXT	SEGMENT
_lck$81838 = -36					; size = 4
_lck$81832 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?BeginFlush@COutputQueue@@QAEXXZ PROC			; COutputQueue::BeginFlush, COMDAT
; _this$ = ecx
; Line 463
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BeginFlush@COutputQueue@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 464
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	je	$LN5@BeginFlush
; Line 466
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$81832[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 473
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 1
; Line 477
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], 0
	jne	SHORT $LN4@BeginFlush
; Line 478
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 1
$LN4@BeginFlush:
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	je	SHORT $LN3@BeginFlush
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	test	eax, eax
	je	SHORT $LN3@BeginFlush
; Line 484
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81832[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	jmp	$LN6@BeginFlush
$LN3@BeginFlush:
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Reset@CAMEvent@@QAEXXZ			; CAMEvent::Reset
; Line 490
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyThread@COutputQueue@@IAEXXZ	; COutputQueue::NotifyThread
; Line 491
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81832[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 495
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 496
	jmp	SHORT $LN6@BeginFlush
$LN5@BeginFlush:
; Line 498
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 499
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _lck$81838[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
; Line 502
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 1
; Line 506
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN1@BeginFlush
; Line 507
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 1
$LN1@BeginFlush:
; Line 509
	lea	ecx, DWORD PTR _lck$81838[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
$LN6@BeginFlush:
; Line 511
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@BeginFlush
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@BeginFlush:
	DD	2
	DD	$LN13@BeginFlush
$LN13@BeginFlush:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@BeginFlush
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN11@BeginFlush
$LN11@BeginFlush:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN10@BeginFlush:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BeginFlush@COutputQueue@@QAEXXZ$0:
	lea	ecx, DWORD PTR _lck$81832[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?BeginFlush@COutputQueue@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BeginFlush@COutputQueue@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?BeginFlush@COutputQueue@@QAEXXZ ENDP			; COutputQueue::BeginFlush
EXTRN	__imp__ResetEvent@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reset@CAMEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@CAMEvent@@QAEXXZ PROC				; CAMEvent::Reset, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CAMEvent@@QAEXXZ ENDP				; CAMEvent::Reset
_TEXT	ENDS
PUBLIC	?Wait@CAMEvent@@QAEHK@Z				; CAMEvent::Wait
PUBLIC	?EndFlush@COutputQueue@@QAEXXZ			; COutputQueue::EndFlush
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\outputq.cpp
xdata$x	SEGMENT
__unwindtable$?EndFlush@COutputQueue@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EndFlush@COutputQueue@@QAEXXZ$0
__ehfuncinfo$?EndFlush@COutputQueue@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EndFlush@COutputQueue@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?EndFlush@COutputQueue@@QAEXXZ
_TEXT	SEGMENT
_lck$81845 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?EndFlush@COutputQueue@@QAEXXZ PROC			; COutputQueue::EndFlush, COMDAT
; _this$ = ecx
; Line 516
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EndFlush@COutputQueue@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$81845[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 519
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	jne	SHORT $LN4@EndFlush
	push	519					; 00000207H
	push	OFFSET $SG81847
	push	OFFSET $SG81848
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@EndFlush:
; Line 520
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+88]
	test	eax, eax
	je	SHORT $LN3@EndFlush
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	je	SHORT $LN3@EndFlush
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	je	SHORT $LN3@EndFlush
; Line 521
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0
; Line 522
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 0
; Line 523
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81845[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	jmp	SHORT $LN5@EndFlush
$LN3@EndFlush:
; Line 525
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81845[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 533
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	je	SHORT $LN2@EndFlush
; Line 534
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Wait@CAMEvent@@QAEHK@Z			; CAMEvent::Wait
; Line 535
	jmp	SHORT $LN1@EndFlush
$LN2@EndFlush:
; Line 536
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeSamples@COutputQueue@@IAEXXZ	; COutputQueue::FreeSamples
$LN1@EndFlush:
; Line 542
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 543
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], 1
; Line 547
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 549
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 0
$LN5@EndFlush:
; Line 550
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@EndFlush
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@EndFlush:
	DD	1
	DD	$LN10@EndFlush
$LN10@EndFlush:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@EndFlush
$LN8@EndFlush:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EndFlush@COutputQueue@@QAEXXZ$0:
	lea	ecx, DWORD PTR _lck$81845[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?EndFlush@COutputQueue@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EndFlush@COutputQueue@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EndFlush@COutputQueue@@QAEXXZ ENDP			; COutputQueue::EndFlush
EXTRN	__imp__WaitForSingleObject@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Wait@CAMEvent@@QAEHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwTimeout$ = 8						; size = 4
?Wait@CAMEvent@@QAEHK@Z PROC				; CAMEvent::Wait, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 127
	mov	esi, esp
	mov	eax, DWORD PTR _dwTimeout$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 128
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Wait@CAMEvent@@QAEHK@Z ENDP				; CAMEvent::Wait
_TEXT	ENDS
PUBLIC	?AddTail@?$CGenericList@UIMediaSample@@@@QAEPAU__POSITION@@PAUIMediaSample@@@Z ; CGenericList<IMediaSample>::AddTail
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSample$ = 8						; size = 4
?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z PROC	; COutputQueue::QueueSample, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\outputq.cpp
; Line 558
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 559
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	call	?AddTail@?$CGenericList@UIMediaSample@@@@QAEPAU__POSITION@@PAUIMediaSample@@@Z ; CGenericList<IMediaSample>::AddTail
	test	eax, eax
	jne	SHORT $LN3@QueueSampl
; Line 560
	mov	edx, DWORD PTR _pSample$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpecialSample@COutputQueue@@IAEHPAUIMediaSample@@@Z ; COutputQueue::IsSpecialSample
	test	eax, eax
	jne	SHORT $LN3@QueueSampl
; Line 561
	mov	eax, DWORD PTR _pSample$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pSample$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@QueueSampl:
; Line 564
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z ENDP	; COutputQueue::QueueSample
_TEXT	ENDS
PUBLIC	?Receive@COutputQueue@@QAEJPAUIMediaSample@@@Z	; COutputQueue::Receive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Receive@COutputQueue@@QAEJPAUIMediaSample@@@Z
_TEXT	SEGMENT
_nProcessed$ = -12					; size = 4
_this$ = -4						; size = 4
_pSample$ = 8						; size = 4
?Receive@COutputQueue@@QAEJPAUIMediaSample@@@Z PROC	; COutputQueue::Receive, COMDAT
; _this$ = ecx
; Line 576
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	lea	eax, DWORD PTR _nProcessed$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _pSample$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z ; COutputQueue::ReceiveMultiple
; Line 579
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Receive
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Receive:
	DD	1
	DD	$LN4@Receive
$LN4@Receive:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Receive
$LN3@Receive:
	DB	110					; 0000006eH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?Receive@COutputQueue@@QAEJPAUIMediaSample@@@Z ENDP	; COutputQueue::Receive
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z$0
__ehfuncinfo$?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z
_TEXT	SEGMENT
$T82487 = -80						; size = 4
$T82486 = -76						; size = 4
$T82485 = -72						; size = 4
$T82484 = -68						; size = 4
_i$81926 = -64						; size = 4
_i$81921 = -60						; size = 4
_i$81911 = -56						; size = 4
_nDone$81906 = -48					; size = 4
_iDone$81894 = -40					; size = 4
_iLost$81893 = -36					; size = 4
_i$81878 = -32						; size = 4
_lck$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ppSamples$ = 8						; size = 4
_nSamples$ = 12						; size = 4
_nSamplesProcessed$ = 16				; size = 4
?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z PROC ; COutputQueue::ReceiveMultiple, COMDAT
; _this$ = ecx
; Line 597
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 598
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 601
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	jne	$LN33@ReceiveMul
; Line 605
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	je	$LN32@ReceiveMul
; Line 611
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 0
	je	SHORT $LN31@ReceiveMul
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN31@ReceiveMul
	push	611					; 00000263H
	push	OFFSET $SG81876
	push	OFFSET $SG81877
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN31@ReceiveMul:
; Line 614
	mov	ecx, DWORD PTR _nSamplesProcessed$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 615
	mov	DWORD PTR _i$81878[ebp], 0
	jmp	SHORT $LN30@ReceiveMul
$LN29@ReceiveMul:
	mov	edx, DWORD PTR _i$81878[ebp]
	add	edx, 1
	mov	DWORD PTR _i$81878[ebp], edx
$LN30@ReceiveMul:
	mov	eax, DWORD PTR _i$81878[ebp]
	cmp	eax, DWORD PTR _nSamples$[ebp]
	jge	SHORT $LN28@ReceiveMul
; Line 617
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _nSamples$[ebp]
	push	eax
	push	OFFSET $SG81882
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 618
	mov	ecx, DWORD PTR _i$81878[ebp]
	mov	edx, DWORD PTR _ppSamples$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$81878[ebp]
	mov	edx, DWORD PTR _ppSamples$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 619
	jmp	SHORT $LN29@ReceiveMul
$LN28@ReceiveMul:
; Line 621
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR $T82484[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82484[ebp]
	jmp	$LN34@ReceiveMul
$LN32@ReceiveMul:
; Line 626
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN27@ReceiveMul
	push	626					; 00000272H
	push	OFFSET $SG81885
	push	OFFSET $SG81886
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN27@ReceiveMul:
; Line 627
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 629
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	cmp	ecx, DWORD PTR [eax+48]
	jl	SHORT $LN26@ReceiveMul
	push	629					; 00000275H
	push	OFFSET $SG81888
	push	OFFSET $SG81889
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN26@ReceiveMul:
; Line 630
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], 0
	je	SHORT $LN25@ReceiveMul
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN25@ReceiveMul
	push	630					; 00000276H
	push	OFFSET $SG81891
	push	OFFSET $SG81892
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN25@ReceiveMul:
; Line 634
	mov	DWORD PTR _iLost$81893[ebp], 0
; Line 635
	mov	DWORD PTR _iDone$81894[ebp], 0
; Line 636
	mov	DWORD PTR _iDone$81894[ebp], 0
$LN24@ReceiveMul:
; Line 638
	mov	ecx, DWORD PTR _iDone$81894[ebp]
	cmp	ecx, DWORD PTR _nSamples$[ebp]
	jl	SHORT $LN22@ReceiveMul
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], 0
	je	$LN23@ReceiveMul
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	$LN23@ReceiveMul
$LN22@ReceiveMul:
; Line 641
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	cmp	eax, DWORD PTR [edx+48]
	jl	SHORT $LN21@ReceiveMul
	push	641					; 00000281H
	push	OFFSET $SG81900
	push	OFFSET $SG81901
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN21@ReceiveMul:
; Line 642
	mov	ecx, DWORD PTR _iDone$81894[ebp]
	cmp	ecx, DWORD PTR _nSamples$[ebp]
	jge	SHORT $LN20@ReceiveMul
; Line 643
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	ecx, DWORD PTR _iDone$81894[ebp]
	mov	esi, DWORD PTR _ppSamples$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax
	mov	edx, DWORD PTR _iDone$81894[ebp]
	add	edx, 1
	mov	DWORD PTR _iDone$81894[ebp], edx
$LN20@ReceiveMul:
; Line 646
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+48]
	je	SHORT $LN18@ReceiveMul
	cmp	DWORD PTR _nSamples$[ebp], 0
	jne	$LN19@ReceiveMul
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN18@ReceiveMul
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	$LN19@ReceiveMul
$LN18@ReceiveMul:
; Line 649
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	push	OFFSET $SG81907
	push	4
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 651
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	jne	SHORT $LN16@ReceiveMul
; Line 654
	mov	esi, esp
	lea	edx, DWORD PTR _nDone$81906[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], eax
; Line 655
	jmp	SHORT $LN15@ReceiveMul
$LN16@ReceiveMul:
; Line 656
	mov	DWORD PTR _nDone$81906[ebp], 0
$LN15@ReceiveMul:
; Line 658
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	sub	eax, DWORD PTR _nDone$81906[ebp]
	add	eax, DWORD PTR _iLost$81893[ebp]
	mov	DWORD PTR _iLost$81893[ebp], eax
; Line 659
	mov	DWORD PTR _i$81911[ebp], 0
	jmp	SHORT $LN14@ReceiveMul
$LN13@ReceiveMul:
	mov	ecx, DWORD PTR _i$81911[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$81911[ebp], ecx
$LN14@ReceiveMul:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$81911[ebp]
	cmp	eax, DWORD PTR [edx+72]
	jge	SHORT $LN12@ReceiveMul
; Line 660
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _i$81911[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _i$81911[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 661
	jmp	SHORT $LN13@ReceiveMul
$LN12@ReceiveMul:
; Line 662
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
$LN19@ReceiveMul:
; Line 664
	jmp	$LN24@ReceiveMul
$LN23@ReceiveMul:
; Line 665
	mov	ecx, DWORD PTR _iDone$81894[ebp]
	sub	ecx, DWORD PTR _iLost$81893[ebp]
	mov	edx, DWORD PTR _nSamplesProcessed$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 666
	mov	eax, DWORD PTR _nSamplesProcessed$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN11@ReceiveMul
; Line 667
	mov	ecx, DWORD PTR _nSamplesProcessed$[ebp]
	mov	DWORD PTR [ecx], 0
$LN11@ReceiveMul:
; Line 669
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR $T82485[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82485[ebp]
	jmp	$LN34@ReceiveMul
	jmp	$LN10@ReceiveMul
$LN33@ReceiveMul:
; Line 673
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	je	$LN9@ReceiveMul
; Line 674
	mov	edx, DWORD PTR _nSamplesProcessed$[ebp]
	mov	DWORD PTR [edx], 0
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _nSamples$[ebp]
	push	edx
	push	OFFSET $SG81920
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 677
	mov	DWORD PTR _i$81921[ebp], 0
	jmp	SHORT $LN8@ReceiveMul
$LN7@ReceiveMul:
	mov	eax, DWORD PTR _i$81921[ebp]
	add	eax, 1
	mov	DWORD PTR _i$81921[ebp], eax
$LN8@ReceiveMul:
	mov	ecx, DWORD PTR _i$81921[ebp]
	cmp	ecx, DWORD PTR _nSamples$[ebp]
	jge	SHORT $LN6@ReceiveMul
; Line 678
	mov	edx, DWORD PTR _i$81921[ebp]
	mov	eax, DWORD PTR _ppSamples$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$81921[ebp]
	mov	eax, DWORD PTR _ppSamples$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 679
	jmp	SHORT $LN7@ReceiveMul
$LN6@ReceiveMul:
; Line 680
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR $T82486[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82486[ebp]
	jmp	$LN34@ReceiveMul
$LN9@ReceiveMul:
; Line 682
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 683
	mov	DWORD PTR _i$81926[ebp], 0
	jmp	SHORT $LN5@ReceiveMul
$LN4@ReceiveMul:
	mov	edx, DWORD PTR _i$81926[ebp]
	add	edx, 1
	mov	DWORD PTR _i$81926[ebp], edx
$LN5@ReceiveMul:
	mov	eax, DWORD PTR _i$81926[ebp]
	cmp	eax, DWORD PTR _nSamples$[ebp]
	jge	SHORT $LN3@ReceiveMul
; Line 684
	mov	ecx, DWORD PTR _i$81926[ebp]
	mov	edx, DWORD PTR _ppSamples$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z ; COutputQueue::QueueSample
; Line 685
	jmp	SHORT $LN4@ReceiveMul
$LN3@ReceiveMul:
; Line 686
	mov	ecx, DWORD PTR _nSamplesProcessed$[ebp]
	mov	edx, DWORD PTR _nSamples$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 688
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN1@ReceiveMul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	call	?GetCount@?$CGenericList@UIMediaSample@@@@QBEHXZ ; CGenericList<IMediaSample>::GetCount
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+48]
	jl	SHORT $LN2@ReceiveMul
$LN1@ReceiveMul:
; Line 689
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyThread@COutputQueue@@IAEXXZ	; COutputQueue::NotifyThread
$LN2@ReceiveMul:
; Line 691
	mov	DWORD PTR $T82487[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82487[ebp]
	jmp	SHORT $LN34@ReceiveMul
$LN10@ReceiveMul:
; Line 693
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
$LN34@ReceiveMul:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@ReceiveMul
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN41@ReceiveMul:
	DD	2
	DD	$LN40@ReceiveMul
$LN40@ReceiveMul:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN37@ReceiveMul
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN38@ReceiveMul
$LN38@ReceiveMul:
	DB	110					; 0000006eH
	DB	68					; 00000044H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN37@ReceiveMul:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReceiveMultiple@COutputQueue@@QAEJPAPAUIMediaSample@@JPAJ@Z ENDP ; COutputQueue::ReceiveMultiple
PUBLIC	?Reset@COutputQueue@@QAEXXZ			; COutputQueue::Reset
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Reset@COutputQueue@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Reset@COutputQueue@@QAEXXZ$0
__ehfuncinfo$?Reset@COutputQueue@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Reset@COutputQueue@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Reset@COutputQueue@@QAEXXZ
_TEXT	SEGMENT
_lck$81940 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Reset@COutputQueue@@QAEXXZ PROC			; COutputQueue::Reset, COMDAT
; _this$ = ecx
; Line 697
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Reset@COutputQueue@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 698
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	jne	SHORT $LN2@Reset
; Line 699
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 0
; Line 700
	jmp	SHORT $LN3@Reset
$LN2@Reset:
; Line 701
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _lck$81940[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 702
	push	-4					; fffffffcH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?QueueSample@COutputQueue@@IAEXPAUIMediaSample@@@Z ; COutputQueue::QueueSample
; Line 703
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyThread@COutputQueue@@IAEXXZ	; COutputQueue::NotifyThread
; Line 704
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Wait@CAMEvent@@QAEHK@Z			; CAMEvent::Wait
; Line 705
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81940[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
$LN3@Reset:
; Line 706
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Reset
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Reset:
	DD	1
	DD	$LN8@Reset
$LN8@Reset:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Reset
$LN6@Reset:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Reset@COutputQueue@@QAEXXZ$0:
	lea	ecx, DWORD PTR _lck$81940[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Reset@COutputQueue@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Reset@COutputQueue@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Reset@COutputQueue@@QAEXXZ ENDP			; COutputQueue::Reset
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FreeSamples@COutputQueue@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FreeSamples@COutputQueue@@IAEXXZ$0
__ehfuncinfo$?FreeSamples@COutputQueue@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FreeSamples@COutputQueue@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?FreeSamples@COutputQueue@@IAEXXZ
_TEXT	SEGMENT
$T82513 = -44						; size = 4
_i$81966 = -40						; size = 4
_ppacket$81959 = -36					; size = 4
_pSample$81951 = -32					; size = 4
_lck$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?FreeSamples@COutputQueue@@IAEXXZ PROC			; COutputQueue::FreeSamples, COMDAT
; _this$ = ecx
; Line 710
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FreeSamples@COutputQueue@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 711
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 712
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	je	$LN13@FreeSample
$LN12@FreeSample:
; Line 713
	mov	ecx, 1
	test	ecx, ecx
	je	$LN13@FreeSample
; Line 714
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	call	?RemoveHead@?$CGenericList@UIMediaSample@@@@QAEPAUIMediaSample@@XZ ; CGenericList<IMediaSample>::RemoveHead
	mov	DWORD PTR _pSample$81951[ebp], eax
; Line 716
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN10@FreeSample
; Line 718
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@FreeSample:
; Line 721
	cmp	DWORD PTR _pSample$81951[ebp], 0
	jne	SHORT $LN9@FreeSample
; Line 722
	jmp	$LN13@FreeSample
$LN9@FreeSample:
; Line 724
	mov	eax, DWORD PTR _pSample$81951[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpecialSample@COutputQueue@@IAEHPAUIMediaSample@@@Z ; COutputQueue::IsSpecialSample
	test	eax, eax
	jne	SHORT $LN8@FreeSample
; Line 725
	mov	ecx, DWORD PTR _pSample$81951[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pSample$81951[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 726
	jmp	SHORT $LN7@FreeSample
$LN8@FreeSample:
; Line 727
	cmp	DWORD PTR _pSample$81951[ebp], -5	; fffffffbH
	jne	SHORT $LN7@FreeSample
; Line 730
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	call	?RemoveHead@?$CGenericList@UIMediaSample@@@@QAEPAUIMediaSample@@XZ ; CGenericList<IMediaSample>::RemoveHead
	mov	DWORD PTR _ppacket$81959[ebp], eax
; Line 732
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN5@FreeSample
; Line 734
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@FreeSample:
; Line 737
	cmp	DWORD PTR _ppacket$81959[ebp], 0
	jne	SHORT $LN4@FreeSample
	push	737					; 000002e1H
	push	OFFSET $SG81963
	push	OFFSET $SG81964
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@FreeSample:
; Line 738
	mov	eax, DWORD PTR _ppacket$81959[ebp]
	mov	DWORD PTR $T82513[ebp], eax
	mov	ecx, DWORD PTR $T82513[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@FreeSample:
; Line 741
	jmp	$LN12@FreeSample
$LN13@FreeSample:
; Line 743
	mov	DWORD PTR _i$81966[ebp], 0
	jmp	SHORT $LN3@FreeSample
$LN2@FreeSample:
	mov	edx, DWORD PTR _i$81966[ebp]
	add	edx, 1
	mov	DWORD PTR _i$81966[ebp], edx
$LN3@FreeSample:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$81966[ebp]
	cmp	ecx, DWORD PTR [eax+72]
	jge	SHORT $LN1@FreeSample
; Line 744
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _i$81966[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _i$81966[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 745
	jmp	SHORT $LN2@FreeSample
$LN1@FreeSample:
; Line 746
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 0
; Line 747
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@FreeSample
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@FreeSample:
	DD	1
	DD	$LN19@FreeSample
$LN19@FreeSample:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@FreeSample
$LN17@FreeSample:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FreeSamples@COutputQueue@@IAEXXZ$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?FreeSamples@COutputQueue@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FreeSamples@COutputQueue@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?FreeSamples@COutputQueue@@IAEXXZ ENDP			; COutputQueue::FreeSamples
EXTRN	__imp__ReleaseSemaphore@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NotifyThread@COutputQueue@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NotifyThread@COutputQueue@@IAEXXZ PROC			; COutputQueue::NotifyThread, COMDAT
; _this$ = ecx
; Line 753
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 755
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	jne	SHORT $LN2@NotifyThre
	push	755					; 000002f3H
	push	OFFSET $SG81974
	push	OFFSET $SG81975
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@NotifyThre:
; Line 756
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN3@NotifyThre
; Line 757
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	DWORD PTR __imp__ReleaseSemaphore@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 758
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], 0
$LN3@NotifyThre:
; Line 760
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?NotifyThread@COutputQueue@@IAEXXZ ENDP			; COutputQueue::NotifyThread
_TEXT	ENDS
PUBLIC	?IsIdle@COutputQueue@@QAEHXZ			; COutputQueue::IsIdle
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IsIdle@COutputQueue@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsIdle@COutputQueue@@QAEHXZ$0
__ehfuncinfo$?IsIdle@COutputQueue@@QAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsIdle@COutputQueue@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?IsIdle@COutputQueue@@QAEHXZ
_TEXT	SEGMENT
$T82529 = -36						; size = 4
$T82528 = -32						; size = 4
_lck$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?IsIdle@COutputQueue@@QAEHXZ PROC			; COutputQueue::IsIdle, COMDAT
; _this$ = ecx
; Line 769
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IsIdle@COutputQueue@@QAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 770
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 778
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	je	SHORT $LN3@IsIdle
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	SHORT $LN4@IsIdle
$LN3@IsIdle:
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], 0
	je	SHORT $LN5@IsIdle
$LN4@IsIdle:
; Line 779
	mov	DWORD PTR $T82528[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82528[ebp]
	jmp	SHORT $LN6@IsIdle
; Line 780
	jmp	SHORT $LN2@IsIdle
$LN5@IsIdle:
; Line 785
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsQueued@COutputQueue@@IAEHXZ		; COutputQueue::IsQueued
	test	eax, eax
	je	SHORT $LN1@IsIdle
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	?GetCount@?$CGenericList@UIMediaSample@@@@QBEHXZ ; CGenericList<IMediaSample>::GetCount
	test	eax, eax
	je	SHORT $LN1@IsIdle
	push	785					; 00000311H
	push	OFFSET $SG81987
	push	OFFSET $SG81988
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@IsIdle:
; Line 786
	mov	DWORD PTR $T82529[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82529[ebp]
	jmp	SHORT $LN6@IsIdle
$LN2@IsIdle:
; Line 788
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
$LN6@IsIdle:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@IsIdle
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@IsIdle:
	DD	1
	DD	$LN11@IsIdle
$LN11@IsIdle:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@IsIdle
$LN9@IsIdle:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsIdle@COutputQueue@@QAEHXZ$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?IsIdle@COutputQueue@@QAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IsIdle@COutputQueue@@QAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?IsIdle@COutputQueue@@QAEHXZ ENDP			; COutputQueue::IsIdle
PUBLIC	?SetPopEvent@COutputQueue@@QAEXPAX@Z		; COutputQueue::SetPopEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetPopEvent@COutputQueue@@QAEXPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hEvent$ = 8						; size = 4
?SetPopEvent@COutputQueue@@QAEXPAX@Z PROC		; COutputQueue::SetPopEvent, COMDAT
; _this$ = ecx
; Line 792
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 793
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hEvent$[ebp]
	mov	DWORD PTR [eax+104], ecx
; Line 794
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPopEvent@COutputQueue@@QAEXPAX@Z ENDP		; COutputQueue::SetPopEvent
_TEXT	ENDS
EXTRN	??0CBaseList@@QAE@PA_WH@Z:PROC			; CBaseList::CBaseList
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CGenericList@UIMediaSample@@@@QAE@PA_WHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pName$ = 8						; size = 4
_iItems$ = 12						; size = 4
_bLock$ = 16						; size = 4
_bAlert$ = 20						; size = 4
??0?$CGenericList@UIMediaSample@@@@QAE@PA_WHHH@Z PROC	; CGenericList<IMediaSample>::CGenericList<IMediaSample>, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxlist.h
; Line 500
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _iItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseList@@QAE@PA_WH@Z		; CBaseList::CBaseList
; Line 503
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0?$CGenericList@UIMediaSample@@@@QAE@PA_WHHH@Z ENDP	; CGenericList<IMediaSample>::CGenericList<IMediaSample>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetCount@?$CGenericList@UIMediaSample@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CGenericList@UIMediaSample@@@@QBEHXZ PROC	; CGenericList<IMediaSample>::GetCount, COMDAT
; _this$ = ecx
; Line 510
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCount@?$CGenericList@UIMediaSample@@@@QBEHXZ ENDP	; CGenericList<IMediaSample>::GetCount
_TEXT	ENDS
EXTRN	?RemoveHeadI@CBaseList@@IAEPAXXZ:PROC		; CBaseList::RemoveHeadI
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?RemoveHead@?$CGenericList@UIMediaSample@@@@QAEPAUIMediaSample@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveHead@?$CGenericList@UIMediaSample@@@@QAEPAUIMediaSample@@XZ PROC ; CGenericList<IMediaSample>::RemoveHead, COMDAT
; _this$ = ecx
; Line 517
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveHeadI@CBaseList@@IAEPAXXZ	; CBaseList::RemoveHeadI
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveHead@?$CGenericList@UIMediaSample@@@@QAEPAUIMediaSample@@XZ ENDP ; CGenericList<IMediaSample>::RemoveHead
_TEXT	ENDS
EXTRN	?AddTailI@CBaseList@@IAEPAU__POSITION@@PAX@Z:PROC ; CBaseList::AddTailI
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddTail@?$CGenericList@UIMediaSample@@@@QAEPAU__POSITION@@PAUIMediaSample@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?AddTail@?$CGenericList@UIMediaSample@@@@QAEPAU__POSITION@@PAUIMediaSample@@@Z PROC ; CGenericList<IMediaSample>::AddTail, COMDAT
; _this$ = ecx
; Line 525
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddTailI@CBaseList@@IAEPAU__POSITION@@PAX@Z ; CBaseList::AddTailI
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddTail@?$CGenericList@UIMediaSample@@@@QAEPAU__POSITION@@PAUIMediaSample@@@Z ENDP ; CGenericList<IMediaSample>::AddTail
_TEXT	ENDS
END
