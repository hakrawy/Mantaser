; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Downloads\MediaPoint\src\filters\BaseClasses\amvideo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
PUBLIC	?bits555@@3QBKB					; bits555
PUBLIC	?bits565@@3QBKB					; bits565
PUBLIC	?bits888@@3QBKB					; bits888
EXTRN	_GUID_NULL:BYTE
EXTRN	_MEDIASUBTYPE_Overlay:BYTE
EXTRN	_MEDIASUBTYPE_ARGB32:BYTE
EXTRN	_MEDIASUBTYPE_RGB32:BYTE
EXTRN	_MEDIASUBTYPE_RGB24:BYTE
EXTRN	_MEDIASUBTYPE_RGB555:BYTE
EXTRN	_MEDIASUBTYPE_RGB565:BYTE
EXTRN	_MEDIASUBTYPE_RGB8:BYTE
EXTRN	_MEDIASUBTYPE_RGB4:BYTE
EXTRN	_MEDIASUBTYPE_RGB1:BYTE
CONST	SEGMENT
?bits555@@3QBKB DD 07c00H				; bits555
	DD	03e0H
	DD	01fH
?bits565@@3QBKB DD 0f800H				; bits565
	DD	07e0H
	DD	01fH
?bits888@@3QBKB DD 0ff0000H				; bits888
	DD	0ff00H
	DD	0ffH
$SG81567 DB	'RGB Monochrome', 00H
	ORG $+1
$SG81568 DB	'R', 00H, 'G', 00H, 'B', 00H, ' ', 00H, 'M', 00H, 'o', 00H
	DB	'n', 00H, 'o', 00H, 'c', 00H, 'h', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG81569 DB	'RGB VGA', 00H
$SG81570 DB	'R', 00H, 'G', 00H, 'B', 00H, ' ', 00H, 'V', 00H, 'G', 00H
	DB	'A', 00H, 00H, 00H
$SG81571 DB	'RGB 8', 00H
	ORG $+2
$SG81572 DB	'R', 00H, 'G', 00H, 'B', 00H, ' ', 00H, '8', 00H, 00H, 00H
$SG81573 DB	'RGB 565 (16 bit)', 00H
	ORG $+3
$SG81574 DB	'R', 00H, 'G', 00H, 'B', 00H, ' ', 00H, '5', 00H, '6', 00H
	DB	'5', 00H, ' ', 00H, '(', 00H, '1', 00H, '6', 00H, ' ', 00H, 'b'
	DB	00H, 'i', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81575 DB	'RGB 555 (16 bit)', 00H
	ORG $+3
$SG81576 DB	'R', 00H, 'G', 00H, 'B', 00H, ' ', 00H, '5', 00H, '5', 00H
	DB	'5', 00H, ' ', 00H, '(', 00H, '1', 00H, '6', 00H, ' ', 00H, 'b'
	DB	00H, 'i', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81577 DB	'RGB 24', 00H
	ORG $+1
$SG81578 DB	'R', 00H, 'G', 00H, 'B', 00H, ' ', 00H, '2', 00H, '4', 00H
	DB	00H, 00H
	ORG $+2
$SG81579 DB	'RGB 32', 00H
	ORG $+1
$SG81580 DB	'R', 00H, 'G', 00H, 'B', 00H, ' ', 00H, '3', 00H, '2', 00H
	DB	00H, 00H
	ORG $+2
$SG81581 DB	'ARGB 32', 00H
$SG81582 DB	'A', 00H, 'R', 00H, 'G', 00H, 'B', 00H, ' ', 00H, '3', 00H
	DB	'2', 00H, 00H, 00H
$SG81583 DB	'Overlay', 00H
$SG81584 DB	'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, 00H, 00H
$SG81585 DB	'UNKNOWN', 00H
$SG81586 DB	'U', 00H, 'N', 00H, 'K', 00H, 'N', 00H, 'O', 00H, 'W', 00H
	DB	'N', 00H, 00H, 00H
_BitCountMap DD	FLAT:_MEDIASUBTYPE_RGB1
	DW	01H
	ORG $+2
	DD	FLAT:$SG81567
	DD	FLAT:$SG81568
	DD	FLAT:_MEDIASUBTYPE_RGB4
	DW	04H
	ORG $+2
	DD	FLAT:$SG81569
	DD	FLAT:$SG81570
	DD	FLAT:_MEDIASUBTYPE_RGB8
	DW	08H
	ORG $+2
	DD	FLAT:$SG81571
	DD	FLAT:$SG81572
	DD	FLAT:_MEDIASUBTYPE_RGB565
	DW	010H
	ORG $+2
	DD	FLAT:$SG81573
	DD	FLAT:$SG81574
	DD	FLAT:_MEDIASUBTYPE_RGB555
	DW	010H
	ORG $+2
	DD	FLAT:$SG81575
	DD	FLAT:$SG81576
	DD	FLAT:_MEDIASUBTYPE_RGB24
	DW	018H
	ORG $+2
	DD	FLAT:$SG81577
	DD	FLAT:$SG81578
	DD	FLAT:_MEDIASUBTYPE_RGB32
	DW	020H
	ORG $+2
	DD	FLAT:$SG81579
	DD	FLAT:$SG81580
	DD	FLAT:_MEDIASUBTYPE_ARGB32
	DW	020H
	ORG $+2
	DD	FLAT:$SG81581
	DD	FLAT:$SG81582
	DD	FLAT:_MEDIASUBTYPE_Overlay
	DW	00H
	ORG $+2
	DD	FLAT:$SG81583
	DD	FLAT:$SG81584
	DD	FLAT:_GUID_NULL
	DW	00H
	ORG $+2
	DD	FLAT:$SG81585
	DD	FLAT:$SG81586
$SG81606 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'v', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81607 DB	'p', 00H, 'b', 00H, 'm', 00H, 'i', 00H, 'H', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'b'
	DB	00H, 'i', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '1', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG81622 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'v', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81623 DB	'p', 00H, 'b', 00H, 'm', 00H, 'i', 00H, 'H', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG81644 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'v', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81645 DB	'p', 00H, 'S', 00H, 'u', 00H, 'b', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG81657 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'v', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81658 DB	'p', 00H, 'S', 00H, 'u', 00H, 'b', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG81684 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'v', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG81685 DB	'p', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, '-', 00H, '>', 00H, 'b', 00H, 'i', 00H, 'S', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '('
	DB	00H, 'B', 00H, 'I', 00H, 'T', 00H, 'M', 00H, 'A', 00H, 'P', 00H
	DB	'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'H', 00H, 'E', 00H, 'A'
	DB	00H, 'D', 00H, 'E', 00H, 'R', 00H, ')', 00H, 00H, 00H
$SG81687 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'v', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81688 DB	'p', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, '-', 00H, '>', 00H, 'b', 00H, 'i', 00H, 'B', 00H, 'i'
	DB	00H, 't', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'i', 00H, 'P', 00H, 'A'
	DB	00H, 'L', 00H, 'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, 'p', 00H, 'H', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'b', 00H
	DB	'i', 00H, 'C', 00H, 'l', 00H, 'r', 00H, 'U', 00H, 's', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	_GetBitmapSize@4
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\downloads\mediapoint\src\filters\baseclasses\amvideo.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT _GetBitmapSize@4
_TEXT	SEGMENT
tv85 = -4						; size = 4
_pHeader$ = 8						; size = 4
_GetBitmapSize@4 PROC					; COMDAT
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 44
	mov	eax, DWORD PTR _pHeader$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jge	SHORT $LN3@GetBitmapS
	mov	ecx, DWORD PTR _pHeader$[ebp]
	movzx	edx, WORD PTR [ecx+14]
	mov	eax, DWORD PTR _pHeader$[ebp]
	imul	edx, DWORD PTR [eax+4]
	add	edx, 31					; 0000001fH
	and	edx, -32				; ffffffe0H
	shr	edx, 3
	mov	ecx, DWORD PTR _pHeader$[ebp]
	imul	edx, DWORD PTR [ecx+8]
	imul	edx, -1
	mov	DWORD PTR tv85[ebp], edx
	jmp	SHORT $LN4@GetBitmapS
$LN3@GetBitmapS:
	mov	edx, DWORD PTR _pHeader$[ebp]
	movzx	eax, WORD PTR [edx+14]
	mov	ecx, DWORD PTR _pHeader$[ebp]
	imul	eax, DWORD PTR [ecx+4]
	add	eax, 31					; 0000001fH
	and	eax, -32				; ffffffe0H
	shr	eax, 3
	mov	edx, DWORD PTR _pHeader$[ebp]
	imul	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv85[ebp], eax
$LN4@GetBitmapS:
	mov	eax, DWORD PTR tv85[ebp]
; Line 45
	mov	esp, ebp
	pop	ebp
	ret	4
_GetBitmapSize@4 ENDP
_TEXT	ENDS
PUBLIC	_GetTrueColorType@4
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetTrueColorType@4
_TEXT	SEGMENT
_pMask$ = -8						; size = 4
_pbmInfo$ = -4						; size = 4
$T82003 = 8						; size = 4
_pbmiHeader$ = 12					; size = 4
_GetTrueColorType@4 PROC				; COMDAT
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 53
	mov	eax, DWORD PTR _pbmiHeader$[ebp]
	mov	DWORD PTR _pbmInfo$[ebp], eax
; Line 54
	mov	ecx, DWORD PTR _pbmiHeader$[ebp]
	movzx	edx, WORD PTR [ecx+14]
	cmp	edx, 16					; 00000010H
	je	SHORT $LN8@GetTrueCol
	push	54					; 00000036H
	push	OFFSET $SG81606
	push	OFFSET $SG81607
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@GetTrueCol:
; Line 58
	mov	eax, DWORD PTR _pbmiHeader$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN7@GetTrueCol
; Line 59
	mov	ecx, DWORD PTR $T82003[ebp]
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB555
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB555+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB555+8
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB555+12
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T82003[ebp]
	jmp	$LN9@GetTrueCol
$LN7@GetTrueCol:
; Line 64
	mov	ecx, DWORD PTR _pbmInfo$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _pMask$[ebp], ecx
; Line 65
	mov	edx, DWORD PTR _pMask$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR ?bits555@@3QBKB
	jne	SHORT $LN6@GetTrueCol
; Line 66
	mov	ecx, DWORD PTR _pMask$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR ?bits555@@3QBKB+4
	jne	SHORT $LN6@GetTrueCol
; Line 67
	mov	eax, DWORD PTR _pMask$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR ?bits555@@3QBKB+8
	jne	SHORT $LN6@GetTrueCol
; Line 68
	mov	edx, DWORD PTR $T82003[ebp]
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB555
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _MEDIASUBTYPE_RGB555+4
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB555+8
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _MEDIASUBTYPE_RGB555+12
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR $T82003[ebp]
	jmp	$LN9@GetTrueCol
$LN6@GetTrueCol:
; Line 75
	mov	edx, DWORD PTR _pbmInfo$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _pMask$[ebp], edx
; Line 76
	mov	eax, DWORD PTR _pMask$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR ?bits565@@3QBKB
	jne	SHORT $LN3@GetTrueCol
; Line 77
	mov	edx, DWORD PTR _pMask$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR ?bits565@@3QBKB+4
	jne	SHORT $LN3@GetTrueCol
; Line 78
	mov	ecx, DWORD PTR _pMask$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR ?bits565@@3QBKB+8
	jne	SHORT $LN3@GetTrueCol
; Line 79
	mov	eax, DWORD PTR $T82003[ebp]
	mov	ecx, DWORD PTR _MEDIASUBTYPE_RGB565
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB565+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _MEDIASUBTYPE_RGB565+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB565+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T82003[ebp]
	jmp	SHORT $LN9@GetTrueCol
$LN3@GetTrueCol:
; Line 83
	mov	eax, DWORD PTR $T82003[ebp]
	mov	ecx, DWORD PTR _GUID_NULL
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _GUID_NULL+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _GUID_NULL+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _GUID_NULL+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T82003[ebp]
$LN9@GetTrueCol:
; Line 84
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_GetTrueColorType@4 ENDP
_TEXT	ENDS
PUBLIC	??0FOURCCMap@@QAE@K@Z				; FOURCCMap::FOURCCMap
PUBLIC	__$ArrayPad$
PUBLIC	_GetBitmapSubtype@4
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetBitmapSubtype@4
_TEXT	SEGMENT
tv81 = -80						; size = 4
$T82009 = -76						; size = 16
$T81637 = -60						; size = 16
$T81628 = -44						; size = 16
_FourCCMap$81626 = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
$T82008 = 8						; size = 4
_pbmiHeader$ = 12					; size = 4
_GetBitmapSubtype@4 PROC				; COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 95
	cmp	DWORD PTR _pbmiHeader$[ebp], 0
	jne	SHORT $LN11@GetBitmapS@2
	push	95					; 0000005fH
	push	OFFSET $SG81622
	push	OFFSET $SG81623
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN11@GetBitmapS@2:
; Line 99
	mov	eax, DWORD PTR _pbmiHeader$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN10@GetBitmapS@2
; Line 100
	mov	ecx, DWORD PTR _pbmiHeader$[ebp]
	cmp	DWORD PTR [ecx+16], 3
	je	SHORT $LN10@GetBitmapS@2
; Line 101
	mov	edx, DWORD PTR _pbmiHeader$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _FourCCMap$81626[ebp]
	call	??0FOURCCMap@@QAE@K@Z			; FOURCCMap::FOURCCMap
; Line 102
	mov	ecx, DWORD PTR _FourCCMap$81626[ebp]
	mov	DWORD PTR $T81628[ebp], ecx
	mov	edx, DWORD PTR _FourCCMap$81626[ebp+4]
	mov	DWORD PTR $T81628[ebp+4], edx
	mov	eax, DWORD PTR _FourCCMap$81626[ebp+8]
	mov	DWORD PTR $T81628[ebp+8], eax
	mov	ecx, DWORD PTR _FourCCMap$81626[ebp+12]
	mov	DWORD PTR $T81628[ebp+12], ecx
	mov	edx, DWORD PTR $T82008[ebp]
	mov	eax, DWORD PTR $T81628[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T81628[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T81628[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T81628[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR $T82008[ebp]
	jmp	$LN12@GetBitmapS@2
$LN10@GetBitmapS@2:
; Line 108
	mov	edx, DWORD PTR _pbmiHeader$[ebp]
	movzx	eax, WORD PTR [edx+14]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR tv81[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 31			; 0000001fH
	ja	$LN7@GetBitmapS@2
	mov	edx, DWORD PTR tv81[ebp]
	movzx	eax, BYTE PTR $LN14@GetBitmapS@2[edx]
	jmp	DWORD PTR $LN18@GetBitmapS@2[eax*4]
$LN6@GetBitmapS@2:
; Line 109
	mov	ecx, DWORD PTR $T82008[ebp]
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB1
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB1+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB1+8
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB1+12
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T82008[ebp]
	jmp	$LN12@GetBitmapS@2
$LN5@GetBitmapS@2:
; Line 110
	mov	ecx, DWORD PTR $T82008[ebp]
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB4
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB4+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB4+8
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB4+12
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T82008[ebp]
	jmp	$LN12@GetBitmapS@2
$LN4@GetBitmapS@2:
; Line 111
	mov	ecx, DWORD PTR $T82008[ebp]
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB8
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB8+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB8+8
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _MEDIASUBTYPE_RGB8+12
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR $T82008[ebp]
	jmp	$LN12@GetBitmapS@2
$LN3@GetBitmapS@2:
; Line 112
	mov	ecx, DWORD PTR _pbmiHeader$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82009[ebp]
	push	edx
	call	_GetTrueColorType@4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T81637[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T81637[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T81637[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T81637[ebp+12], edx
	mov	eax, DWORD PTR $T82008[ebp]
	mov	ecx, DWORD PTR $T81637[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T81637[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T81637[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T81637[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T82008[ebp]
	jmp	SHORT $LN12@GetBitmapS@2
$LN2@GetBitmapS@2:
; Line 113
	mov	eax, DWORD PTR $T82008[ebp]
	mov	ecx, DWORD PTR _MEDIASUBTYPE_RGB24
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB24+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _MEDIASUBTYPE_RGB24+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB24+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T82008[ebp]
	jmp	SHORT $LN12@GetBitmapS@2
$LN1@GetBitmapS@2:
; Line 114
	mov	eax, DWORD PTR $T82008[ebp]
	mov	ecx, DWORD PTR _MEDIASUBTYPE_RGB32
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB32+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _MEDIASUBTYPE_RGB32+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _MEDIASUBTYPE_RGB32+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T82008[ebp]
	jmp	SHORT $LN12@GetBitmapS@2
$LN7@GetBitmapS@2:
; Line 116
	mov	eax, DWORD PTR $T82008[ebp]
	mov	ecx, DWORD PTR _GUID_NULL
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _GUID_NULL+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _GUID_NULL+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _GUID_NULL+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T82008[ebp]
$LN12@GetBitmapS@2:
; Line 117
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@GetBitmapS@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN17@GetBitmapS@2:
	DD	1
	DD	$LN16@GetBitmapS@2
$LN16@GetBitmapS@2:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN15@GetBitmapS@2
$LN15@GetBitmapS@2:
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	67					; 00000043H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
	npad	2
$LN18@GetBitmapS@2:
	DD	$LN6@GetBitmapS@2
	DD	$LN5@GetBitmapS@2
	DD	$LN4@GetBitmapS@2
	DD	$LN3@GetBitmapS@2
	DD	$LN2@GetBitmapS@2
	DD	$LN1@GetBitmapS@2
	DD	$LN7@GetBitmapS@2
$LN14@GetBitmapS@2:
	DB	0
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
_GetBitmapSubtype@4 ENDP
_TEXT	ENDS
PUBLIC	?SetFOURCC@FOURCCMap@@QAEXK@Z			; FOURCCMap::SetFOURCC
PUBLIC	?InitGUID@FOURCCMap@@AAEXXZ			; FOURCCMap::InitGUID
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0FOURCCMap@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fourcc$ = 8						; size = 4
??0FOURCCMap@@QAE@K@Z PROC				; FOURCCMap::FOURCCMap, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\fourcc.h
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitGUID@FOURCCMap@@AAEXXZ		; FOURCCMap::InitGUID
; Line 71
	mov	eax, DWORD PTR _fourcc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFOURCC@FOURCCMap@@QAEXK@Z		; FOURCCMap::SetFOURCC
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0FOURCCMap@@QAE@K@Z ENDP				; FOURCCMap::FOURCCMap
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?InitGUID@FOURCCMap@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitGUID@FOURCCMap@@AAEXXZ PROC			; FOURCCMap::InitGUID, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 55
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 56
	mov	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+6], dx
; Line 57
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], -1442840448		; aa000080H
; Line 58
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 1905997824		; 719b3800H
; Line 59
	mov	esp, ebp
	pop	ebp
	ret	0
?InitGUID@FOURCCMap@@AAEXXZ ENDP			; FOURCCMap::InitGUID
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetFOURCC@FOURCCMap@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fourcc$ = 8						; size = 4
?SetFOURCC@FOURCCMap@@QAEXK@Z PROC			; FOURCCMap::SetFOURCC, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fourcc$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFOURCC@FOURCCMap@@QAEXK@Z ENDP			; FOURCCMap::SetFOURCC
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
PUBLIC	_GetBitCount@4
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetBitCount@4
_TEXT	SEGMENT
_iPosition$ = -8					; size = 4
_pMediaSubtype$ = -4					; size = 4
_pSubtype$ = 8						; size = 4
_GetBitCount@4 PROC					; COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amvideo.cpp
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 126
	cmp	DWORD PTR _pSubtype$[ebp], 0
	jne	SHORT $LN5@GetBitCoun
	push	126					; 0000007eH
	push	OFFSET $SG81644
	push	OFFSET $SG81645
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@GetBitCoun:
; Line 128
	mov	DWORD PTR _iPosition$[ebp], 0
$LN4@GetBitCoun:
; Line 133
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@GetBitCoun
; Line 134
	mov	ecx, DWORD PTR _iPosition$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _BitCountMap[ecx]
	mov	DWORD PTR _pMediaSubtype$[ebp], edx
; Line 135
	push	OFFSET _GUID_NULL
	mov	eax, DWORD PTR _pMediaSubtype$[ebp]
	push	eax
	call	_IsEqualGUID@8
	test	eax, eax
	je	SHORT $LN2@GetBitCoun
; Line 136
	mov	eax, 65535				; 0000ffffH
	jmp	SHORT $LN6@GetBitCoun
$LN2@GetBitCoun:
; Line 138
	mov	ecx, DWORD PTR _pSubtype$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pMediaSubtype$[ebp]
	push	edx
	call	_IsEqualGUID@8
	test	eax, eax
	je	SHORT $LN1@GetBitCoun
; Line 139
	mov	eax, DWORD PTR _iPosition$[ebp]
	shl	eax, 4
	mov	ax, WORD PTR _BitCountMap[eax+4]
	jmp	SHORT $LN6@GetBitCoun
$LN1@GetBitCoun:
; Line 141
	mov	ecx, DWORD PTR _iPosition$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iPosition$[ebp], ecx
; Line 142
	jmp	SHORT $LN4@GetBitCoun
$LN6@GetBitCoun:
; Line 143
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_GetBitCount@4 ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	?LocateSubtype@@YGHPBU_GUID@@@Z			; LocateSubtype
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?LocateSubtype@@YGHPBU_GUID@@@Z
_TEXT	SEGMENT
_iPosition$ = -8					; size = 4
_pMediaSubtype$ = -4					; size = 4
_pSubtype$ = 8						; size = 4
?LocateSubtype@@YGHPBU_GUID@@@Z PROC			; LocateSubtype, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amvideo.cpp
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 152
	cmp	DWORD PTR _pSubtype$[ebp], 0
	jne	SHORT $LN5@LocateSubt
	push	152					; 00000098H
	push	OFFSET $SG81657
	push	OFFSET $SG81658
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@LocateSubt:
; Line 154
	mov	DWORD PTR _iPosition$[ebp], 0
$LN4@LocateSubt:
; Line 159
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@LocateSubt
; Line 160
	mov	ecx, DWORD PTR _iPosition$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _BitCountMap[ecx]
	mov	DWORD PTR _pMediaSubtype$[ebp], edx
; Line 163
	mov	eax, DWORD PTR _pSubtype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMediaSubtype$[ebp]
	push	ecx
	call	_IsEqualGUID@8
	test	eax, eax
	jne	SHORT $LN1@LocateSubt
	push	OFFSET _GUID_NULL
	mov	edx, DWORD PTR _pMediaSubtype$[ebp]
	push	edx
	call	_IsEqualGUID@8
	test	eax, eax
	je	SHORT $LN2@LocateSubt
$LN1@LocateSubt:
; Line 165
	jmp	SHORT $LN3@LocateSubt
$LN2@LocateSubt:
; Line 168
	mov	eax, DWORD PTR _iPosition$[ebp]
	add	eax, 1
	mov	DWORD PTR _iPosition$[ebp], eax
; Line 169
	jmp	SHORT $LN4@LocateSubt
$LN3@LocateSubt:
; Line 171
	mov	eax, DWORD PTR _iPosition$[ebp]
; Line 172
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?LocateSubtype@@YGHPBU_GUID@@@Z ENDP			; LocateSubtype
_TEXT	ENDS
PUBLIC	_GetSubtypeNameW@4
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetSubtypeNameW@4
_TEXT	SEGMENT
_pSubtype$ = 8						; size = 4
_GetSubtypeNameW@4 PROC					; COMDAT
; Line 177
	push	ebp
	mov	ebp, esp
; Line 178
	mov	eax, DWORD PTR _pSubtype$[ebp]
	push	eax
	call	?LocateSubtype@@YGHPBU_GUID@@@Z		; LocateSubtype
	shl	eax, 4
	mov	eax, DWORD PTR _BitCountMap[eax+12]
; Line 179
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_GetSubtypeNameW@4 ENDP
_TEXT	ENDS
PUBLIC	_GetSubtypeNameA@4
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetSubtypeNameA@4
_TEXT	SEGMENT
_pSubtype$ = 8						; size = 4
_GetSubtypeNameA@4 PROC					; COMDAT
; Line 182
	push	ebp
	mov	ebp, esp
; Line 183
	mov	eax, DWORD PTR _pSubtype$[ebp]
	push	eax
	call	?LocateSubtype@@YGHPBU_GUID@@@Z		; LocateSubtype
	shl	eax, 4
	mov	eax, DWORD PTR _BitCountMap[eax+8]
; Line 184
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_GetSubtypeNameA@4 ENDP
_TEXT	ENDS
PUBLIC	_GetSubtypeName@4
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetSubtypeName@4
_TEXT	SEGMENT
_pSubtype$ = 8						; size = 4
_GetSubtypeName@4 PROC					; COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
; Line 195
	mov	eax, DWORD PTR _pSubtype$[ebp]
	push	eax
	call	_GetSubtypeNameA@4
; Line 196
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_GetSubtypeName@4 ENDP
_TEXT	ENDS
PUBLIC	_GetBitmapFormatSize@4
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetBitmapFormatSize@4
_TEXT	SEGMENT
_Entries$81691 = -8					; size = 4
_Size$ = -4						; size = 4
_pHeader$ = 8						; size = 4
_GetBitmapFormatSize@4 PROC				; COMDAT
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 216
	mov	eax, DWORD PTR _pHeader$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _Size$[ebp], ecx
; Line 218
	mov	edx, DWORD PTR _pHeader$[ebp]
	cmp	DWORD PTR [edx], 40			; 00000028H
	jae	SHORT $LN6@GetBitmapF
	push	218					; 000000daH
	push	OFFSET $SG81684
	push	OFFSET $SG81685
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@GetBitmapF:
; Line 226
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	ecx, 8
	jle	SHORT $LN5@GetBitmapF
	mov	edx, DWORD PTR _pHeader$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN5@GetBitmapF
	push	226					; 000000e2H
	push	OFFSET $SG81687
	push	OFFSET $SG81688
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@GetBitmapF:
; Line 228
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	cmp	ecx, 8
	jle	SHORT $LN3@GetBitmapF
	mov	edx, DWORD PTR _pHeader$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN4@GetBitmapF
$LN3@GetBitmapF:
; Line 229
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _Entries$81691[ebp], edx
; Line 230
	mov	eax, DWORD PTR _pHeader$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@GetBitmapF
; Line 231
	mov	ecx, DWORD PTR _pHeader$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _Entries$81691[ebp], edx
$LN2@GetBitmapF:
; Line 233
	mov	eax, DWORD PTR _Entries$81691[ebp]
	mov	ecx, DWORD PTR _Size$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _Size$[ebp], edx
$LN4@GetBitmapF:
; Line 240
	mov	eax, DWORD PTR _pHeader$[ebp]
	cmp	DWORD PTR [eax+16], 3
	jne	SHORT $LN1@GetBitmapF
; Line 241
	mov	ecx, DWORD PTR _Size$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _Size$[ebp], ecx
$LN1@GetBitmapF:
; Line 250
	mov	eax, DWORD PTR _Size$[ebp]
; Line 251
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_GetBitmapFormatSize@4 ENDP
_TEXT	ENDS
PUBLIC	_ContainsPalette@4
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ContainsPalette@4
_TEXT	SEGMENT
_pVideoInfo$ = 8					; size = 4
_ContainsPalette@4 PROC					; COMDAT
; Line 257
	push	ebp
	mov	ebp, esp
; Line 258
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	movzx	ecx, WORD PTR [eax+62]
	xor	edx, edx
	cmp	ecx, 8
	setle	dl
	test	edx, edx
	jne	SHORT $LN2@ContainsPa
; Line 259
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN2@ContainsPa
; Line 260
	xor	eax, eax
	jmp	SHORT $LN3@ContainsPa
$LN2@ContainsPa:
; Line 263
	mov	eax, 1
$LN3@ContainsPa:
; Line 264
	pop	ebp
	ret	4
_ContainsPalette@4 ENDP
_TEXT	ENDS
PUBLIC	_GetBitmapPalette@4
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetBitmapPalette@4
_TEXT	SEGMENT
_pVideoInfo$ = 8					; size = 4
_GetBitmapPalette@4 PROC				; COMDAT
; Line 270
	push	ebp
	mov	ebp, esp
; Line 271
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [eax+64], 3
	jne	SHORT $LN1@GetBitmapP
; Line 272
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	lea	eax, DWORD PTR [eax+edx+60]
	jmp	SHORT $LN2@GetBitmapP
$LN1@GetBitmapP:
; Line 274
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	lea	eax, DWORD PTR [eax+edx+48]
$LN2@GetBitmapP:
; Line 275
	pop	ebp
	ret	4
_GetBitmapPalette@4 ENDP
_TEXT	ENDS
END
