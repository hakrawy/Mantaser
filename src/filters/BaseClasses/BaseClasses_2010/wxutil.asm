; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Downloads\MediaPoint\src\filters\BaseClasses\wxutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
CONST	SEGMENT
$SG81571 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG81572 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'h', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, ')', 00H, 00H, 00H
$SG81607 DB	'C', 00H, 'o', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'E'
	DB	00H, 'x', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG81652 DB	'o', 00H, 'l', 00H, 'e', 00H, '3', 00H, '2', 00H, '.', 00H
	DB	'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
$SG81659 DB	'CoInitializeEx', 00H
	ORG $+1
$SG81662 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG81663 DB	'"', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H
	DB	'n', 00H, '''', 00H, 't', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'o', 00H, 'l', 00H
	DB	'e', 00H, '3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l'
	DB	00H, '"', 00H, 00H, 00H
$SG81669 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG81670 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'h', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81679 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG81680 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'h', 00H, 'S', 00H, 'e', 00H, 'm', 00H, ')', 00H
	DB	00H, 00H
$SG81744 DB	'%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG81908 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	'w', 00H, 'a', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H
	DB	' ', 00H, '%', 00H, 'x', 00H, ' ', 00H, 'o', 00H, 'w', 00H, 'n'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'b', 00H, 'y', 00H, ' ', 00H
	DB	'%', 00H, 'd', 00H, 00H, 00H
$SG81911 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'w'
	DB	00H, ' ', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 's', 00H, ' ', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '%', 00H, 'x'
	DB	00H, 00H, 00H
	ORG $+2
$SG81917 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, '%', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '%'
	DB	00H, 'x', 00H, 00H, 00H
$SG81954 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG81955 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81959 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H
$SG81960 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82010 DB	'A', 00H, 'M', 00H, 'U', 00H, 'n', 00H, 'b', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, 00H, 00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	??0CAMEvent@@QAE@H@Z				; CAMEvent::CAMEvent
EXTRN	__imp__CreateEventW@16:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??0CAMEvent@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fManualReset$ = 8					; size = 4
??0CAMEvent@@QAE@H@Z PROC				; CAMEvent::CAMEvent, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 69
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _fManualReset$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__CreateEventW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 70
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAMEvent@@QAE@H@Z ENDP				; CAMEvent::CAMEvent
_TEXT	ENDS
PUBLIC	??1CAMEvent@@QAE@XZ				; CAMEvent::~CAMEvent
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAMEvent@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAMEvent@@QAE@XZ PROC				; CAMEvent::~CAMEvent, COMDAT
; _this$ = ecx
; Line 73
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@CAMEvent
; Line 75
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@CAMEvent
	push	75					; 0000004bH
	push	OFFSET $SG81571
	push	OFFSET $SG81572
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CAMEvent:
; Line 77
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAMEvent@@QAE@XZ ENDP				; CAMEvent::~CAMEvent
_TEXT	ENDS
PUBLIC	?WaitMsg@CAMMsgEvent@@QAEHK@Z			; CAMMsgEvent::WaitMsg
EXTRN	__imp__PeekMessageW@20:PROC
EXTRN	__imp__MsgWaitForMultipleObjects@20:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WaitMsg@CAMMsgEvent@@QAEHK@Z
_TEXT	SEGMENT
tv88 = -64						; size = 4
$T82445 = -57						; size = 1
_dwElapsed$81588 = -56					; size = 4
_Message$81586 = -48					; size = 28
_dwWaitTime$ = -16					; size = 4
_dwStartTime$ = -12					; size = 4
_dwWait$ = -8						; size = 4
_this$ = -4						; size = 4
_dwTimeout$ = 8						; size = 4
?WaitMsg@CAMMsgEvent@@QAEHK@Z PROC			; CAMMsgEvent::WaitMsg, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T82445[ebp], 0
; Line 92
	mov	eax, DWORD PTR _dwTimeout$[ebp]
	mov	DWORD PTR _dwWaitTime$[ebp], eax
; Line 97
	cmp	DWORD PTR _dwWaitTime$[ebp], -1
	je	SHORT $LN5@WaitMsg
; Line 98
	mov	esi, esp
	call	DWORD PTR __imp__timeGetTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR $T82445[ebp], 1
	mov	DWORD PTR _dwStartTime$[ebp], eax
$LN5@WaitMsg:
; Line 102
	mov	esi, esp
	push	64					; 00000040H
	mov	ecx, DWORD PTR _dwWaitTime$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	push	1
	call	DWORD PTR __imp__MsgWaitForMultipleObjects@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwWait$[ebp], eax
; Line 103
	cmp	DWORD PTR _dwWait$[ebp], 1
	jne	SHORT $LN4@WaitMsg
; Line 105
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _Message$81586[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageW@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 110
	cmp	DWORD PTR _dwWaitTime$[ebp], -1
	je	SHORT $LN4@WaitMsg
; Line 112
	cmp	BYTE PTR $T82445[ebp], 0
	jne	SHORT $LN11@WaitMsg
	push	OFFSET $LN12@WaitMsg
	call	__RTC_UninitUse
	add	esp, 4
$LN11@WaitMsg:
	mov	esi, esp
	call	DWORD PTR __imp__timeGetTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _dwStartTime$[ebp]
	mov	DWORD PTR _dwElapsed$81588[ebp], eax
; Line 117
	mov	ecx, DWORD PTR _dwElapsed$81588[ebp]
	cmp	ecx, DWORD PTR _dwTimeout$[ebp]
	jb	SHORT $LN9@WaitMsg
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN10@WaitMsg
$LN9@WaitMsg:
	mov	edx, DWORD PTR _dwTimeout$[ebp]
	sub	edx, DWORD PTR _dwElapsed$81588[ebp]
	mov	DWORD PTR tv88[ebp], edx
$LN10@WaitMsg:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _dwWaitTime$[ebp], eax
$LN4@WaitMsg:
; Line 120
	cmp	DWORD PTR _dwWait$[ebp], 1
	je	$LN5@WaitMsg
; Line 124
	xor	eax, eax
	cmp	DWORD PTR _dwWait$[ebp], 0
	sete	al
; Line 125
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@WaitMsg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN15@WaitMsg:
	DD	1
	DD	$LN14@WaitMsg
$LN14@WaitMsg:
	DD	-48					; ffffffd0H
	DD	28					; 0000001cH
	DD	$LN13@WaitMsg
$LN13@WaitMsg:
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN12@WaitMsg:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?WaitMsg@CAMMsgEvent@@QAEHK@Z ENDP			; CAMMsgEvent::WaitMsg
_TEXT	ENDS
PUBLIC	??1CCritSec@@QAE@XZ				; CCritSec::~CCritSec
PUBLIC	??0CCritSec@@QAE@XZ				; CCritSec::CCritSec
PUBLIC	??0CAMThread@@QAE@XZ				; CAMThread::CAMThread
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CAMThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CAMThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CAMThread@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CAMThread@@QAE@XZ$2
__ehfuncinfo$??0CAMThread@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CAMThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CAMThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CAMThread@@QAE@XZ PROC				; CAMThread::CAMThread, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CAMThread@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CAMEvent@@QAE@H@Z			; CAMEvent::CAMEvent
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CAMEvent@@QAE@H@Z			; CAMEvent::CAMEvent
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 134
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CAMThread@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
__unwindfunclet$??0CAMThread@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
__unwindfunclet$??0CAMThread@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??0CAMThread@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CAMThread@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CAMThread@@QAE@XZ ENDP				; CAMThread::CAMThread
PUBLIC	?Close@CAMThread@@QAEXXZ			; CAMThread::Close
PUBLIC	??1CAMThread@@UAE@XZ				; CAMThread::~CAMThread
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CAMThread@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CAMThread@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CAMThread@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CAMThread@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CAMThread@@UAE@XZ$3
__ehfuncinfo$??1CAMThread@@UAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CAMThread@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CAMThread@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CAMThread@@UAE@XZ PROC				; CAMThread::~CAMThread, COMDAT
; _this$ = ecx
; Line 136
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CAMThread@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
; Line 137
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CAMThread@@QAEXXZ		; CAMThread::Close
; Line 138
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CAMThread@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
__unwindfunclet$??1CAMThread@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
__unwindfunclet$??1CAMThread@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__unwindfunclet$??1CAMThread@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??1CAMThread@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CAMThread@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CAMThread@@UAE@XZ ENDP				; CAMThread::~CAMThread
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__InterlockedExchange@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CAMThread@@QAEXXZ
_TEXT	SEGMENT
_hThread$ = -8						; size = 4
_this$ = -4						; size = 4
?Close@CAMThread@@QAEXXZ PROC				; CAMThread::Close, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	DWORD PTR __imp__InterlockedExchange@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hThread$[ebp], eax
; Line 196
	cmp	DWORD PTR _hThread$[ebp], 0
	je	SHORT $LN2@Close
; Line 197
	mov	esi, esp
	push	-1
	mov	ecx, DWORD PTR _hThread$[ebp]
	push	ecx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 198
	mov	esi, esp
	mov	edx, DWORD PTR _hThread$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Close:
; Line 200
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CAMThread@@QAEXXZ ENDP				; CAMThread::Close
_TEXT	ENDS
PUBLIC	?CoInitializeHelper@CAMThread@@SGJXZ		; CAMThread::CoInitializeHelper
PUBLIC	?InitialThreadProc@CAMThread@@SGKPAX@Z		; CAMThread::InitialThreadProc
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	?DbgLogInfo@@YAXKKPB_WZZ:PROC			; DbgLogInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitialThreadProc@CAMThread@@SGKPAX@Z
_TEXT	SEGMENT
_hr$ = -12						; size = 4
_pThread$ = -8						; size = 4
_hrCoInit$ = -4						; size = 4
_pv$ = 8						; size = 4
?InitialThreadProc@CAMThread@@SGKPAX@Z PROC		; CAMThread::InitialThreadProc, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.cpp
; Line 145
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 146
	call	?CoInitializeHelper@CAMThread@@SGJXZ	; CAMThread::CoInitializeHelper
	mov	DWORD PTR _hrCoInit$[ebp], eax
; Line 147
	cmp	DWORD PTR _hrCoInit$[ebp], 0
	jge	SHORT $LN2@InitialThr
; Line 148
	push	OFFSET $SG81607
	push	1
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
$LN2@InitialThr:
; Line 151
	mov	eax, DWORD PTR _pv$[ebp]
	mov	DWORD PTR _pThread$[ebp], eax
; Line 153
	mov	ecx, DWORD PTR _pThread$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pThread$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 155
	cmp	DWORD PTR _hrCoInit$[ebp], 0
	jl	SHORT $LN1@InitialThr
; Line 156
	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@InitialThr:
; Line 159
	mov	eax, DWORD PTR _hr$[ebp]
; Line 160
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InitialThreadProc@CAMThread@@SGKPAX@Z ENDP		; CAMThread::InitialThreadProc
_TEXT	ENDS
PUBLIC	??1CAutoLock@@QAE@XZ				; CAutoLock::~CAutoLock
PUBLIC	?ThreadExists@CAMThread@@QBEHXZ			; CAMThread::ThreadExists
PUBLIC	??0CAutoLock@@QAE@PAVCCritSec@@@Z		; CAutoLock::CAutoLock
PUBLIC	?Create@CAMThread@@QAEHXZ			; CAMThread::Create
EXTRN	__imp__CreateThread@24:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Create@CAMThread@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CAMThread@@QAEHXZ$0
__ehfuncinfo$?Create@CAMThread@@QAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Create@CAMThread@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Create@CAMThread@@QAEHXZ
_TEXT	SEGMENT
$T82490 = -52						; size = 4
$T82489 = -48						; size = 4
$T82488 = -44						; size = 4
_lock$ = -36						; size = 4
_threadid$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Create@CAMThread@@QAEHXZ PROC				; CAMThread::Create, COMDAT
; _this$ = ecx
; Line 164
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create@CAMThread@@QAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 169
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ThreadExists@CAMThread@@QBEHXZ		; CAMThread::ThreadExists
	test	eax, eax
	je	SHORT $LN2@Create
; Line 170
	mov	DWORD PTR $T82488[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82488[ebp]
	jmp	SHORT $LN3@Create
$LN2@Create:
; Line 179
	mov	esi, esp
	lea	ecx, DWORD PTR _threadid$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	push	OFFSET ?InitialThreadProc@CAMThread@@SGKPAX@Z ; CAMThread::InitialThreadProc
	push	0
	push	0
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 181
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN1@Create
; Line 182
	mov	DWORD PTR $T82489[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82489[ebp]
	jmp	SHORT $LN3@Create
$LN1@Create:
; Line 185
	mov	DWORD PTR $T82490[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82490[ebp]
$LN3@Create:
; Line 186
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Create:
	DD	2
	DD	$LN9@Create
$LN9@Create:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Create
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN7@Create
$LN7@Create:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@Create:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@CAMThread@@QAEHXZ$0:
	lea	ecx, DWORD PTR _lock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Create@CAMThread@@QAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create@CAMThread@@QAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create@CAMThread@@QAEHXZ ENDP				; CAMThread::Create
PUBLIC	?Lock@CCritSec@@QAEXXZ				; CCritSec::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAutoLock@@QAE@PAVCCritSec@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plock$ = 8						; size = 4
??0CAutoLock@@QAE@PAVCCritSec@@@Z PROC			; CAutoLock::CAutoLock, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plock$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 97
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAutoLock@@QAE@PAVCCritSec@@@Z ENDP			; CAutoLock::CAutoLock
_TEXT	ENDS
PUBLIC	?Unlock@CCritSec@@QAEXXZ			; CCritSec::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoLock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoLock@@QAE@XZ PROC				; CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
; Line 102
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoLock@@QAE@XZ ENDP				; CAutoLock::~CAutoLock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ThreadExists@CAMThread@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ThreadExists@CAMThread@@QBEHXZ PROC			; CAMThread::ThreadExists, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@ThreadExis
; Line 207
	xor	eax, eax
	jmp	SHORT $LN3@ThreadExis
; Line 208
	jmp	SHORT $LN3@ThreadExis
$LN2@ThreadExis:
; Line 209
	mov	eax, 1
$LN3@ThreadExis:
; Line 211
	mov	esp, ebp
	pop	ebp
	ret	0
?ThreadExists@CAMThread@@QBEHXZ ENDP			; CAMThread::ThreadExists
_TEXT	ENDS
PUBLIC	?Wait@CAMEvent@@QAEHK@Z				; CAMEvent::Wait
PUBLIC	?Set@CAMEvent@@QAEXXZ				; CAMEvent::Set
PUBLIC	?CallWorker@CAMThread@@QAEKK@Z			; CAMThread::CallWorker
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.cpp
xdata$x	SEGMENT
__unwindtable$?CallWorker@CAMThread@@QAEKK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CallWorker@CAMThread@@QAEKK@Z$0
__ehfuncinfo$?CallWorker@CAMThread@@QAEKK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CallWorker@CAMThread@@QAEKK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?CallWorker@CAMThread@@QAEKK@Z
_TEXT	SEGMENT
$T82511 = -36						; size = 4
$T82510 = -32						; size = 4
_lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwParam$ = 8						; size = 4
?CallWorker@CAMThread@@QAEKK@Z PROC			; CAMThread::CallWorker, COMDAT
; _this$ = ecx
; Line 190
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CallWorker@CAMThread@@QAEKK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 192
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 194
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ThreadExists@CAMThread@@QBEHXZ		; CAMThread::ThreadExists
	test	eax, eax
	jne	SHORT $LN1@CallWorker
; Line 195
	mov	DWORD PTR $T82510[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82510[ebp]
	jmp	SHORT $LN2@CallWorker
$LN1@CallWorker:
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwParam$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 202
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Set@CAMEvent@@QAEXXZ			; CAMEvent::Set
; Line 205
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Wait@CAMEvent@@QAEHK@Z			; CAMEvent::Wait
; Line 208
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T82511[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82511[ebp]
$LN2@CallWorker:
; Line 209
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@CallWorker
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@CallWorker:
	DD	1
	DD	$LN7@CallWorker
$LN7@CallWorker:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@CallWorker
$LN5@CallWorker:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CallWorker@CAMThread@@QAEKK@Z$0:
	lea	ecx, DWORD PTR _lock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?CallWorker@CAMThread@@QAEKK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CallWorker@CAMThread@@QAEKK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CallWorker@CAMThread@@QAEKK@Z ENDP			; CAMThread::CallWorker
PUBLIC	??_C@_1CG@LOEFFHJE@?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AAm?$AA_?$AAh?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ ; `string'
EXTRN	__imp__SetEvent@4:PROC
;	COMDAT ??_C@_1CG@LOEFFHJE@?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AAm?$AA_?$AAh?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CJ?$AA?$AA@
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
CONST	SEGMENT
??_C@_1CG@LOEFFHJE@?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AAm?$AA_?$AAh?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CJ?$AA?$AA@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
CONST	SEGMENT
??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'D', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'P', 00H, 'o', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'e', 00H
	DB	's', 00H, '\', 00H, 'w', 00H, 'x', 00H, 'u', 00H, 't', 00H, 'i'
	DB	00H, 'l', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Set@CAMEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set@CAMEvent@@QAEXXZ PROC				; CAMEvent::Set, COMDAT
; _this$ = ecx
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@Set
	push	125					; 0000007dH
	push	OFFSET ??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1CG@LOEFFHJE@?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AAm?$AA_?$AAh?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CJ?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Set:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Set@CAMEvent@@QAEXXZ ENDP				; CAMEvent::Set
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Wait@CAMEvent@@QAEHK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwTimeout$ = 8						; size = 4
?Wait@CAMEvent@@QAEHK@Z PROC				; CAMEvent::Wait, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 127
	mov	esi, esp
	mov	eax, DWORD PTR _dwTimeout$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 128
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Wait@CAMEvent@@QAEHK@Z ENDP				; CAMEvent::Wait
_TEXT	ENDS
PUBLIC	?GetRequest@CAMThread@@QAEKXZ			; CAMThread::GetRequest
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetRequest@CAMThread@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRequest@CAMThread@@QAEKXZ PROC			; CAMThread::GetRequest, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.cpp
; Line 214
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 215
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Wait@CAMEvent@@QAEHK@Z			; CAMEvent::Wait
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
; Line 217
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRequest@CAMThread@@QAEKXZ ENDP			; CAMThread::GetRequest
_TEXT	ENDS
PUBLIC	?Check@CAMEvent@@QAEHXZ				; CAMEvent::Check
PUBLIC	?CheckRequest@CAMThread@@QAEHPAK@Z		; CAMThread::CheckRequest
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckRequest@CAMThread@@QAEHPAK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pParam$ = 8						; size = 4
?CheckRequest@CAMThread@@QAEHPAK@Z PROC			; CAMThread::CheckRequest, COMDAT
; _this$ = ecx
; Line 222
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Check@CAMEvent@@QAEHXZ			; CAMEvent::Check
	test	eax, eax
	jne	SHORT $LN3@CheckReque
; Line 224
	xor	eax, eax
	jmp	SHORT $LN4@CheckReque
; Line 225
	jmp	SHORT $LN4@CheckReque
$LN3@CheckReque:
; Line 226
	cmp	DWORD PTR _pParam$[ebp], 0
	je	SHORT $LN1@CheckReque
; Line 227
	mov	eax, DWORD PTR _pParam$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
$LN1@CheckReque:
; Line 229
	mov	eax, 1
$LN4@CheckReque:
; Line 231
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckRequest@CAMThread@@QAEHPAK@Z ENDP			; CAMThread::CheckRequest
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Check@CAMEvent@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Check@CAMEvent@@QAEHXZ PROC				; CAMEvent::Check, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 130
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Wait@CAMEvent@@QAEHK@Z			; CAMEvent::Wait
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Check@CAMEvent@@QAEHXZ ENDP				; CAMEvent::Check
_TEXT	ENDS
PUBLIC	?Reset@CAMEvent@@QAEXXZ				; CAMEvent::Reset
PUBLIC	?Reply@CAMThread@@QAEXK@Z			; CAMThread::Reply
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reply@CAMThread@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dw$ = 8						; size = 4
?Reply@CAMThread@@QAEXK@Z PROC				; CAMThread::Reply, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.cpp
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 237
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dw$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 246
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Reset@CAMEvent@@QAEXXZ			; CAMEvent::Reset
; Line 250
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Set@CAMEvent@@QAEXXZ			; CAMEvent::Set
; Line 251
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reply@CAMThread@@QAEXK@Z ENDP				; CAMThread::Reply
_TEXT	ENDS
EXTRN	__imp__ResetEvent@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reset@CAMEvent@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@CAMEvent@@QAEXXZ PROC				; CAMEvent::Reset, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CAMEvent@@QAEXXZ ENDP				; CAMEvent::Reset
_TEXT	ENDS
EXTRN	?DbgBreakPoint@@YGXPB_W0H@Z:PROC		; DbgBreakPoint
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CoInitializeHelper@CAMThread@@SGJXZ
_TEXT	SEGMENT
_pCoInitializeEx$81657 = -12				; size = 4
_hOle$ = -8						; size = 4
_hr$ = -4						; size = 4
?CoInitializeHelper@CAMThread@@SGJXZ PROC		; CAMThread::CoInitializeHelper, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.cpp
; Line 254
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 267
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
; Line 268
	mov	esi, esp
	push	OFFSET $SG81652
	call	DWORD PTR __imp__GetModuleHandleW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hOle$[ebp], eax
; Line 269
	cmp	DWORD PTR _hOle$[ebp], 0
	je	SHORT $LN3@CoInitiali
; Line 274
	mov	esi, esp
	push	OFFSET $SG81659
	mov	eax, DWORD PTR _hOle$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pCoInitializeEx$81657[ebp], eax
; Line 275
	cmp	DWORD PTR _pCoInitializeEx$81657[ebp], 0
	je	SHORT $LN2@CoInitiali
; Line 277
	mov	esi, esp
	push	4
	push	0
	call	DWORD PTR _pCoInitializeEx$81657[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN2@CoInitiali:
; Line 280
	jmp	SHORT $LN1@CoInitiali
$LN3@CoInitiali:
; Line 283
	push	283					; 0000011bH
	push	OFFSET $SG81662
	push	OFFSET $SG81663
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@CoInitiali:
; Line 286
	mov	eax, DWORD PTR _hr$[ebp]
; Line 287
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CoInitializeHelper@CAMThread@@SGJXZ ENDP		; CAMThread::CoInitializeHelper
_TEXT	ENDS
PUBLIC	??1?$CGenericList@VCMsg@@@@QAE@XZ		; CGenericList<CMsg>::~CGenericList<CMsg>
PUBLIC	?GetNext@?$CGenericList@VCMsg@@@@QBEPAVCMsg@@AAPAU__POSITION@@@Z ; CGenericList<CMsg>::GetNext
PUBLIC	?GetHeadPosition@?$CGenericList@VCMsg@@@@QBEPAU__POSITION@@XZ ; CGenericList<CMsg>::GetHeadPosition
PUBLIC	??1CMsgThread@@QAE@XZ				; CMsgThread::~CMsgThread
EXTRN	?RemoveAll@CBaseList@@QAEXXZ:PROC		; CBaseList::RemoveAll
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMsgThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMsgThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMsgThread@@QAE@XZ$1
__ehfuncinfo$??1CMsgThread@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CMsgThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMsgThread@@QAE@XZ
_TEXT	SEGMENT
$T82540 = -36						; size = 4
_pMsg$81675 = -32					; size = 4
_pos$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMsgThread@@QAE@XZ PROC				; CMsgThread::~CMsgThread, COMDAT
; _this$ = ecx
; Line 293
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMsgThread@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 294
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN6@CMsgThread
; Line 295
	mov	esi, esp
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 296
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@CMsgThread
	push	296					; 00000128H
	push	OFFSET $SG81669
	push	OFFSET $SG81670
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@CMsgThread:
; Line 299
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetHeadPosition@?$CGenericList@VCMsg@@@@QBEPAU__POSITION@@XZ ; CGenericList<CMsg>::GetHeadPosition
	mov	DWORD PTR _pos$[ebp], eax
$LN4@CMsgThread:
; Line 300
	cmp	DWORD PTR _pos$[ebp], 0
	je	SHORT $LN3@CMsgThread
; Line 301
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetNext@?$CGenericList@VCMsg@@@@QBEPAVCMsg@@AAPAU__POSITION@@@Z ; CGenericList<CMsg>::GetNext
	mov	DWORD PTR _pMsg$81675[ebp], eax
; Line 302
	mov	eax, DWORD PTR _pMsg$81675[ebp]
	mov	DWORD PTR $T82540[ebp], eax
	mov	ecx, DWORD PTR $T82540[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 303
	jmp	SHORT $LN4@CMsgThread
$LN3@CMsgThread:
; Line 304
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?RemoveAll@CBaseList@@QAEXXZ		; CBaseList::RemoveAll
; Line 306
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN7@CMsgThread
; Line 307
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN7@CMsgThread
	push	307					; 00000133H
	push	OFFSET $SG81679
	push	OFFSET $SG81680
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@CMsgThread:
; Line 309
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CGenericList@VCMsg@@@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@CMsgThread
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@CMsgThread:
	DD	1
	DD	$LN13@CMsgThread
$LN13@CMsgThread:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN11@CMsgThread
$LN11@CMsgThread:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMsgThread@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CGenericList@VCMsg@@@@QAE@XZ
__unwindfunclet$??1CMsgThread@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??1CMsgThread@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMsgThread@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMsgThread@@QAE@XZ ENDP				; CMsgThread::~CMsgThread
EXTRN	??1CBaseList@@QAE@XZ:PROC			; CBaseList::~CBaseList
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CGenericList@VCMsg@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CGenericList@VCMsg@@@@QAE@XZ PROC			; CGenericList<CMsg>::~CGenericList<CMsg>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseList@@QAE@XZ			; CBaseList::~CBaseList
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGenericList@VCMsg@@@@QAE@XZ ENDP			; CGenericList<CMsg>::~CGenericList<CMsg>
_TEXT	ENDS
PUBLIC	?DefaultThreadProc@CMsgThread@@CGKPAX@Z		; CMsgThread::DefaultThreadProc
PUBLIC	?CreateThread@CMsgThread@@QAEHXZ		; CMsgThread::CreateThread
EXTRN	__imp__CreateSemaphoreW@16:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateThread@CMsgThread@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateThread@CMsgThread@@QAEHXZ PROC			; CMsgThread::CreateThread, COMDAT
; _this$ = ecx
; Line 314
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 315
	mov	esi, esp
	push	0
	push	2147483647				; 7fffffffH
	push	0
	push	0
	call	DWORD PTR __imp__CreateSemaphoreW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], eax
; Line 316
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	jne	SHORT $LN1@CreateThre
; Line 317
	xor	eax, eax
	jmp	SHORT $LN2@CreateThre
$LN1@CreateThre:
; Line 321
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	OFFSET ?DefaultThreadProc@CMsgThread@@CGKPAX@Z ; CMsgThread::DefaultThreadProc
	push	0
	push	0
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 322
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+8], 0
	setne	cl
	mov	eax, ecx
$LN2@CreateThre:
; Line 323
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateThread@CMsgThread@@QAEHXZ ENDP			; CMsgThread::CreateThread
_TEXT	ENDS
PUBLIC	??0CMsg@@QAE@XZ					; CMsg::CMsg
EXTRN	__imp__CoInitialize@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DefaultThreadProc@CMsgThread@@CGKPAX@Z
_TEXT	SEGMENT
_lResult$ = -32						; size = 4
_msg$ = -24						; size = 16
_lpThis$ = -4						; size = 4
_lpParam$ = 8						; size = 4
?DefaultThreadProc@CMsgThread@@CGKPAX@Z PROC		; CMsgThread::DefaultThreadProc, COMDAT
; Line 335
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 336
	mov	eax, DWORD PTR _lpParam$[ebp]
	mov	DWORD PTR _lpThis$[ebp], eax
; Line 337
	lea	ecx, DWORD PTR _msg$[ebp]
	call	??0CMsg@@QAE@XZ				; CMsg::CMsg
; Line 341
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__CoInitialize@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 344
	mov	ecx, DWORD PTR _lpThis$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _lpThis$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DefaultThr:
; Line 347
	mov	esi, esp
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpThis$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _lpThis$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 349
	mov	esi, esp
	mov	eax, DWORD PTR _msg$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpThis$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _lpThis$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lResult$[ebp], eax
; Line 350
	cmp	DWORD PTR _lResult$[ebp], 0
	je	SHORT $LN3@DefaultThr
; Line 353
	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 355
	mov	eax, DWORD PTR _lResult$[ebp]
; Line 356
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DefaultThr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN8@DefaultThr:
	DD	1
	DD	$LN7@DefaultThr
$LN7@DefaultThr:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN6@DefaultThr
$LN6@DefaultThr:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
?DefaultThreadProc@CMsgThread@@CGKPAX@Z ENDP		; CMsgThread::DefaultThreadProc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMsg@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMsg@@QAE@XZ PROC					; CMsg::CMsg, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\msgthrd.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMsg@@QAE@XZ ENDP					; CMsg::CMsg
_TEXT	ENDS
PUBLIC	?RemoveHead@?$CGenericList@VCMsg@@@@QAEPAVCMsg@@XZ ; CGenericList<CMsg>::RemoveHead
PUBLIC	?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z	; CMsgThread::GetThreadMsg
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.cpp
xdata$x	SEGMENT
__unwindtable$?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z$0
__ehfuncinfo$?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z
_TEXT	SEGMENT
$T82566 = -36						; size = 4
_lck$81705 = -28					; size = 4
_pmsg$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_msg$ = 8						; size = 4
?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z PROC		; CMsgThread::GetThreadMsg, COMDAT
; _this$ = ecx
; Line 363
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 364
	mov	DWORD PTR _pmsg$[ebp], 0
$LN4@GetThreadM:
; Line 367
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@GetThreadM
; Line 369
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	lea	ecx, DWORD PTR _lck$81705[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 370
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?RemoveHead@?$CGenericList@VCMsg@@@@QAEPAVCMsg@@XZ ; CGenericList<CMsg>::RemoveHead
	mov	DWORD PTR _pmsg$[ebp], eax
; Line 371
	cmp	DWORD PTR _pmsg$[ebp], 0
	jne	SHORT $LN2@GetThreadM
; Line 372
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax
; Line 373
	jmp	SHORT $LN1@GetThreadM
$LN2@GetThreadM:
; Line 374
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81705[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	jmp	SHORT $LN3@GetThreadM
$LN1@GetThreadM:
; Line 376
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$81705[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 378
	mov	esi, esp
	push	-1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 379
	jmp	SHORT $LN4@GetThreadM
$LN3@GetThreadM:
; Line 381
	mov	ecx, DWORD PTR _pmsg$[ebp]
	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 384
	mov	edx, DWORD PTR _pmsg$[ebp]
	mov	DWORD PTR $T82566[ebp], edx
	mov	eax, DWORD PTR $T82566[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 386
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetThreadM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@GetThreadM:
	DD	1
	DD	$LN10@GetThreadM
$LN10@GetThreadM:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN8@GetThreadM
$LN8@GetThreadM:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z$0:
	lea	ecx, DWORD PTR _lck$81705[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetThreadMsg@CMsgThread@@UAEXPAVCMsg@@@Z ENDP		; CMsgThread::GetThreadMsg
PUBLIC	?lstrcpyWInternal@@YGPA_WPA_WPB_W@Z		; lstrcpyWInternal
EXTRN	__imp__lstrcpyW@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?lstrcpyWInternal@@YGPA_WPA_WPB_W@Z
_TEXT	SEGMENT
_lpString1$ = 8						; size = 4
_lpString2$ = 12					; size = 4
?lstrcpyWInternal@@YGPA_WPA_WPB_W@Z PROC		; lstrcpyWInternal, COMDAT
; Line 507
	push	ebp
	mov	ebp, esp
	push	esi
; Line 508
	mov	esi, esp
	mov	eax, DWORD PTR _lpString2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpString1$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 509
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?lstrcpyWInternal@@YGPA_WPA_WPB_W@Z ENDP		; lstrcpyWInternal
_TEXT	ENDS
PUBLIC	?lstrcpynWInternal@@YGPA_WPA_WPB_WH@Z		; lstrcpynWInternal
EXTRN	__imp__lstrcpynW@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?lstrcpynWInternal@@YGPA_WPA_WPB_WH@Z
_TEXT	SEGMENT
_lpString1$ = 8						; size = 4
_lpString2$ = 12					; size = 4
_iMaxLength$ = 16					; size = 4
?lstrcpynWInternal@@YGPA_WPA_WPB_WH@Z PROC		; lstrcpynWInternal, COMDAT
; Line 516
	push	ebp
	mov	ebp, esp
	push	esi
; Line 517
	mov	esi, esp
	mov	eax, DWORD PTR _iMaxLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpString2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpString1$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrcpynW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 518
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?lstrcpynWInternal@@YGPA_WPA_WPB_WH@Z ENDP		; lstrcpynWInternal
_TEXT	ENDS
PUBLIC	?lstrcmpWInternal@@YGHPB_W0@Z			; lstrcmpWInternal
EXTRN	__imp__lstrcmpW@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?lstrcmpWInternal@@YGHPB_W0@Z
_TEXT	SEGMENT
_lpString1$ = 8						; size = 4
_lpString2$ = 12					; size = 4
?lstrcmpWInternal@@YGHPB_W0@Z PROC			; lstrcmpWInternal, COMDAT
; Line 524
	push	ebp
	mov	ebp, esp
	push	esi
; Line 525
	mov	esi, esp
	mov	eax, DWORD PTR _lpString2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpString1$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcmpW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 526
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?lstrcmpWInternal@@YGHPB_W0@Z ENDP			; lstrcmpWInternal
_TEXT	ENDS
PUBLIC	?lstrcmpiWInternal@@YGHPB_W0@Z			; lstrcmpiWInternal
EXTRN	__imp__lstrcmpiW@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?lstrcmpiWInternal@@YGHPB_W0@Z
_TEXT	SEGMENT
_lpString1$ = 8						; size = 4
_lpString2$ = 12					; size = 4
?lstrcmpiWInternal@@YGHPB_W0@Z PROC			; lstrcmpiWInternal, COMDAT
; Line 533
	push	ebp
	mov	ebp, esp
	push	esi
; Line 534
	mov	esi, esp
	mov	eax, DWORD PTR _lpString2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpString1$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcmpiW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 535
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?lstrcmpiWInternal@@YGHPB_W0@Z ENDP			; lstrcmpiWInternal
_TEXT	ENDS
PUBLIC	?lstrlenWInternal@@YGHPB_W@Z			; lstrlenWInternal
EXTRN	__imp__lstrlenW@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?lstrlenWInternal@@YGHPB_W@Z
_TEXT	SEGMENT
_lpString$ = 8						; size = 4
?lstrlenWInternal@@YGHPB_W@Z PROC			; lstrlenWInternal, COMDAT
; Line 541
	push	ebp
	mov	ebp, esp
	push	esi
; Line 542
	mov	esi, esp
	mov	eax, DWORD PTR _lpString$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 543
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?lstrlenWInternal@@YGHPB_W@Z ENDP			; lstrlenWInternal
_TEXT	ENDS
PUBLIC	?wsprintfWInternal@@YAHPA_WPB_WZZ		; wsprintfWInternal
EXTRN	__imp__wvsprintfW@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?wsprintfWInternal@@YAHPA_WPB_WZZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_va$ = -4						; size = 4
_wszOut$ = 8						; size = 4
_pszFmt$ = 12						; size = 4
?wsprintfWInternal@@YAHPA_WPB_WZZ PROC			; wsprintfWInternal, COMDAT
; Line 548
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 550
	lea	eax, DWORD PTR _pszFmt$[ebp+4]
	mov	DWORD PTR _va$[ebp], eax
; Line 551
	mov	esi, esp
	mov	ecx, DWORD PTR _va$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _wszOut$[ebp]
	push	eax
	call	DWORD PTR __imp__wvsprintfW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _i$[ebp], eax
; Line 552
	mov	DWORD PTR _va$[ebp], 0
; Line 553
	mov	eax, DWORD PTR _i$[ebp]
; Line 554
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?wsprintfWInternal@@YAHPA_WPB_WZZ ENDP			; wsprintfWInternal
_TEXT	ENDS
PUBLIC	?IntToWstr@@YGXHPA_W@Z				; IntToWstr
EXTRN	__imp__wsprintfW:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IntToWstr@@YGXHPA_W@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_wstr$ = 12						; size = 4
?IntToWstr@@YGXHPA_W@Z PROC				; IntToWstr, COMDAT
; Line 560
	push	ebp
	mov	ebp, esp
	push	esi
; Line 562
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG81744
	mov	ecx, DWORD PTR _wstr$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 568
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?IntToWstr@@YGXHPA_W@Z ENDP				; IntToWstr
_TEXT	ENDS
PUBLIC	_memmoveInternal@12
; Function compile flags: /Odtp /RTCsu
;	COMDAT _memmoveInternal@12
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_count$ = 16						; size = 4
_memmoveInternal@12 PROC				; COMDAT
; Line 590
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 591
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
; Line 594
	mov	ecx, DWORD PTR _dst$[ebp]
	cmp	ecx, DWORD PTR _src$[ebp]
	jbe	SHORT $LN2@memmoveInt
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, DWORD PTR _count$[ebp]
	cmp	DWORD PTR _dst$[ebp], edx
	jb	SHORT $LN3@memmoveInt
$LN2@memmoveInt:
; Line 601
	mov	esi, DWORD PTR _src$[ebp]
; Line 602
	mov	edi, DWORD PTR _dst$[ebp]
; Line 603
	mov	ecx, DWORD PTR _count$[ebp]
; Line 604
	cld
; Line 605
	mov	edx, ecx
; Line 606
	and	edx, 3
; Line 607
	shr	ecx, 2
; Line 608
	rep	 movsd
; Line 609
	or	ecx, edx
; Line 610
	je	SHORT $memmove_done$81755
; Line 611
	rep	 movsb
$memmove_done$81755:
; Line 615
	jmp	SHORT $LN1@memmoveInt
$LN3@memmoveInt:
; Line 622
	mov	esi, DWORD PTR _src$[ebp]
; Line 623
	mov	edi, DWORD PTR _dst$[ebp]
; Line 624
	mov	ecx, DWORD PTR _count$[ebp]
; Line 625
	std
; Line 626
	add	esi, ecx
; Line 627
	add	edi, ecx
; Line 628
	dec	esi
; Line 629
	dec	edi
; Line 630
	rep	 movsb
; Line 631
	cld
$LN1@memmoveInt:
; Line 638
	mov	eax, DWORD PTR _ret$[ebp]
; Line 639
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_memmoveInternal@12 ENDP
_TEXT	ENDS
PUBLIC	?llMulDiv@@YG_J_J000@Z				; llMulDiv
EXTRN	__allshl:PROC
EXTRN	__aullrem:PROC
EXTRN	__aulldiv:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?llMulDiv@@YG_J_J000@Z
_TEXT	SEGMENT
tv262 = -260						; size = 8
tv236 = -252						; size = 8
tv220 = -244						; size = 8
tv213 = -236						; size = 8
tv203 = -228						; size = 8
tv76 = -220						; size = 4
tv74 = -216						; size = 4
tv72 = -212						; size = 8
tv69 = -204						; size = 8
tv66 = -196						; size = 8
_i$81827 = -188						; size = 4
_dwDivisor$81821 = -184					; size = 4
_uliResult$81820 = -176					; size = 8
_uliDividend$81819 = -160				; size = 8
_ulic$ = -144						; size = 8
_ullResult$ = -132					; size = 8
_uliTotal$81804 = -120					; size = 8
_ud$81789 = -104					; size = 16
_x$ = -80						; size = 8
_p$ = -64						; size = 16
_bSign$ = -44						; size = 4
_uc$ = -40						; size = 8
_ub$ = -28						; size = 8
_ua$ = -12						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 8
_c$ = 24						; size = 8
_d$ = 32						; size = 8
?llMulDiv@@YG_J_J000@Z PROC				; llMulDiv, COMDAT
; Line 653
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 658
	cmp	DWORD PTR _a$[ebp+4], 0
	jl	SHORT $LN20@llMulDiv
	jg	SHORT $LN40@llMulDiv
	cmp	DWORD PTR _a$[ebp], 0
	jb	SHORT $LN20@llMulDiv
$LN40@llMulDiv:
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR tv66[ebp+4], ecx
	jmp	SHORT $LN21@llMulDiv
$LN20@llMulDiv:
	mov	edx, DWORD PTR _a$[ebp]
	neg	edx
	mov	eax, DWORD PTR _a$[ebp+4]
	adc	eax, 0
	neg	eax
	mov	DWORD PTR tv66[ebp], edx
	mov	DWORD PTR tv66[ebp+4], eax
$LN21@llMulDiv:
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _ua$[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp+4]
	mov	DWORD PTR _ua$[ebp+4], edx
; Line 659
	cmp	DWORD PTR _b$[ebp+4], 0
	jl	SHORT $LN22@llMulDiv
	jg	SHORT $LN41@llMulDiv
	cmp	DWORD PTR _b$[ebp], 0
	jb	SHORT $LN22@llMulDiv
$LN41@llMulDiv:
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR tv69[ebp+4], ecx
	jmp	SHORT $LN23@llMulDiv
$LN22@llMulDiv:
	mov	edx, DWORD PTR _b$[ebp]
	neg	edx
	mov	eax, DWORD PTR _b$[ebp+4]
	adc	eax, 0
	neg	eax
	mov	DWORD PTR tv69[ebp], edx
	mov	DWORD PTR tv69[ebp+4], eax
$LN23@llMulDiv:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _ub$[ebp], ecx
	mov	edx, DWORD PTR tv69[ebp+4]
	mov	DWORD PTR _ub$[ebp+4], edx
; Line 660
	cmp	DWORD PTR _c$[ebp+4], 0
	jl	SHORT $LN24@llMulDiv
	jg	SHORT $LN42@llMulDiv
	cmp	DWORD PTR _c$[ebp], 0
	jb	SHORT $LN24@llMulDiv
$LN42@llMulDiv:
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp+4]
	mov	DWORD PTR tv72[ebp+4], ecx
	jmp	SHORT $LN25@llMulDiv
$LN24@llMulDiv:
	mov	edx, DWORD PTR _c$[ebp]
	neg	edx
	mov	eax, DWORD PTR _c$[ebp+4]
	adc	eax, 0
	neg	eax
	mov	DWORD PTR tv72[ebp], edx
	mov	DWORD PTR tv72[ebp+4], eax
$LN25@llMulDiv:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _uc$[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp+4]
	mov	DWORD PTR _uc$[ebp+4], edx
; Line 661
	cmp	DWORD PTR _a$[ebp+4], 0
	jg	SHORT $LN26@llMulDiv
	jl	SHORT $LN43@llMulDiv
	cmp	DWORD PTR _a$[ebp], 0
	jae	SHORT $LN26@llMulDiv
$LN43@llMulDiv:
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN27@llMulDiv
$LN26@llMulDiv:
	mov	DWORD PTR tv74[ebp], 0
$LN27@llMulDiv:
	cmp	DWORD PTR _b$[ebp+4], 0
	jg	SHORT $LN28@llMulDiv
	jl	SHORT $LN44@llMulDiv
	cmp	DWORD PTR _b$[ebp], 0
	jae	SHORT $LN28@llMulDiv
$LN44@llMulDiv:
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN29@llMulDiv
$LN28@llMulDiv:
	mov	DWORD PTR tv76[ebp], 0
$LN29@llMulDiv:
	mov	eax, DWORD PTR tv74[ebp]
	xor	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR _bSign$[ebp], eax
; Line 665
	mov	eax, DWORD PTR _ua$[ebp]
	mov	ecx, DWORD PTR _ub$[ebp]
	mul	ecx
	mov	DWORD PTR _p$[ebp], eax
	mov	DWORD PTR _p$[ebp+4], edx
; Line 681
	mov	eax, DWORD PTR _ua$[ebp]
	mov	edx, DWORD PTR _ub$[ebp+4]
	mul	edx
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _ua$[ebp+4]
	mov	edx, DWORD PTR _ub$[ebp]
	mul	edx
	add	ecx, eax
	adc	esi, edx
	mov	eax, DWORD PTR _p$[ebp+4]
	xor	edx, edx
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _x$[ebp], ecx
	mov	DWORD PTR _x$[ebp+4], esi
; Line 682
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _p$[ebp+4], eax
; Line 683
	mov	eax, DWORD PTR _ua$[ebp+4]
	mov	ecx, DWORD PTR _ub$[ebp+4]
	mul	ecx
	mov	ecx, DWORD PTR _x$[ebp+4]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR _p$[ebp+8], eax
	mov	DWORD PTR _p$[ebp+12], edx
; Line 685
	mov	edx, DWORD PTR _d$[ebp]
	or	edx, DWORD PTR _d$[ebp+4]
	je	$LN17@llMulDiv
; Line 687
	cmp	DWORD PTR _bSign$[ebp], 0
	je	SHORT $LN16@llMulDiv
; Line 688
	mov	eax, DWORD PTR _d$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _d$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR _ud$81789[ebp], eax
	mov	DWORD PTR _ud$81789[ebp+4], ecx
; Line 689
	cmp	DWORD PTR _d$[ebp+4], 0
	jl	SHORT $LN15@llMulDiv
	jg	SHORT $LN45@llMulDiv
	cmp	DWORD PTR _d$[ebp], 0
	jbe	SHORT $LN15@llMulDiv
$LN45@llMulDiv:
; Line 691
	mov	DWORD PTR _ud$81789[ebp+8], -1
	mov	DWORD PTR _ud$81789[ebp+12], -1
; Line 692
	jmp	SHORT $LN14@llMulDiv
$LN15@llMulDiv:
; Line 693
	mov	DWORD PTR _ud$81789[ebp+8], 0
	mov	DWORD PTR _ud$81789[ebp+12], 0
$LN14@llMulDiv:
; Line 695
	jmp	SHORT $LN13@llMulDiv
$LN16@llMulDiv:
; Line 696
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _ud$81789[ebp], edx
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR _ud$81789[ebp+4], eax
; Line 697
	cmp	DWORD PTR _d$[ebp+4], 0
	jg	SHORT $LN12@llMulDiv
	jl	SHORT $LN46@llMulDiv
	cmp	DWORD PTR _d$[ebp], 0
	jae	SHORT $LN12@llMulDiv
$LN46@llMulDiv:
; Line 698
	mov	DWORD PTR _ud$81789[ebp+8], -1
	mov	DWORD PTR _ud$81789[ebp+12], -1
; Line 699
	jmp	SHORT $LN13@llMulDiv
$LN12@llMulDiv:
; Line 700
	mov	DWORD PTR _ud$81789[ebp+8], 0
	mov	DWORD PTR _ud$81789[ebp+12], 0
$LN13@llMulDiv:
; Line 707
	mov	ecx, DWORD PTR _ud$81789[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	xor	esi, esi
	add	ecx, eax
	adc	edx, esi
	mov	DWORD PTR _uliTotal$81804[ebp], ecx
	mov	DWORD PTR _uliTotal$81804[ebp+4], edx
; Line 708
	mov	ecx, DWORD PTR _uliTotal$81804[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 711
	mov	edx, DWORD PTR _uliTotal$81804[ebp+4]
	mov	DWORD PTR _uliTotal$81804[ebp], edx
; Line 712
	mov	DWORD PTR _uliTotal$81804[ebp+4], 0
; Line 715
	mov	eax, DWORD PTR _ud$81789[ebp+4]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp+4]
	xor	esi, esi
	add	eax, edx
	adc	ecx, esi
	add	eax, DWORD PTR _uliTotal$81804[ebp]
	adc	ecx, DWORD PTR _uliTotal$81804[ebp+4]
	mov	DWORD PTR _uliTotal$81804[ebp], eax
	mov	DWORD PTR _uliTotal$81804[ebp+4], ecx
; Line 716
	mov	eax, DWORD PTR _uliTotal$81804[ebp]
	mov	DWORD PTR _p$[ebp+4], eax
; Line 719
	mov	ecx, DWORD PTR _uliTotal$81804[ebp+4]
	mov	DWORD PTR _uliTotal$81804[ebp], ecx
; Line 720
	mov	DWORD PTR _uliTotal$81804[ebp+4], 0
; Line 723
	mov	edx, DWORD PTR _ud$81789[ebp+8]
	add	edx, DWORD PTR _uliTotal$81804[ebp]
	mov	eax, DWORD PTR _ud$81789[ebp+12]
	adc	eax, DWORD PTR _uliTotal$81804[ebp+4]
	add	edx, DWORD PTR _p$[ebp+8]
	adc	eax, DWORD PTR _p$[ebp+12]
	mov	DWORD PTR _p$[ebp+8], edx
	mov	DWORD PTR _p$[ebp+12], eax
; Line 726
	cmp	DWORD PTR _p$[ebp+12], 0
	jge	$LN17@llMulDiv
; Line 727
	xor	ecx, ecx
	cmp	DWORD PTR _bSign$[ebp], 0
	sete	cl
	mov	DWORD PTR _bSign$[ebp], ecx
; Line 730
	mov	edx, DWORD PTR _p$[ebp]
	not	edx
	mov	eax, DWORD PTR _p$[ebp+4]
	not	eax
	mov	DWORD PTR _p$[ebp], edx
	mov	DWORD PTR _p$[ebp+4], eax
; Line 731
	mov	ecx, DWORD PTR _p$[ebp+8]
	not	ecx
	mov	edx, DWORD PTR _p$[ebp+12]
	not	edx
	mov	DWORD PTR _p$[ebp+8], ecx
	mov	DWORD PTR _p$[ebp+12], edx
; Line 732
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _p$[ebp], eax
	mov	DWORD PTR _p$[ebp+4], ecx
; Line 733
	mov	edx, DWORD PTR _p$[ebp]
	or	edx, DWORD PTR _p$[ebp+4]
	jne	SHORT $LN30@llMulDiv
	mov	DWORD PTR tv203[ebp], 1
	mov	DWORD PTR tv203[ebp+4], 0
	jmp	SHORT $LN31@llMulDiv
$LN30@llMulDiv:
	mov	DWORD PTR tv203[ebp], 0
	mov	DWORD PTR tv203[ebp+4], 0
$LN31@llMulDiv:
	mov	eax, DWORD PTR _p$[ebp+8]
	add	eax, DWORD PTR tv203[ebp]
	mov	ecx, DWORD PTR _p$[ebp+12]
	adc	ecx, DWORD PTR tv203[ebp+4]
	mov	DWORD PTR _p$[ebp+8], eax
	mov	DWORD PTR _p$[ebp+12], ecx
$LN17@llMulDiv:
; Line 738
	cmp	DWORD PTR _c$[ebp+4], 0
	jg	SHORT $LN9@llMulDiv
	jl	SHORT $LN47@llMulDiv
	cmp	DWORD PTR _c$[ebp], 0
	jae	SHORT $LN9@llMulDiv
$LN47@llMulDiv:
; Line 739
	xor	edx, edx
	cmp	DWORD PTR _bSign$[ebp], 0
	sete	dl
	mov	DWORD PTR _bSign$[ebp], edx
$LN9@llMulDiv:
; Line 744
	mov	eax, DWORD PTR _uc$[ebp+4]
	cmp	eax, DWORD PTR _p$[ebp+12]
	ja	SHORT $LN8@llMulDiv
	jb	SHORT $LN48@llMulDiv
	mov	ecx, DWORD PTR _uc$[ebp]
	cmp	ecx, DWORD PTR _p$[ebp+8]
	ja	SHORT $LN8@llMulDiv
$LN48@llMulDiv:
; Line 746
	cmp	DWORD PTR _bSign$[ebp], 0
	je	SHORT $LN32@llMulDiv
	mov	DWORD PTR tv213[ebp], 0
	mov	DWORD PTR tv213[ebp+4], -2147483648	; 80000000H
	jmp	SHORT $LN33@llMulDiv
$LN32@llMulDiv:
	mov	DWORD PTR tv213[ebp], -1
	mov	DWORD PTR tv213[ebp+4], 2147483647	; 7fffffffH
$LN33@llMulDiv:
	mov	eax, DWORD PTR tv213[ebp]
	mov	edx, DWORD PTR tv213[ebp+4]
	jmp	$LN18@llMulDiv
$LN8@llMulDiv:
; Line 753
	mov	edx, DWORD PTR _p$[ebp+8]
	or	edx, DWORD PTR _p$[ebp+12]
	jne	SHORT $LN7@llMulDiv
; Line 754
	mov	eax, DWORD PTR _uc$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__aulldiv
	mov	DWORD PTR _ullResult$[ebp], eax
	mov	DWORD PTR _ullResult$[ebp+4], edx
; Line 755
	cmp	DWORD PTR _bSign$[ebp], 0
	je	SHORT $LN34@llMulDiv
	mov	ecx, DWORD PTR _ullResult$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _ullResult$[ebp+4]
	adc	edx, 0
	neg	edx
	mov	DWORD PTR tv220[ebp], ecx
	mov	DWORD PTR tv220[ebp+4], edx
	jmp	SHORT $LN35@llMulDiv
$LN34@llMulDiv:
	mov	eax, DWORD PTR _ullResult$[ebp]
	mov	DWORD PTR tv220[ebp], eax
	mov	ecx, DWORD PTR _ullResult$[ebp+4]
	mov	DWORD PTR tv220[ebp+4], ecx
$LN35@llMulDiv:
	mov	eax, DWORD PTR tv220[ebp]
	mov	edx, DWORD PTR tv220[ebp+4]
	jmp	$LN18@llMulDiv
$LN7@llMulDiv:
; Line 760
	mov	edx, DWORD PTR _uc$[ebp]
	mov	DWORD PTR _ulic$[ebp], edx
	mov	eax, DWORD PTR _uc$[ebp+4]
	mov	DWORD PTR _ulic$[ebp+4], eax
; Line 761
	cmp	DWORD PTR _ulic$[ebp+4], 0
	jne	$LN6@llMulDiv
; Line 764
	mov	ecx, DWORD PTR _uc$[ebp]
	mov	DWORD PTR _dwDivisor$81821[ebp], ecx
; Line 766
	mov	edx, DWORD PTR _p$[ebp+8]
	mov	DWORD PTR _uliDividend$81819[ebp+4], edx
; Line 767
	mov	eax, DWORD PTR _p$[ebp+4]
	mov	DWORD PTR _uliDividend$81819[ebp], eax
; Line 769
	mov	ecx, DWORD PTR _dwDivisor$81821[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _uliDividend$81819[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uliDividend$81819[ebp]
	push	ecx
	call	__aulldiv
	mov	DWORD PTR _uliResult$81820[ebp+4], eax
; Line 770
	mov	edx, DWORD PTR _dwDivisor$81821[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _uliDividend$81819[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _uliDividend$81819[ebp]
	push	edx
	call	__aullrem
	mov	DWORD PTR _p$[ebp+4], eax
; Line 771
	mov	DWORD PTR _uliResult$81820[ebp], 0
; Line 772
	mov	eax, DWORD PTR _dwDivisor$81821[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _p$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__aulldiv
	add	eax, DWORD PTR _uliResult$81820[ebp]
	adc	edx, DWORD PTR _uliResult$81820[ebp+4]
	mov	DWORD PTR _uliResult$81820[ebp], eax
	mov	DWORD PTR _uliResult$81820[ebp+4], edx
; Line 791
	cmp	DWORD PTR _bSign$[ebp], 0
	je	SHORT $LN36@llMulDiv
	mov	ecx, DWORD PTR _uliResult$81820[ebp]
	neg	ecx
	mov	edx, DWORD PTR _uliResult$81820[ebp+4]
	adc	edx, 0
	neg	edx
	mov	DWORD PTR tv236[ebp], ecx
	mov	DWORD PTR tv236[ebp+4], edx
	jmp	SHORT $LN37@llMulDiv
$LN36@llMulDiv:
	mov	eax, DWORD PTR _uliResult$81820[ebp]
	mov	DWORD PTR tv236[ebp], eax
	mov	ecx, DWORD PTR _uliResult$81820[ebp+4]
	mov	DWORD PTR tv236[ebp+4], ecx
$LN37@llMulDiv:
	mov	eax, DWORD PTR tv236[ebp]
	mov	edx, DWORD PTR tv236[ebp+4]
	jmp	$LN18@llMulDiv
$LN6@llMulDiv:
; Line 795
	mov	DWORD PTR _ullResult$[ebp], 0
	mov	DWORD PTR _ullResult$[ebp+4], 0
; Line 798
	mov	DWORD PTR _i$81827[ebp], 0
	jmp	SHORT $LN5@llMulDiv
$LN4@llMulDiv:
	mov	edx, DWORD PTR _i$81827[ebp]
	add	edx, 1
	mov	DWORD PTR _i$81827[ebp], edx
$LN5@llMulDiv:
	cmp	DWORD PTR _i$81827[ebp], 64		; 00000040H
	jge	$LN3@llMulDiv
; Line 799
	mov	eax, DWORD PTR _ullResult$[ebp]
	mov	edx, DWORD PTR _ullResult$[ebp+4]
	mov	cl, 1
	call	__allshl
	mov	DWORD PTR _ullResult$[ebp], eax
	mov	DWORD PTR _ullResult$[ebp+4], edx
; Line 802
	mov	eax, DWORD PTR _p$[ebp+8]
	mov	edx, DWORD PTR _p$[ebp+12]
	mov	cl, 1
	call	__allshl
	mov	DWORD PTR _p$[ebp+8], eax
	mov	DWORD PTR _p$[ebp+12], edx
; Line 803
	mov	eax, DWORD PTR _p$[ebp+4]
	and	eax, -2147483648			; 80000000H
	je	SHORT $LN2@llMulDiv
; Line 804
	mov	ecx, DWORD PTR _p$[ebp+8]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp+8], ecx
$LN2@llMulDiv:
; Line 806
	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp+4]
	mov	cl, 1
	call	__allshl
	mov	DWORD PTR _p$[ebp], eax
	mov	DWORD PTR _p$[ebp+4], edx
; Line 809
	mov	edx, DWORD PTR _uc$[ebp+4]
	cmp	edx, DWORD PTR _p$[ebp+12]
	ja	SHORT $LN1@llMulDiv
	jb	SHORT $LN49@llMulDiv
	mov	eax, DWORD PTR _uc$[ebp]
	cmp	eax, DWORD PTR _p$[ebp+8]
	ja	SHORT $LN1@llMulDiv
$LN49@llMulDiv:
; Line 810
	mov	ecx, DWORD PTR _p$[ebp+8]
	sub	ecx, DWORD PTR _uc$[ebp]
	mov	edx, DWORD PTR _p$[ebp+12]
	sbb	edx, DWORD PTR _uc$[ebp+4]
	mov	DWORD PTR _p$[ebp+8], ecx
	mov	DWORD PTR _p$[ebp+12], edx
; Line 811
	mov	eax, DWORD PTR _ullResult$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _ullResult$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _ullResult$[ebp], eax
	mov	DWORD PTR _ullResult$[ebp+4], ecx
$LN1@llMulDiv:
; Line 813
	jmp	$LN4@llMulDiv
$LN3@llMulDiv:
; Line 815
	cmp	DWORD PTR _bSign$[ebp], 0
	je	SHORT $LN38@llMulDiv
	mov	edx, DWORD PTR _ullResult$[ebp]
	neg	edx
	mov	eax, DWORD PTR _ullResult$[ebp+4]
	adc	eax, 0
	neg	eax
	mov	DWORD PTR tv262[ebp], edx
	mov	DWORD PTR tv262[ebp+4], eax
	jmp	SHORT $LN39@llMulDiv
$LN38@llMulDiv:
	mov	ecx, DWORD PTR _ullResult$[ebp]
	mov	DWORD PTR tv262[ebp], ecx
	mov	edx, DWORD PTR _ullResult$[ebp+4]
	mov	DWORD PTR tv262[ebp+4], edx
$LN39@llMulDiv:
	mov	eax, DWORD PTR tv262[ebp]
	mov	edx, DWORD PTR tv262[ebp+4]
$LN18@llMulDiv:
; Line 816
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@llMulDiv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
$LN60@llMulDiv:
	DD	9
	DD	$LN59@llMulDiv
$LN59@llMulDiv:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN50@llMulDiv
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN51@llMulDiv
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN52@llMulDiv
	DD	-80					; ffffffb0H
	DD	8
	DD	$LN53@llMulDiv
	DD	-104					; ffffff98H
	DD	16					; 00000010H
	DD	$LN54@llMulDiv
	DD	-120					; ffffff88H
	DD	8
	DD	$LN55@llMulDiv
	DD	-144					; ffffff70H
	DD	8
	DD	$LN56@llMulDiv
	DD	-160					; ffffff60H
	DD	8
	DD	$LN57@llMulDiv
	DD	-176					; ffffff50H
	DD	8
	DD	$LN58@llMulDiv
$LN58@llMulDiv:
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN57@llMulDiv:
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN56@llMulDiv:
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	0
$LN55@llMulDiv:
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN54@llMulDiv:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	0
$LN53@llMulDiv:
	DB	120					; 00000078H
	DB	0
$LN52@llMulDiv:
	DB	112					; 00000070H
	DB	0
$LN51@llMulDiv:
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	0
$LN50@llMulDiv:
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	0
?llMulDiv@@YG_J_J000@Z ENDP				; llMulDiv
_TEXT	ENDS
PUBLIC	?EnlargedUnsignedDivide@@YGKT_ULARGE_INTEGER@@KPAK@Z ; EnlargedUnsignedDivide
PUBLIC	?Int64x32Div32@@YG_J_JJJJ@Z			; Int64x32Div32
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Int64x32Div32@@YG_J_JJJJ@Z
_TEXT	SEGMENT
tv194 = -184						; size = 8
tv311 = -176						; size = 8
tv149 = -168						; size = 8
tv142 = -160						; size = 4
tv74 = -156						; size = 4
tv72 = -152						; size = 4
tv69 = -148						; size = 4
tv66 = -144						; size = 8
_dwDivisor$ = -136					; size = 4
_uliResult$ = -128					; size = 8
_uliDividend$ = -112					; size = 8
_uliTotal$81877 = -96					; size = 8
_ud1$81863 = -84					; size = 4
_ud0$81862 = -76					; size = 8
_x$81855 = -60						; size = 8
_p1$ = -48						; size = 4
_p0$ = -40						; size = 8
_bSign$ = -28						; size = 4
_uc$ = -24						; size = 4
_ub$ = -20						; size = 4
_ua$ = -12						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_d$ = 24						; size = 4
?Int64x32Div32@@YG_J_JJJJ@Z PROC			; Int64x32Div32, COMDAT
; Line 819
	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 825
	cmp	DWORD PTR _a$[ebp+4], 0
	jl	SHORT $LN17@Int64x32Di
	jg	SHORT $LN31@Int64x32Di
	cmp	DWORD PTR _a$[ebp], 0
	jb	SHORT $LN17@Int64x32Di
$LN31@Int64x32Di:
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR tv66[ebp+4], ecx
	jmp	SHORT $LN18@Int64x32Di
$LN17@Int64x32Di:
	mov	edx, DWORD PTR _a$[ebp]
	neg	edx
	mov	eax, DWORD PTR _a$[ebp+4]
	adc	eax, 0
	neg	eax
	mov	DWORD PTR tv66[ebp], edx
	mov	DWORD PTR tv66[ebp+4], eax
$LN18@Int64x32Di:
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _ua$[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp+4]
	mov	DWORD PTR _ua$[ebp+4], edx
; Line 826
	cmp	DWORD PTR _b$[ebp], 0
	jl	SHORT $LN19@Int64x32Di
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN20@Int64x32Di
$LN19@Int64x32Di:
	mov	ecx, DWORD PTR _b$[ebp]
	neg	ecx
	mov	DWORD PTR tv69[ebp], ecx
$LN20@Int64x32Di:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _ub$[ebp], edx
; Line 827
	cmp	DWORD PTR _c$[ebp], 0
	jl	SHORT $LN21@Int64x32Di
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN22@Int64x32Di
$LN21@Int64x32Di:
	mov	ecx, DWORD PTR _c$[ebp]
	neg	ecx
	mov	DWORD PTR tv72[ebp], ecx
$LN22@Int64x32Di:
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _uc$[ebp], edx
; Line 828
	cmp	DWORD PTR _a$[ebp+4], 0
	jg	SHORT $LN23@Int64x32Di
	jl	SHORT $LN32@Int64x32Di
	cmp	DWORD PTR _a$[ebp], 0
	jae	SHORT $LN23@Int64x32Di
$LN32@Int64x32Di:
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN24@Int64x32Di
$LN23@Int64x32Di:
	mov	DWORD PTR tv74[ebp], 0
$LN24@Int64x32Di:
	xor	eax, eax
	cmp	DWORD PTR _b$[ebp], 0
	setl	al
	xor	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR _bSign$[ebp], eax
; Line 833
	mov	eax, DWORD PTR _ua$[ebp]
	mov	ecx, DWORD PTR _ub$[ebp]
	mul	ecx
	mov	DWORD PTR _p0$[ebp], eax
	mov	DWORD PTR _p0$[ebp+4], edx
; Line 835
	cmp	DWORD PTR _ua$[ebp+4], 0
	je	SHORT $LN14@Int64x32Di
; Line 837
	mov	eax, DWORD PTR _ua$[ebp+4]
	mov	edx, DWORD PTR _ub$[ebp]
	mul	edx
	mov	ecx, DWORD PTR _p0$[ebp+4]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR _x$81855[ebp], eax
	mov	DWORD PTR _x$81855[ebp+4], edx
; Line 838
	mov	edx, DWORD PTR _x$81855[ebp]
	mov	DWORD PTR _p0$[ebp+4], edx
; Line 839
	mov	eax, DWORD PTR _x$81855[ebp+4]
	mov	DWORD PTR _p1$[ebp], eax
; Line 840
	jmp	SHORT $LN13@Int64x32Di
$LN14@Int64x32Di:
; Line 841
	mov	DWORD PTR _p1$[ebp], 0
$LN13@Int64x32Di:
; Line 844
	cmp	DWORD PTR _d$[ebp], 0
	je	$LN12@Int64x32Di
; Line 848
	cmp	DWORD PTR _bSign$[ebp], 0
	je	SHORT $LN11@Int64x32Di
; Line 853
	mov	eax, DWORD PTR _d$[ebp]
	cdq
	neg	eax
	adc	edx, 0
	neg	edx
	mov	DWORD PTR _ud0$81862[ebp], eax
	mov	DWORD PTR _ud0$81862[ebp+4], edx
; Line 854
	cmp	DWORD PTR _d$[ebp], 0
	jle	SHORT $LN10@Int64x32Di
; Line 856
	mov	DWORD PTR _ud1$81863[ebp], -1
; Line 857
	jmp	SHORT $LN9@Int64x32Di
$LN10@Int64x32Di:
; Line 858
	mov	DWORD PTR _ud1$81863[ebp], 0
$LN9@Int64x32Di:
; Line 860
	jmp	SHORT $LN8@Int64x32Di
$LN11@Int64x32Di:
; Line 861
	mov	eax, DWORD PTR _d$[ebp]
	cdq
	mov	DWORD PTR _ud0$81862[ebp], eax
	mov	DWORD PTR _ud0$81862[ebp+4], edx
; Line 862
	cmp	DWORD PTR _d$[ebp], 0
	jge	SHORT $LN7@Int64x32Di
; Line 863
	mov	DWORD PTR _ud1$81863[ebp], -1
; Line 864
	jmp	SHORT $LN8@Int64x32Di
$LN7@Int64x32Di:
; Line 865
	mov	DWORD PTR _ud1$81863[ebp], 0
$LN8@Int64x32Di:
; Line 872
	mov	ecx, DWORD PTR _ud0$81862[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _p0$[ebp]
	xor	esi, esi
	add	ecx, eax
	adc	edx, esi
	mov	DWORD PTR _uliTotal$81877[ebp], ecx
	mov	DWORD PTR _uliTotal$81877[ebp+4], edx
; Line 873
	mov	ecx, DWORD PTR _uliTotal$81877[ebp]
	mov	DWORD PTR _p0$[ebp], ecx
; Line 876
	mov	edx, DWORD PTR _uliTotal$81877[ebp+4]
	mov	DWORD PTR _uliTotal$81877[ebp], edx
; Line 877
	mov	DWORD PTR _uliTotal$81877[ebp+4], 0
; Line 880
	mov	eax, DWORD PTR _ud0$81862[ebp+4]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p0$[ebp+4]
	xor	esi, esi
	add	eax, edx
	adc	ecx, esi
	add	eax, DWORD PTR _uliTotal$81877[ebp]
	adc	ecx, DWORD PTR _uliTotal$81877[ebp+4]
	mov	DWORD PTR _uliTotal$81877[ebp], eax
	mov	DWORD PTR _uliTotal$81877[ebp+4], ecx
; Line 881
	mov	eax, DWORD PTR _uliTotal$81877[ebp]
	mov	DWORD PTR _p0$[ebp+4], eax
; Line 884
	mov	ecx, DWORD PTR _ud1$81863[ebp]
	add	ecx, DWORD PTR _uliTotal$81877[ebp+4]
	add	ecx, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _p1$[ebp], ecx
; Line 887
	jns	SHORT $LN12@Int64x32Di
; Line 888
	xor	edx, edx
	cmp	DWORD PTR _bSign$[ebp], 0
	sete	dl
	mov	DWORD PTR _bSign$[ebp], edx
; Line 891
	mov	eax, DWORD PTR _p0$[ebp]
	not	eax
	mov	ecx, DWORD PTR _p0$[ebp+4]
	not	ecx
	mov	DWORD PTR _p0$[ebp], eax
	mov	DWORD PTR _p0$[ebp+4], ecx
; Line 892
	mov	edx, DWORD PTR _p1$[ebp]
	not	edx
	mov	DWORD PTR _p1$[ebp], edx
; Line 893
	mov	eax, DWORD PTR _p0$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _p0$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _p0$[ebp], eax
	mov	DWORD PTR _p0$[ebp+4], ecx
; Line 894
	mov	edx, DWORD PTR _p0$[ebp]
	or	edx, DWORD PTR _p0$[ebp+4]
	jne	SHORT $LN25@Int64x32Di
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN26@Int64x32Di
$LN25@Int64x32Di:
	mov	DWORD PTR tv142[ebp], 0
$LN26@Int64x32Di:
	mov	eax, DWORD PTR _p1$[ebp]
	add	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR _p1$[ebp], eax
$LN12@Int64x32Di:
; Line 899
	cmp	DWORD PTR _c$[ebp], 0
	jge	SHORT $LN4@Int64x32Di
; Line 900
	xor	ecx, ecx
	cmp	DWORD PTR _bSign$[ebp], 0
	sete	cl
	mov	DWORD PTR _bSign$[ebp], ecx
$LN4@Int64x32Di:
; Line 905
	mov	edx, DWORD PTR _uc$[ebp]
	cmp	edx, DWORD PTR _p1$[ebp]
	ja	SHORT $LN3@Int64x32Di
; Line 907
	cmp	DWORD PTR _bSign$[ebp], 0
	je	SHORT $LN27@Int64x32Di
	mov	DWORD PTR tv149[ebp], 0
	mov	DWORD PTR tv149[ebp+4], -2147483648	; 80000000H
	jmp	SHORT $LN28@Int64x32Di
$LN27@Int64x32Di:
	mov	DWORD PTR tv149[ebp], -1
	mov	DWORD PTR tv149[ebp+4], 2147483647	; 7fffffffH
$LN28@Int64x32Di:
	mov	eax, DWORD PTR tv149[ebp]
	mov	edx, DWORD PTR tv149[ebp+4]
	jmp	$LN15@Int64x32Di
$LN3@Int64x32Di:
; Line 915
	mov	eax, DWORD PTR _uc$[ebp]
	mov	DWORD PTR _dwDivisor$[ebp], eax
; Line 916
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _uliDividend$[ebp+4], ecx
; Line 917
	mov	edx, DWORD PTR _p0$[ebp+4]
	mov	DWORD PTR _uliDividend$[ebp], edx
; Line 921
	mov	eax, DWORD PTR _dwDivisor$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv311[ebp], eax
	mov	DWORD PTR tv311[ebp+4], ecx
	mov	edx, DWORD PTR _uliDividend$[ebp+4]
	cmp	edx, DWORD PTR tv311[ebp+4]
	jb	SHORT $LN2@Int64x32Di
	ja	SHORT $LN33@Int64x32Di
	mov	eax, DWORD PTR _uliDividend$[ebp]
	cmp	eax, DWORD PTR tv311[ebp]
	jb	SHORT $LN2@Int64x32Di
$LN33@Int64x32Di:
; Line 925
	lea	ecx, DWORD PTR _p0$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _dwDivisor$[ebp]
	push	edx
	mov	eax, DWORD PTR _uliDividend$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _uliDividend$[ebp]
	push	ecx
	call	?EnlargedUnsignedDivide@@YGKT_ULARGE_INTEGER@@KPAK@Z ; EnlargedUnsignedDivide
	mov	DWORD PTR _uliResult$[ebp+4], eax
; Line 926
	jmp	SHORT $LN1@Int64x32Di
$LN2@Int64x32Di:
; Line 927
	mov	DWORD PTR _uliResult$[ebp+4], 0
$LN1@Int64x32Di:
; Line 932
	push	0
	mov	edx, DWORD PTR _dwDivisor$[ebp]
	push	edx
	mov	eax, DWORD PTR _p0$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p0$[ebp]
	push	ecx
	call	?EnlargedUnsignedDivide@@YGKT_ULARGE_INTEGER@@KPAK@Z ; EnlargedUnsignedDivide
	mov	DWORD PTR _uliResult$[ebp], eax
; Line 934
	cmp	DWORD PTR _bSign$[ebp], 0
	je	SHORT $LN29@Int64x32Di
	mov	edx, DWORD PTR _uliResult$[ebp]
	neg	edx
	mov	eax, DWORD PTR _uliResult$[ebp+4]
	adc	eax, 0
	neg	eax
	mov	DWORD PTR tv194[ebp], edx
	mov	DWORD PTR tv194[ebp+4], eax
	jmp	SHORT $LN30@Int64x32Di
$LN29@Int64x32Di:
	mov	ecx, DWORD PTR _uliResult$[ebp]
	mov	DWORD PTR tv194[ebp], ecx
	mov	edx, DWORD PTR _uliResult$[ebp+4]
	mov	DWORD PTR tv194[ebp+4], edx
$LN30@Int64x32Di:
	mov	eax, DWORD PTR tv194[ebp]
	mov	edx, DWORD PTR tv194[ebp+4]
$LN15@Int64x32Di:
; Line 935
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@Int64x32Di
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 184				; 000000b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN42@Int64x32Di:
	DD	7
	DD	$LN41@Int64x32Di
$LN41@Int64x32Di:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN34@Int64x32Di
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN35@Int64x32Di
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN36@Int64x32Di
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN37@Int64x32Di
	DD	-96					; ffffffa0H
	DD	8
	DD	$LN38@Int64x32Di
	DD	-112					; ffffff90H
	DD	8
	DD	$LN39@Int64x32Di
	DD	-128					; ffffff80H
	DD	8
	DD	$LN40@Int64x32Di
$LN40@Int64x32Di:
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN39@Int64x32Di:
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN38@Int64x32Di:
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN37@Int64x32Di:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	48					; 00000030H
	DB	0
$LN36@Int64x32Di:
	DB	120					; 00000078H
	DB	0
$LN35@Int64x32Di:
	DB	112					; 00000070H
	DB	48					; 00000030H
	DB	0
$LN34@Int64x32Di:
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	0
?Int64x32Div32@@YG_J_JJJJ@Z ENDP			; Int64x32Div32
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?EnlargedUnsignedDivide@@YGKT_ULARGE_INTEGER@@KPAK@Z
_TEXT	SEGMENT
_ulResult$ = -4						; size = 4
_Dividend$ = 8						; size = 8
_Divisor$ = 16						; size = 4
_Remainder$ = 20					; size = 4
?EnlargedUnsignedDivide@@YGKT_ULARGE_INTEGER@@KPAK@Z PROC ; EnlargedUnsignedDivide, COMDAT
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 52
	mov	eax, DWORD PTR _Dividend$[ebp]
; Line 53
	mov	edx, DWORD PTR _Dividend$[ebp+4]
; Line 54
	mov	ecx, DWORD PTR _Remainder$[ebp]
; Line 55
	div	DWORD PTR _Divisor$[ebp]
; Line 56
	or	ecx, ecx
; Line 57
	je	SHORT $label$81561
; Line 58
	mov	DWORD PTR [ecx], edx
$label$81561:
; Line 60
	mov	DWORD PTR _ulResult$[ebp], eax
; Line 62
	mov	eax, DWORD PTR _ulResult$[ebp]
; Line 63
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?EnlargedUnsignedDivide@@YGKT_ULARGE_INTEGER@@KPAK@Z ENDP ; EnlargedUnsignedDivide
_TEXT	ENDS
EXTRN	__imp__InitializeCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCritSec@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCritSec@@QAE@XZ PROC				; CCritSec::CCritSec, COMDAT
; _this$ = ecx
; Line 950
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 951
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 952
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 953
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 954
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCritSec@@QAE@XZ ENDP				; CCritSec::CCritSec
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCritSec@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCritSec@@QAE@XZ PROC				; CCritSec::~CCritSec, COMDAT
; _this$ = ecx
; Line 957
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 958
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 959
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCritSec@@QAE@XZ ENDP				; CCritSec::~CCritSec
_TEXT	ENDS
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Lock@CCritSec@@QAEXXZ
_TEXT	SEGMENT
tv83 = -20						; size = 4
_currentOwner$ = -16					; size = 4
_us$ = -12						; size = 4
_tracelevel$ = -8					; size = 4
_this$ = -4						; size = 4
?Lock@CCritSec@@QAEXXZ PROC				; CCritSec::Lock, COMDAT
; _this$ = ecx
; Line 962
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 963
	mov	DWORD PTR _tracelevel$[ebp], 3
; Line 964
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _us$[ebp], eax
; Line 965
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _currentOwner$[ebp], ecx
; Line 966
	cmp	DWORD PTR _currentOwner$[ebp], 0
	je	SHORT $LN4@Lock
	mov	edx, DWORD PTR _currentOwner$[ebp]
	cmp	edx, DWORD PTR _us$[ebp]
	je	SHORT $LN4@Lock
; Line 968
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN4@Lock
; Line 970
	mov	ecx, DWORD PTR _currentOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET $SG81908
	push	2
	push	8
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 24					; 00000018H
; Line 971
	mov	DWORD PTR _tracelevel$[ebp], 2
$LN4@Lock:
; Line 977
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 978
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], ecx
	test	edx, edx
	jne	SHORT $LN7@Lock
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN8@Lock
$LN7@Lock:
	mov	DWORD PTR tv83[ebp], 0
$LN8@Lock:
	cmp	DWORD PTR tv83[ebp], 0
	je	SHORT $LN5@Lock
; Line 980
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _us$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 982
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN5@Lock
; Line 983
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	push	OFFSET $SG81911
	mov	ecx, DWORD PTR _tracelevel$[ebp]
	push	ecx
	push	8
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
$LN5@Lock:
; Line 986
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@CCritSec@@QAEXXZ ENDP				; CCritSec::Lock
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unlock@CCritSec@@QAEXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?Unlock@CCritSec@@QAEXXZ PROC				; CCritSec::Unlock, COMDAT
; _this$ = ecx
; Line 988
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 989
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+28], eax
	cmp	DWORD PTR tv66[ebp], 0
	jne	SHORT $LN2@Unlock
; Line 991
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN1@Unlock
; Line 992
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	OFFSET $SG81917
	push	3
	push	8
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
$LN1@Unlock:
; Line 995
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN2@Unlock:
; Line 997
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 998
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@CCritSec@@QAEXXZ ENDP				; CCritSec::Unlock
_TEXT	ENDS
PUBLIC	?DbgLockTrace@@YGXPAVCCritSec@@H@Z		; DbgLockTrace
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DbgLockTrace@@YGXPAVCCritSec@@H@Z
_TEXT	SEGMENT
_pcCrit$ = 8						; size = 4
_fTrace$ = 12						; size = 4
?DbgLockTrace@@YGXPAVCCritSec@@H@Z PROC			; DbgLockTrace, COMDAT
; Line 1001
	push	ebp
	mov	ebp, esp
; Line 1002
	mov	eax, DWORD PTR _pcCrit$[ebp]
	mov	ecx, DWORD PTR _fTrace$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 1003
	pop	ebp
	ret	8
?DbgLockTrace@@YGXPAVCCritSec@@H@Z ENDP			; DbgLockTrace
_TEXT	ENDS
PUBLIC	?CritCheckIn@@YGHPAVCCritSec@@@Z		; CritCheckIn
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CritCheckIn@@YGHPAVCCritSec@@@Z
_TEXT	SEGMENT
_pcCrit$ = 8						; size = 4
?CritCheckIn@@YGHPAVCCritSec@@@Z PROC			; CritCheckIn, COMDAT
; Line 1006
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1007
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pcCrit$[ebp]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx+24]
	sete	dl
	mov	eax, edx
; Line 1008
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CritCheckIn@@YGHPAVCCritSec@@@Z ENDP			; CritCheckIn
_TEXT	ENDS
PUBLIC	?CritCheckIn@@YGHPBVCCritSec@@@Z		; CritCheckIn
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CritCheckIn@@YGHPBVCCritSec@@@Z
_TEXT	SEGMENT
_pcCrit$ = 8						; size = 4
?CritCheckIn@@YGHPBVCCritSec@@@Z PROC			; CritCheckIn, COMDAT
; Line 1011
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1012
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pcCrit$[ebp]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx+24]
	sete	dl
	mov	eax, edx
; Line 1013
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CritCheckIn@@YGHPBVCCritSec@@@Z ENDP			; CritCheckIn
_TEXT	ENDS
PUBLIC	?CritCheckOut@@YGHPAVCCritSec@@@Z		; CritCheckOut
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CritCheckOut@@YGHPAVCCritSec@@@Z
_TEXT	SEGMENT
_pcCrit$ = 8						; size = 4
?CritCheckOut@@YGHPAVCCritSec@@@Z PROC			; CritCheckOut, COMDAT
; Line 1016
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1017
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pcCrit$[ebp]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx+24]
	setne	dl
	mov	eax, edx
; Line 1018
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CritCheckOut@@YGHPAVCCritSec@@@Z ENDP			; CritCheckOut
_TEXT	ENDS
PUBLIC	?CritCheckOut@@YGHPBVCCritSec@@@Z		; CritCheckOut
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CritCheckOut@@YGHPBVCCritSec@@@Z
_TEXT	SEGMENT
_pcCrit$ = 8						; size = 4
?CritCheckOut@@YGHPBVCCritSec@@@Z PROC			; CritCheckOut, COMDAT
; Line 1021
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1022
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pcCrit$[ebp]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx+24]
	setne	dl
	mov	eax, edx
; Line 1023
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CritCheckOut@@YGHPBVCCritSec@@@Z ENDP			; CritCheckOut
_TEXT	ENDS
PUBLIC	_WriteBSTR@8
EXTRN	__imp__SysAllocString@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _WriteBSTR@8
_TEXT	SEGMENT
_pstrDest$ = 8						; size = 4
_szSrc$ = 12						; size = 4
_WriteBSTR@8 PROC					; COMDAT
; Line 1028
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1029
	mov	esi, esp
	mov	eax, DWORD PTR _szSrc$[ebp]
	push	eax
	call	DWORD PTR __imp__SysAllocString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1030
	mov	edx, DWORD PTR _pstrDest$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@WriteBSTR
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN2@WriteBSTR
$LN1@WriteBSTR:
; Line 1031
	xor	eax, eax
$LN2@WriteBSTR:
; Line 1032
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_WriteBSTR@8 ENDP
_TEXT	ENDS
PUBLIC	_FreeBSTR@4
EXTRN	__imp__SysFreeString@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _FreeBSTR@4
_TEXT	SEGMENT
_pstr$ = 8						; size = 4
_FreeBSTR@4 PROC					; COMDAT
; Line 1036
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1037
	mov	eax, DWORD PTR _pstr$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@FreeBSTR
	mov	eax, 1
	jmp	SHORT $LN2@FreeBSTR
$LN1@FreeBSTR:
; Line 1038
	mov	esi, esp
	mov	ecx, DWORD PTR _pstr$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1039
	xor	eax, eax
$LN2@FreeBSTR:
; Line 1040
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_FreeBSTR@4 ENDP
_TEXT	ENDS
PUBLIC	_AMGetWideString@8
EXTRN	_memcpy:PROC
EXTRN	__imp__CoTaskMemAlloc@4:PROC
EXTRN	__imp__IsBadWritePtr@8:PROC
EXTRN	__imp__IsBadReadPtr@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _AMGetWideString@8
_TEXT	SEGMENT
_nameLen$ = -4						; size = 4
_psz$ = 8						; size = 4
_ppszReturn$ = 12					; size = 4
_AMGetWideString@8 PROC					; COMDAT
; Line 1049
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1050
	cmp	DWORD PTR _ppszReturn$[ebp], 0
	jne	SHORT $LN4@AMGetWideS
	mov	eax, -2147467261			; 80004003H
	jmp	$LN5@AMGetWideS
$LN4@AMGetWideS:
; Line 1051
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppszReturn$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@AMGetWideS
	push	1051					; 0000041bH
	push	OFFSET $SG81954
	push	OFFSET $SG81955
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@AMGetWideS:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppszReturn$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@AMGetWideS
	push	1051					; 0000041bH
	push	OFFSET $SG81959
	push	OFFSET $SG81960
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@AMGetWideS:
; Line 1052
	mov	esi, esp
	mov	edx, DWORD PTR _psz$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	eax, DWORD PTR [eax+eax+2]
	mov	DWORD PTR _nameLen$[ebp], eax
; Line 1053
	mov	esi, esp
	mov	ecx, DWORD PTR _nameLen$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ppszReturn$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1054
	mov	eax, DWORD PTR _ppszReturn$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@AMGetWideS
; Line 1055
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN5@AMGetWideS
$LN1@AMGetWideS:
; Line 1057
	mov	ecx, DWORD PTR _nameLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psz$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppszReturn$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1058
	xor	eax, eax
$LN5@AMGetWideS:
; Line 1059
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_AMGetWideString@8 ENDP
_TEXT	ENDS
PUBLIC	?WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z ; WaitDispatchingMessages
EXTRN	__imp__PostThreadMessageW@16:PROC
EXTRN	__imp__RegisterWindowMessageW@4:PROC
EXTRN	__imp__GetQueueStatus@4:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__GetThreadPriority@4:PROC
EXTRN	__imp__GetCurrentThread@0:PROC
EXTRN	__imp__DispatchMessageW@4:PROC
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	__imp__GetTickCount@0:PROC
;	COMDAT ?uMsgId@?1??WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z@4IA
_BSS	SEGMENT
?uMsgId@?1??WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z@4IA DD 01H DUP (?) ; `WaitDispatchingMessages'::`2'::uMsgId
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z
_TEXT	SEGMENT
_msg$82012 = -116					; size = 28
_dwDiff$81999 = -84					; size = 4
_dwNow$81998 = -80					; size = 4
_msg$81992 = -72					; size = 28
_dwTimeOut$81987 = -40					; size = 4
_nCount$81984 = -36					; size = 4
_hObjects$ = -28					; size = 8
_dwThreadPriority$ = -16				; size = 4
_dwStart$ = -12						; size = 4
_dwResult$ = -8						; size = 4
_bPeeked$ = -4						; size = 4
_hObject$ = 8						; size = 4
_dwWait$ = 12						; size = 4
_hwnd$ = 16						; size = 4
_uMsg$ = 20						; size = 4
_hEvent$ = 24						; size = 4
?WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z PROC	; WaitDispatchingMessages, COMDAT
; Line 1072
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1073
	mov	DWORD PTR _bPeeked$[ebp], 0
; Line 1080
	mov	eax, DWORD PTR _hObject$[ebp]
	mov	DWORD PTR _hObjects$[ebp], eax
	mov	ecx, DWORD PTR _hEvent$[ebp]
	mov	DWORD PTR _hObjects$[ebp+4], ecx
; Line 1081
	cmp	DWORD PTR _dwWait$[ebp], -1
	je	SHORT $LN21@WaitDispat
	cmp	DWORD PTR _dwWait$[ebp], 0
	je	SHORT $LN21@WaitDispat
; Line 1082
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwStart$[ebp], eax
$LN21@WaitDispat:
; Line 1085
	xor	edx, edx
	cmp	DWORD PTR _hEvent$[ebp], 0
	setne	dl
	add	edx, 1
	mov	DWORD PTR _nCount$81984[ebp], edx
; Line 1089
	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _hObjects$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nCount$81984[ebp]
	push	ecx
	call	DWORD PTR __imp__WaitForMultipleObjects@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwResult$[ebp], eax
; Line 1090
	mov	edx, DWORD PTR _dwResult$[ebp]
	cmp	edx, DWORD PTR _nCount$81984[ebp]
	jae	SHORT $LN19@WaitDispat
; Line 1091
	jmp	$LN20@WaitDispat
$LN19@WaitDispat:
; Line 1094
	mov	eax, DWORD PTR _dwWait$[ebp]
	mov	DWORD PTR _dwTimeOut$81987[ebp], eax
; Line 1095
	cmp	DWORD PTR _dwTimeOut$81987[ebp], 10	; 0000000aH
	jbe	SHORT $LN18@WaitDispat
; Line 1096
	mov	DWORD PTR _dwTimeOut$81987[ebp], 10	; 0000000aH
$LN18@WaitDispat:
; Line 1104
	xor	ecx, ecx
	cmp	DWORD PTR _hwnd$[ebp], 0
	setne	cl
	lea	ecx, DWORD PTR [ecx*8+64]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _dwTimeOut$81987[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _hObjects$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nCount$81984[ebp]
	push	ecx
	call	DWORD PTR __imp__MsgWaitForMultipleObjects@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwResult$[ebp], eax
; Line 1106
	mov	edx, DWORD PTR _dwResult$[ebp]
	cmp	edx, DWORD PTR _nCount$81984[ebp]
	je	SHORT $LN16@WaitDispat
	cmp	DWORD PTR _dwResult$[ebp], 258		; 00000102H
	jne	$LN17@WaitDispat
	mov	eax, DWORD PTR _dwTimeOut$81987[ebp]
	cmp	eax, DWORD PTR _dwWait$[ebp]
	je	$LN17@WaitDispat
$LN16@WaitDispat:
; Line 1108
	cmp	DWORD PTR _hwnd$[ebp], 0
	je	SHORT $LN15@WaitDispat
$LN14@WaitDispat:
; Line 1109
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _uMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	lea	ecx, DWORD PTR _msg$81992[ebp]
	push	ecx
	call	DWORD PTR __imp__PeekMessageW@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN15@WaitDispat
; Line 1110
	mov	esi, esp
	lea	edx, DWORD PTR _msg$81992[ebp]
	push	edx
	call	DWORD PTR __imp__DispatchMessageW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1111
	jmp	SHORT $LN14@WaitDispat
$LN15@WaitDispat:
; Line 1115
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$81992[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageW@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1117
	cmp	DWORD PTR _dwWait$[ebp], -1
	je	SHORT $LN12@WaitDispat
	cmp	DWORD PTR _dwWait$[ebp], 0
	je	SHORT $LN12@WaitDispat
; Line 1118
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwNow$81998[ebp], eax
; Line 1121
	mov	ecx, DWORD PTR _dwNow$81998[ebp]
	sub	ecx, DWORD PTR _dwStart$[ebp]
	mov	DWORD PTR _dwDiff$81999[ebp], ecx
; Line 1122
	mov	edx, DWORD PTR _dwDiff$81999[ebp]
	cmp	edx, DWORD PTR _dwWait$[ebp]
	jbe	SHORT $LN11@WaitDispat
; Line 1123
	mov	DWORD PTR _dwWait$[ebp], 0
; Line 1124
	jmp	SHORT $LN10@WaitDispat
$LN11@WaitDispat:
; Line 1125
	mov	eax, DWORD PTR _dwWait$[ebp]
	sub	eax, DWORD PTR _dwDiff$81999[ebp]
	mov	DWORD PTR _dwWait$[ebp], eax
$LN10@WaitDispat:
; Line 1127
	mov	ecx, DWORD PTR _dwNow$81998[ebp]
	mov	DWORD PTR _dwStart$[ebp], ecx
$LN12@WaitDispat:
; Line 1129
	cmp	DWORD PTR _bPeeked$[ebp], 0
	jne	SHORT $LN9@WaitDispat
; Line 1132
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThread@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__GetThreadPriority@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwThreadPriority$[ebp], eax
; Line 1133
	cmp	DWORD PTR _dwThreadPriority$[ebp], 2
	jae	SHORT $LN8@WaitDispat
; Line 1134
	mov	esi, esp
	push	2
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentThread@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__SetThreadPriority@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@WaitDispat:
; Line 1136
	mov	DWORD PTR _bPeeked$[ebp], 1
$LN9@WaitDispat:
; Line 1138
	jmp	SHORT $LN7@WaitDispat
$LN17@WaitDispat:
; Line 1139
	jmp	SHORT $LN20@WaitDispat
$LN7@WaitDispat:
; Line 1141
	jmp	$LN21@WaitDispat
$LN20@WaitDispat:
; Line 1142
	cmp	DWORD PTR _bPeeked$[ebp], 0
	je	$LN6@WaitDispat
; Line 1143
	mov	esi, esp
	mov	edx, DWORD PTR _dwThreadPriority$[ebp]
	push	edx
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentThread@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__SetThreadPriority@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1144
	mov	esi, esp
	push	8
	call	DWORD PTR __imp__GetQueueStatus@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	eax, ax
	and	eax, 8
	je	$LN6@WaitDispat
; Line 1145
	cmp	DWORD PTR ?uMsgId@?1??WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z@4IA, 0
	jne	SHORT $LN4@WaitDispat
; Line 1146
	mov	esi, esp
	push	OFFSET $SG82010
	call	DWORD PTR __imp__RegisterWindowMessageW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?uMsgId@?1??WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z@4IA, eax
$LN4@WaitDispat:
; Line 1148
	cmp	DWORD PTR ?uMsgId@?1??WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z@4IA, 0
	je	SHORT $LN3@WaitDispat
$LN2@WaitDispat:
; Line 1151
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR ?uMsgId@?1??WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z@4IA
	push	ecx
	mov	edx, DWORD PTR ?uMsgId@?1??WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z@4IA
	push	edx
	push	-1
	lea	eax, DWORD PTR _msg$82012[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageW@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@WaitDispat
; Line 1152
	jmp	SHORT $LN2@WaitDispat
$LN3@WaitDispat:
; Line 1154
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR ?uMsgId@?1??WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z@4IA
	push	ecx
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__PostThreadMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@WaitDispat:
; Line 1157
	mov	eax, DWORD PTR _dwResult$[ebp]
; Line 1158
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@WaitDispat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN29@WaitDispat:
	DD	3
	DD	$LN28@WaitDispat
$LN28@WaitDispat:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN25@WaitDispat
	DD	-72					; ffffffb8H
	DD	28					; 0000001cH
	DD	$LN26@WaitDispat
	DD	-116					; ffffff8cH
	DD	28					; 0000001cH
	DD	$LN27@WaitDispat
$LN27@WaitDispat:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN26@WaitDispat:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN25@WaitDispat:
	DB	104					; 00000068H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z ENDP	; WaitDispatchingMessages
_TEXT	ENDS
PUBLIC	_HRESULT_FROM_WIN32@4
PUBLIC	?AmGetLastErrorToHResult@@YGJXZ			; AmGetLastErrorToHResult
EXTRN	__imp__GetLastError@0:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AmGetLastErrorToHResult@@YGJXZ
_TEXT	SEGMENT
_dwLastError$ = -4					; size = 4
?AmGetLastErrorToHResult@@YGJXZ PROC			; AmGetLastErrorToHResult, COMDAT
; Line 1161
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1162
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwLastError$[ebp], eax
; Line 1163
	cmp	DWORD PTR _dwLastError$[ebp], 0
	je	SHORT $LN2@AmGetLastE
; Line 1165
	mov	eax, DWORD PTR _dwLastError$[ebp]
	push	eax
	call	_HRESULT_FROM_WIN32@4
	jmp	SHORT $LN3@AmGetLastE
; Line 1167
	jmp	SHORT $LN3@AmGetLastE
$LN2@AmGetLastE:
; Line 1169
	mov	eax, -2147467259			; 80004005H
$LN3@AmGetLastE:
; Line 1171
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AmGetLastErrorToHResult@@YGJXZ ENDP			; AmGetLastErrorToHResult
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _HRESULT_FROM_WIN32@4
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32@4 PROC				; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winerror.h
; Line 23841
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	cmp	DWORD PTR _x$[ebp], 0
	jg	SHORT $LN3@HRESULT_FR
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 65535				; 0000ffffH
	or	ecx, 458752				; 00070000H
	or	ecx, -2147483648			; 80000000H
	mov	DWORD PTR tv68[ebp], ecx
$LN4@HRESULT_FR:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
_HRESULT_FROM_WIN32@4 ENDP
_TEXT	ENDS
PUBLIC	?QzAtlComPtrAssign@@YGPAUIUnknown@@PAPAU1@PAU1@@Z ; QzAtlComPtrAssign
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QzAtlComPtrAssign@@YGPAUIUnknown@@PAPAU1@PAU1@@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_lp$ = 12						; size = 4
?QzAtlComPtrAssign@@YGPAUIUnknown@@PAPAU1@PAU1@@Z PROC	; QzAtlComPtrAssign, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.cpp
; Line 1174
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1175
	cmp	DWORD PTR _lp$[ebp], 0
	je	SHORT $LN2@QzAtlComPt
; Line 1176
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _lp$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@QzAtlComPt:
; Line 1177
	mov	ecx, DWORD PTR _pp$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@QzAtlComPt
; Line 1178
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@QzAtlComPt:
; Line 1179
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR _lp$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1180
	mov	eax, DWORD PTR _lp$[ebp]
; Line 1181
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?QzAtlComPtrAssign@@YGPAUIUnknown@@PAPAU1@PAU1@@Z ENDP	; QzAtlComPtrAssign
_TEXT	ENDS
PUBLIC	?TimeKillSynchronousFlagAvailable@@YG_NXZ	; TimeKillSynchronousFlagAvailable
PUBLIC	?CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z	; CompatibleTimeSetEvent
EXTRN	__imp__timeSetEvent@20:PROC
;	COMDAT ?fTimeKillSynchronousFlagAvailable@?2??CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z@4_NA
_BSS	SEGMENT
?fTimeKillSynchronousFlagAvailable@?2??CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z@4_NA DB 01H DUP (?) ; `CompatibleTimeSetEvent'::`3'::fTimeKillSynchronousFlagAvailable
_BSS	ENDS
;	COMDAT ?fCheckedVersion@?2??CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z@4_NA
_BSS	SEGMENT
?fCheckedVersion@?2??CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z@4_NA DB 01H DUP (?) ; `CompatibleTimeSetEvent'::`3'::fCheckedVersion
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z
_TEXT	SEGMENT
_uDelay$ = 8						; size = 4
_uResolution$ = 12					; size = 4
_lpTimeProc$ = 16					; size = 4
_dwUser$ = 20						; size = 4
_fuEvent$ = 24						; size = 4
?CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z PROC	; CompatibleTimeSetEvent, COMDAT
; Line 1201
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1207
	movzx	eax, BYTE PTR ?fCheckedVersion@?2??CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z@4_NA
	test	eax, eax
	jne	SHORT $LN2@Compatible
; Line 1208
	call	?TimeKillSynchronousFlagAvailable@@YG_NXZ ; TimeKillSynchronousFlagAvailable
	mov	BYTE PTR ?fTimeKillSynchronousFlagAvailable@?2??CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z@4_NA, al
; Line 1209
	mov	BYTE PTR ?fCheckedVersion@?2??CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z@4_NA, 1
$LN2@Compatible:
; Line 1212
	movzx	ecx, BYTE PTR ?fTimeKillSynchronousFlagAvailable@?2??CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z@4_NA
	test	ecx, ecx
	je	SHORT $LN1@Compatible
; Line 1213
	mov	edx, DWORD PTR _fuEvent$[ebp]
	or	edx, 256				; 00000100H
	mov	DWORD PTR _fuEvent$[ebp], edx
$LN1@Compatible:
; Line 1218
	mov	esi, esp
	mov	eax, DWORD PTR _fuEvent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwUser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpTimeProc$[ebp]
	push	edx
	mov	eax, DWORD PTR _uResolution$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uDelay$[ebp]
	push	ecx
	call	DWORD PTR __imp__timeSetEvent@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1219
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	20					; 00000014H
?CompatibleTimeSetEvent@@YGIIIP6GXIIKKK@ZKI@Z ENDP	; CompatibleTimeSetEvent
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetVersionExW@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?TimeKillSynchronousFlagAvailable@@YG_NXZ
_TEXT	SEGMENT
_osverinfo$ = -284					; size = 276
__$ArrayPad$ = -4					; size = 4
?TimeKillSynchronousFlagAvailable@@YG_NXZ PROC		; TimeKillSynchronousFlagAvailable, COMDAT
; Line 1222
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1225
	mov	DWORD PTR _osverinfo$[ebp], 276		; 00000114H
; Line 1227
	mov	esi, esp
	lea	eax, DWORD PTR _osverinfo$[ebp]
	push	eax
	call	DWORD PTR __imp__GetVersionExW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@TimeKillSy
; Line 1233
	cmp	DWORD PTR _osverinfo$[ebp+4], 5
	ja	SHORT $LN1@TimeKillSy
	cmp	DWORD PTR _osverinfo$[ebp+4], 5
	jne	SHORT $LN3@TimeKillSy
	cmp	DWORD PTR _osverinfo$[ebp+8], 1
	jb	SHORT $LN3@TimeKillSy
$LN1@TimeKillSy:
; Line 1234
	mov	al, 1
	jmp	SHORT $LN4@TimeKillSy
$LN3@TimeKillSy:
; Line 1238
	xor	al, al
$LN4@TimeKillSy:
; Line 1239
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@TimeKillSy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@TimeKillSy:
	DD	1
	DD	$LN7@TimeKillSy
$LN7@TimeKillSy:
	DD	-284					; fffffee4H
	DD	276					; 00000114H
	DD	$LN6@TimeKillSy
$LN6@TimeKillSy:
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
?TimeKillSynchronousFlagAvailable@@YG_NXZ ENDP		; TimeKillSynchronousFlagAvailable
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetHeadPosition@?$CGenericList@VCMsg@@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeadPosition@?$CGenericList@VCMsg@@@@QBEPAU__POSITION@@XZ PROC ; CGenericList<CMsg>::GetHeadPosition, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxlist.h
; Line 508
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHeadPosition@?$CGenericList@VCMsg@@@@QBEPAU__POSITION@@XZ ENDP ; CGenericList<CMsg>::GetHeadPosition
_TEXT	ENDS
EXTRN	?GetNextI@CBaseList@@IBEPAXAAPAU__POSITION@@@Z:PROC ; CBaseList::GetNextI
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetNext@?$CGenericList@VCMsg@@@@QBEPAVCMsg@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rp$ = 8						; size = 4
?GetNext@?$CGenericList@VCMsg@@@@QBEPAVCMsg@@AAPAU__POSITION@@@Z PROC ; CGenericList<CMsg>::GetNext, COMDAT
; _this$ = ecx
; Line 512
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextI@CBaseList@@IBEPAXAAPAU__POSITION@@@Z ; CBaseList::GetNextI
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNext@?$CGenericList@VCMsg@@@@QBEPAVCMsg@@AAPAU__POSITION@@@Z ENDP ; CGenericList<CMsg>::GetNext
_TEXT	ENDS
EXTRN	?RemoveHeadI@CBaseList@@IAEPAXXZ:PROC		; CBaseList::RemoveHeadI
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?RemoveHead@?$CGenericList@VCMsg@@@@QAEPAVCMsg@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveHead@?$CGenericList@VCMsg@@@@QAEPAVCMsg@@XZ PROC	; CGenericList<CMsg>::RemoveHead, COMDAT
; _this$ = ecx
; Line 517
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveHeadI@CBaseList@@IAEPAXXZ	; CBaseList::RemoveHeadI
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveHead@?$CGenericList@VCMsg@@@@QAEPAVCMsg@@XZ ENDP	; CGenericList<CMsg>::RemoveHead
_TEXT	ENDS
END
