; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Downloads\MediaPoint\src\filters\BaseClasses\amfilter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
CONST	SEGMENT
$SG81616 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81617 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81621 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81622 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG81633 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81634 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81638 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81639 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG81658 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81659 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81663 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81664 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG81726 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81727 DB	'm', 00H, '_', 00H, 'p', 00H, 'G', 00H, 'r', 00H, 'a', 00H
	DB	'p', 00H, 'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG81736 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81737 DB	'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG81755 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81756 DB	'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG81765 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81766 DB	'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG81776 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81777 DB	'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG81792 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81793 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81797 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81798 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG81809 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81810 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81814 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81815 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG81834 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81835 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81839 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81840 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG81925 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81926 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81930 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81931 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG81947 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81948 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81952 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81953 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG81962 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81963 DB	'p', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H
	ORG $+2
$SG81978 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81979 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG81983 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81984 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82001 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82002 DB	'm', 00H, '_', 00H, 'p', 00H, 'S', 00H, 'i', 00H, 'n', 00H
	DB	'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG82015 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82016 DB	'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
$SG82066 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82067 DB	'S', 00H, 'U', 00H, 'C', 00H, 'C', 00H, 'E', 00H, 'E', 00H
	DB	'D', 00H, 'E', 00H, 'D', 00H, '(', 00H, 'h', 00H, 'r', 00H, ')'
	DB	00H, 00H, 00H
$SG82082 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82083 DB	'S', 00H, 'U', 00H, 'C', 00H, 'C', 00H, 'E', 00H, 'E', 00H
	DB	'D', 00H, 'E', 00H, 'D', 00H, '(', 00H, 'h', 00H, 'r', 00H, ')'
	DB	00H, 00H, 00H
$SG82095 DB	'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'C', 00H, 'a', 00H
	DB	'c', 00H, 'h', 00H, 'e', 00H, 00H, 00H
$SG82096 DB	'CEnumPins', 00H
	ORG $+2
$SG82098 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82099 DB	'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG82103 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82104 DB	'm', 00H, '_', 00H, 'P', 00H, 'o', 00H, 's', 00H, 'i', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, 'm', 00H, '_', 00H, 'P', 00H, 'i', 00H, 'n', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG82147 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82148 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82152 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82153 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82175 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82176 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82180 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82181 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82183 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82184 DB	'p', 00H, 'p', 00H, 'P', 00H, 'i', 00H, 'n', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG82189 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82190 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82207 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82208 DB	'c', 00H, 'F', 00H, 'e', 00H, 't', 00H, 'c', 00H, 'h', 00H
	DB	'e', 00H, 'd', 00H, '=', 00H, '=', 00H, '0', 00H, 00H, 00H
$SG82235 DB	'CEnumMediaTypes', 00H
$SG82237 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82238 DB	'p', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H
	ORG $+2
$SG82280 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82281 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82285 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82286 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82308 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82309 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82313 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82314 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82321 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82322 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82367 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82368 DB	'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG82370 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82371 DB	'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG82396 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82397 DB	'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG82399 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82400 DB	'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG82411 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82412 DB	'm', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H
	DB	'E', 00H, 00H, 00H
	ORG $+2
$SG82415 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82416 DB	'm', 00H, '_', 00H, 'c', 00H, 'R', 00H, 'e', 00H, 'f', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG82432 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82433 DB	'I', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, 'I', 00H, 'n'
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, '&', 00H, 'm', 00H, '_', 00H, 'c', 00H, 'R'
	DB	00H, 'e', 00H, 'f', 00H, ')', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG82438 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG82439 DB	'I', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, 'D', 00H, 'e'
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, '&', 00H, 'm', 00H, '_', 00H, 'c', 00H, 'R'
	DB	00H, 'e', 00H, 'f', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG82449 DB	'B', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 'P', 00H, 'i', 00H
	DB	'n', 00H, 00H, 00H
$SG82454 DB	'B', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 'P', 00H, 'i', 00H
	DB	'n', 00H, 00H, 00H
$SG82457 DB	'T', 00H, 'r', 00H, 'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'P', 00H
	DB	'i', 00H, 'n', 00H, 's', 00H, ' ', 00H, ':', 00H, 00H, 00H
	ORG $+2
$SG82458 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '<', 00H, '%', 00H
	DB	'l', 00H, 's', 00H, '>', 00H, 00H, 00H
$SG82459 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, '<', 00H, '%', 00H
	DB	'l', 00H, 's', 00H, '>', 00H, 00H, 00H
$SG82466 DB	'T', 00H, 'r', 00H, 'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'm', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, ' '
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ':', 00H, 00H, 00H
	ORG $+2
$SG82467 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'j', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, ':', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'h', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG82468 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 's', 00H, 'u', 00H
	DB	'b', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' '
	DB	00H, ' ', 00H, ':', 00H, ' ', 00H, ' ', 00H, '%', 00H, 'h', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG82479 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82480 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82483 DB	'A', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'y', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG82494 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, 'g', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG82497 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG82498 DB	'(', 00H, '(', 00H, '(', 00H, 'H', 00H, 'R', 00H, 'E', 00H
	DB	'S', 00H, 'U', 00H, 'L', 00H, 'T', 00H, ')', 00H, '(', 00H, 'B'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82500 DB	'C', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 's', 00H, 'u'
	DB	00H, 'c', 00H, 'c', 00H, 'e', 00H, 'e', 00H, 'd', 00H, 'e', 00H
	DB	'd', 00H, 00H, 00H
	ORG $+2
$SG82508 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82509 DB	'C', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'I', 00H, 'n', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG82513 DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
$SG82516 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82517 DB	'(', 00H, '(', 00H, '(', 00H, 'H', 00H, 'R', 00H, 'E', 00H
	DB	'S', 00H, 'U', 00H, 'L', 00H, 'T', 00H, ')', 00H, '(', 00H, 'B'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82527 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm'
	DB	00H, 'p', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG82537 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG82538 DB	'(', 00H, '(', 00H, '(', 00H, 'H', 00H, 'R', 00H, 'E', 00H
	DB	'S', 00H, 'U', 00H, 'L', 00H, 'T', 00H, ')', 00H, '(', 00H, 'B'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82563 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82564 DB	'u', 00H, 'l', 00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H
	DB	'a', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H
$SG82566 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82567 DB	'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H
	DB	'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG82586 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82587 DB	'p', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 'e', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'P', 00H, 'i', 00H, 'n', 00H, 00H, 00H
$SG82603 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82604 DB	'p', 00H, 'E', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'M', 00H
	DB	'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, 's', 00H, 00H, 00H
$SG82629 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG82630 DB	'(', 00H, 'p', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'P', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'R'
	DB	00H, '_', 00H, 'O', 00H, 'U', 00H, 'T', 00H, 'P', 00H, 'U', 00H
	DB	'T', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '('
	DB	00H, 'p', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'P', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'R', 00H, '_'
	DB	00H, 'I', 00H, 'N', 00H, 'P', 00H, 'U', 00H, 'T', 00H, ')', 00H
	DB	00H, 00H
$SG82632 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG82633 DB	'(', 00H, 'm', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'I', 00H, 'N'
	DB	00H, 'D', 00H, 'I', 00H, 'R', 00H, '_', 00H, 'O', 00H, 'U', 00H
	DB	'T', 00H, 'P', 00H, 'U', 00H, 'T', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, '(', 00H, 'm', 00H, '_', 00H, 'd', 00H
	DB	'i', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P'
	DB	00H, 'I', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'R', 00H, '_', 00H
	DB	'I', 00H, 'N', 00H, 'P', 00H, 'U', 00H, 'T', 00H, ')', 00H, 00H
	DB	00H
$SG82651 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82652 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82656 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82657 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82670 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82671 DB	'(', 00H, '(', 00H, '(', 00H, 'H', 00H, 'R', 00H, 'E', 00H
	DB	'S', 00H, 'U', 00H, 'L', 00H, 'T', 00H, ')', 00H, '(', 00H, 'B'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82678 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82679 DB	'(', 00H, '(', 00H, '(', 00H, 'H', 00H, 'R', 00H, 'E', 00H
	DB	'S', 00H, 'U', 00H, 'L', 00H, 'T', 00H, ')', 00H, '(', 00H, 'B'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82692 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'm', 00H
	DB	'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, ' ', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H
	DB	'p', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, '.', 00H, 00H, 00H
	ORG $+2
$SG82695 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82696 DB	'(', 00H, '(', 00H, '(', 00H, 'H', 00H, 'R', 00H, 'E', 00H
	DB	'S', 00H, 'U', 00H, 'L', 00H, 'T', 00H, ')', 00H, '(', 00H, 'B'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82710 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82711 DB	'C', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'I', 00H, 'n', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'p', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG82716 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG82717 DB	'"', 00H, 'W', 00H, 'A', 00H, 'R', 00H, 'N', 00H, 'I', 00H
	DB	'N', 00H, 'G', 00H, ':', 00H, ' ', 00H, 'B', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'k', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '(', 00H, ')', 00H, ' ', 00H, 'f'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'C', 00H, 'B', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ':', 00H, ':', 00H
	DB	'D', 00H, 'i', 00H, 's', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'n'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '(', 00H, ')', 00H, '.', 00H
	DB	'"', 00H, 00H, 00H
$SG82730 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82731 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82735 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82736 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82742 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82743 DB	'*', 00H, 'p', 00H, 'p', 00H, 'P', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG82754 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82755 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82759 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82760 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82778 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82779 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82783 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82784 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82798 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82799 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82803 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82804 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82818 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82819 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82834 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82835 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82839 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82840 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG82885 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82886 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82893 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82894 DB	'"', 00H, 'I', 00H, 'Q', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't'
	DB	00H, 'r', 00H, 'o', 00H, 'l', 00H, ':', 00H, ':', 00H, 'N', 00H
	DB	'o', 00H, 't', 00H, 'i', 00H, 'f', 00H, 'y', 00H, ' ', 00H, 'n'
	DB	00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '-', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'd', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H
	DB	' ', 00H, 'C', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'P'
	DB	00H, 'i', 00H, 'n', 00H, '.', 00H, ' ', 00H, ' ', 00H, '(', 00H
	DB	'I', 00H, 'G', 00H, 'N', 00H, 'O', 00H, 'R', 00H, 'E', 00H, ' '
	DB	00H, 'i', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'K', 00H, ')', 00H
	DB	'"', 00H, 00H, 00H
	ORG $+2
$SG82912 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82913 DB	'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 00H, 00H
$SG82929 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82930 DB	'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 00H, 00H
$SG83091 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83092 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83096 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83097 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG83105 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83106 DB	'm', 00H, '_', 00H, 'p', 00H, 'A', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, 00H, 00H
	ORG $+2
$SG83118 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83119 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83142 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83143 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83145 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83146 DB	'p', 00H, 'S', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
$SG83184 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83185 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83212 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83213 DB	'p', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG83231 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83232 DB	'!', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'F', 00H, 'l', 00H
	DB	'u', 00H, 's', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H
	ORG $+2
$SG83241 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83242 DB	'm', 00H, '_', 00H, 'b', 00H, 'F', 00H, 'l', 00H, 'u', 00H
	DB	's', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG83255 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83256 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83257 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83258 DB	'"', 00H, 'I', 00H, 'Q', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, ':', 00H, ':', 00H, 'N', 00H, 'o'
	DB	00H, 't', 00H, 'i', 00H, 'f', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'p', 00H, 'i'
	DB	00H, 'n', 00H, '"', 00H, 00H, 00H
$SG83274 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83275 DB	'I', 00H, 's', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, '(', 00H, ')'
	DB	00H, 00H, 00H
$SG83287 DB	'P', 00H, 'a', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'Q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	'i', 00H, 'f', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 'g', 00H, 'h', 00H, ' ', 00H, 't', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 's', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 00H, 00H
	ORG $+2
$SG83305 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83306 DB	'p', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG83324 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83325 DB	'p', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG83350 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83351 DB	'l', 00H, 'R', 00H, 'e', 00H, 'f', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG83352 DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'U', 00H, 'n', 00H
	DB	'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H, 'n', 00H, ' ', 00H, '%'
	DB	00H, 'X', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'f', 00H, '-', 00H
	DB	'-', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'd', 00H, 00H
	DB	00H
$SG83356 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83357 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, 00H, 00H
	ORG $+2
$SG83372 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83373 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83377 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83378 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG83380 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83381 DB	'm', 00H, '_', 00H, 'p', 00H, 'B', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG83394 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83395 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83399 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83400 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG83404 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83405 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83409 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83410 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG83423 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83424 DB	'p', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'E', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG83431 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83432 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83436 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83437 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83439 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83440 DB	'*', 00H, 'p', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H
	DB	'E', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '*', 00H, 'p', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H
	DB	'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG83449 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83450 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83454 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83455 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG83459 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83460 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83464 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83465 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG83475 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83476 DB	'p', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'E', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG83481 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83482 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83486 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83487 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83489 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83490 DB	'*', 00H, 'p', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H
	DB	'E', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '*', 00H, 'p', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H
	DB	'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG83545 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83546 DB	'l', 00H, 'A', 00H, 'c', 00H, 't', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'G', 00H, 'e'
	DB	00H, 't', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG83555 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83556 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83560 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83561 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG83563 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83564 DB	'p', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H
	DB	'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG83567 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83568 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, 00H, 00H
	ORG $+2
$SG83571 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83572 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG83582 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83583 DB	'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H
	DB	'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG83587 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83588 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG83745 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83746 DB	':', 00H, ':', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H
	DB	'e', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'U', 00H, 'n', 00H
	DB	'b', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'O', 00H, 'u'
	DB	00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'P', 00H, 'i', 00H
	DB	'n', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')'
	DB	00H, 00H, 00H
$SG83749 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83750 DB	':', 00H, ':', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H
	DB	'e', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'N', 00H, 'o', 00H
	DB	't', 00H, 'i', 00H, 'f', 00H, 'y', 00H, 'C', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'r', 00H, 'P', 00H, 'i', 00H, 'n', 00H
	DB	'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H
	DB	00H, 00H
$SG83802 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83803 DB	':', 00H, ':', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H
	DB	'e', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '(', 00H, 'h', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'i', 00H
	DB	'f', 00H, 'y', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, 'P', 00H, 'i', 00H, 'n', 00H, 'B', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H
$SG83805 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83806 DB	':', 00H, ':', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H
	DB	'e', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '(', 00H, 'h', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'i', 00H
	DB	'f', 00H, 'y', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, 'P', 00H, 'i', 00H, 'n', 00H, 'B', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H
$SG83833 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83834 DB	'C', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'I', 00H, 'n', 00H, '(', 00H, '&'
	DB	00H, 'm', 00H, '_', 00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'k', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'L'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG83836 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83837 DB	'!', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'm', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'h', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, 'U', 00H, 's', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u'
	DB	00H, 't', 00H, 'P', 00H, 'i', 00H, 'n', 00H, '(', 00H, ')', 00H
	DB	00H, 00H
	ORG $+2
$SG83839 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83840 DB	':', 00H, ':', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, '('
	DB	00H, 'm', 00H, '_', 00H, 'h', 00H, 'U', 00H, 'n', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, 'p', 00H, 'u', 00H, 't', 00H, 'P', 00H, 'i', 00H, 'n', 00H
	DB	'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG83842 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83843 DB	':', 00H, ':', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, '(', 00H, 'm', 00H, '_'
	DB	00H, 'h', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'i', 00H, 'f', 00H
	DB	'y', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r'
	DB	00H, 'P', 00H, 'i', 00H, 'n', 00H, 'B', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, 'E', 00H, 'v', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG83845 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83846 DB	':', 00H, ':', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H
	DB	'e', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'N', 00H, 'o', 00H
	DB	't', 00H, 'i', 00H, 'f', 00H, 'y', 00H, 'C', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'r', 00H, 'P', 00H, 'i', 00H, 'n', 00H
	DB	'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H
	DB	00H, 00H
$SG83856 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83857 DB	':', 00H, ':', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, '(', 00H, 'm', 00H, '_'
	DB	00H, 'h', 00H, 'U', 00H, 'n', 00H, 'b', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u'
	DB	00H, 't', 00H, 'P', 00H, 'i', 00H, 'n', 00H, 'E', 00H, 'v', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG83860 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83861 DB	':', 00H, ':', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, '(', 00H, 'm', 00H, '_'
	DB	00H, 'h', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'i', 00H, 'f', 00H
	DB	'y', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r'
	DB	00H, 'P', 00H, 'i', 00H, 'n', 00H, 'B', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, 'E', 00H, 'v', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG83863 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83864 DB	':', 00H, ':', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 's', 00H
	DB	'e', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'N', 00H, 'o', 00H
	DB	't', 00H, 'i', 00H, 'f', 00H, 'y', 00H, 'C', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'r', 00H, 'P', 00H, 'i', 00H, 'n', 00H
	DB	'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd'
	DB	00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H
	DB	00H, 00H
$SG83872 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83873 DB	'C', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'O', 00H, 'u', 00H, 't', 00H, '('
	DB	00H, '&', 00H, 'm', 00H, '_', 00H, 'B', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ')', 00H, 00H, 00H
$SG83879 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83880 DB	'C', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'O', 00H, 'u', 00H, 't', 00H, '('
	DB	00H, ' ', 00H, '&', 00H, 'm', 00H, '_', 00H, 'B', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	')', 00H, 00H, 00H
$SG83901 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83902 DB	'"', 00H, 'A', 00H, 'n', 00H, ' ', 00H, 'U', 00H, 'n', 00H
	DB	'e', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	' ', 00H, 'o', 00H, 'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'C', 00H
	DB	'D', 00H, 'y', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'i', 00H, 'c'
	DB	00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'P', 00H, 'i', 00H, 'n', 00H, ':', 00H, ':', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 'r', 00H, 't', 00H, 'U', 00H, 's', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u'
	DB	00H, 't', 00H, 'P', 00H, 'i', 00H, 'n', 00H, '(', 00H, ')', 00H
	DB	'.', 00H, '"', 00H, 00H, 00H
$SG83930 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83931 DB	'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, 'C', 00H, 'D', 00H, 'y', 00H, 'n', 00H, 'a', 00H, 'm'
	DB	00H, 'i', 00H, 'c', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H
	DB	'u', 00H, 't', 00H, 'P', 00H, 'i', 00H, 'n', 00H, ':', 00H, ':'
	DB	00H, 'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H
	DB	'a', 00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'm', 00H, '_'
	DB	00H, 'p', 00H, 'G', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 'h', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, ' '
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, '_', 00H
	DB	'h', 00H, 'S', 00H, 't', 00H, 'o', 00H, 'p', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'w', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, '.', 00H, ' '
	DB	00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'S', 00H
	DB	'e', 00H, 't', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i'
	DB	00H, 'g', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'm'
	DB	00H, '.', 00H, 00H, 00H
	ORG $+2
$SG83934 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83935 DB	'R', 00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, '(', 00H, 'm', 00H, '_'
	DB	00H, 'h', 00H, 'S', 00H, 't', 00H, 'o', 00H, 'p', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG83941 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83942 DB	'S', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'S'
	DB	00H, 't', 00H, 'o', 00H, 'p', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG83948 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83949 DB	'S', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'S'
	DB	00H, 't', 00H, 'o', 00H, 'p', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG83955 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83956 DB	'R', 00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, '(', 00H, 'm', 00H, '_'
	DB	00H, 'h', 00H, 'S', 00H, 't', 00H, 'o', 00H, 'p', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG83965 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG83966 DB	'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'U', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, 'P', 00H, 'i', 00H, 'n', 00H, '(', 00H, ')', 00H, 00H, 00H
$SG83968 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83969 DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'p', 00H, 'm', 00H, 't', 00H, 00H, 00H
$SG83985 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83986 DB	'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'U', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, 'P', 00H, 'i', 00H, 'n', 00H, '(', 00H, ')', 00H, 00H, 00H
$SG83988 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG83989 DB	'!', 00H, 'I', 00H, 's', 00H, 'S', 00H, 't', 00H, 'o', 00H
	DB	'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, '(', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG84037 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG84038 DB	'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'U', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, 'P', 00H, 'i', 00H, 'n', 00H, '(', 00H, ')', 00H, 00H, 00H
$SG84046 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84047 DB	':', 00H, ':', 00H, 'I', 00H, 's', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '(', 00H, 'm', 00H, '_', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'e'
	DB	00H, 'd', 00H, ',', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'p', 00H
	DB	'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'P', 00H, 'i'
	DB	00H, 'n', 00H, ')', 00H, 00H, 00H
$SG84064 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG84065 DB	'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, 'U', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, 'P', 00H, 'i', 00H, 'n', 00H, '(', 00H, ')', 00H, 00H, 00H
$SG84080 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84081 DB	'h', 00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'V', 00H, 'F', 00H, 'W', 00H, '_', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'L', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H
	DB	'_', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'I', 00H, 'T'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 00H, 00H
$SG84087 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG84088 DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'U', 00H, 'n'
	DB	00H, 'b', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'O', 00H
	DB	'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'P', 00H, 'i'
	DB	00H, 'n', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H
	ORG $+2
$SG84090 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84091 DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'S', 00H, 't'
	DB	00H, 'o', 00H, 'p', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H
	ORG $+2
$SG84093 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84094 DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'p', 00H, 'G', 00H, 'r'
	DB	00H, 'a', 00H, 'p', 00H, 'h', 00H, 'C', 00H, 'o', 00H, 'n', 00H
	DB	'f', 00H, 'i', 00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG84097 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84098 DB	'(', 00H, 'N', 00H, 'O', 00H, 'T', 00H, '_', 00H, 'B', 00H
	DB	'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'B', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '(', 00H, 'P', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I'
	DB	00H, 'N', 00H, 'G', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'm', 00H, '_', 00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ')', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '(', 00H, 'B', 00H, 'L'
	DB	00H, 'O', 00H, 'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'B', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, ')', 00H, 00H, 00H
$SG84102 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84103 DB	'(', 00H, '(', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'h'
	DB	00H, 'N', 00H, 'o', 00H, 't', 00H, 'i', 00H, 'f', 00H, 'y', 00H
	DB	'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r', 00H, 'P'
	DB	00H, 'i', 00H, 'n', 00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'k', 00H, 'e', 00H, 'd', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'(', 00H, 'P', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'N'
	DB	00H, 'G', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'm', 00H
	DB	'_', 00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'S'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ')', 00H, ')', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '(', 00H, '(', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'N', 00H, 'o', 00H, 't'
	DB	00H, 'i', 00H, 'f', 00H, 'y', 00H, 'C', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, 'e', 00H, 'r', 00H, 'P', 00H, 'i', 00H, 'n', 00H, 'B'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H
	DB	'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H, 'P', 00H, 'E', 00H
	DB	'N', 00H, 'D', 00H, 'I', 00H, 'N', 00H, 'G', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'B', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, ')', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG84105 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84106 DB	'(', 00H, '0', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'm', 00H, '_', 00H, 'd', 00H, 'w', 00H, 'B', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'e', 00H, 'r', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, 'I', 00H, 'D', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, 'N', 00H, 'O', 00H, 'T', 00H, '_'
	DB	00H, 'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'E', 00H
	DB	'D', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_'
	DB	00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'S', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ')', 00H, 00H, 00H
$SG84111 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84112 DB	'(', 00H, '(', 00H, '0', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'm', 00H, '_', 00H, 'd', 00H, 'w', 00H, 'N', 00H, 'u'
	DB	00H, 'm', 00H, 'O', 00H, 'u', 00H, 't', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'O'
	DB	00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'P', 00H
	DB	'i', 00H, 'n', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H, 's'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'E', 00H, 'D'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H
	DB	'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, '(', 00H, '0', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'd', 00H
	DB	'w', 00H, 'N', 00H, 'u', 00H, 'm', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u'
	DB	00H, 't', 00H, 'P', 00H, 'i', 00H, 'n', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '(', 00H, 'N', 00H, 'O', 00H, 'T', 00H, '_', 00H
	DB	'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'E', 00H, 'D'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H
	DB	'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, '(', 00H, '0', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'd', 00H
	DB	'w', 00H, 'N', 00H, 'u', 00H, 'm', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u'
	DB	00H, 't', 00H, 'P', 00H, 'i', 00H, 'n', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '(', 00H, 'N', 00H, 'O', 00H, 'T', 00H, '_', 00H
	DB	'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'E', 00H, 'D'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H
	DB	'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ')', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG84128 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84129 DB	'"', 00H, 'A', 00H, 'n', 00H, ' ', 00H, 'U', 00H, 'n', 00H
	DB	'e', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	' ', 00H, 'o', 00H, 'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'C', 00H
	DB	'D', 00H, 'y', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'i', 00H, 'c'
	DB	00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'P', 00H, 'i', 00H, 'n', 00H, ':', 00H, ':', 00H, 'W', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, ')', 00H, '.', 00H, '"', 00H, 00H, 00H
$SG84165 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84166 DB	'!', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'C', 00H, 'o', 00H
	DB	'm', 00H, 'm', 00H, 'i', 00H, 't', 00H, 't', 00H, 'e', 00H, 'd'
	DB	00H, 00H, 00H
$SG84169 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84170 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'h', 00H, 'S', 00H, 'e', 00H, 'm', 00H, ')', 00H
	DB	00H, 00H
$SG84193 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84194 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG84198 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84199 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG84203 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84204 DB	'p', 00H, 'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H
	DB	's', 00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 'b', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG84206 DB	'A', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'q'
	DB	00H, 'u', 00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'w', 00H, 'a', 00H, 's', 00H, ' ', 00H, '0', 00H, 'x'
	DB	00H, '%', 00H, 'x', 00H, ',', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '1', 00H, 00H, 00H
$SG84225 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84226 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG84230 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84231 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG84255 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84256 DB	'm', 00H, '_', 00H, 'h', 00H, 'S', 00H, 'e', 00H, 'm', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG84258 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84259 DB	'p', 00H, 'S', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'e', 00H, '-', 00H, '>', 00H, 'm', 00H, '_', 00H, 'c', 00H, 'R'
	DB	00H, 'e', 00H, 'f', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
	ORG $+2
$SG84269 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84270 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG84279 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84280 DB	'm', 00H, '_', 00H, 'f', 00H, 'E', 00H, 'n', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'e'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H
	ORG $+2
$SG84287 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84288 DB	'm', 00H, '_', 00H, 'f', 00H, 'E', 00H, 'n', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'e'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H
	ORG $+2
$SG84299 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84300 DB	'm', 00H, '_', 00H, 'f', 00H, 'E', 00H, 'n', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'e'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H
	ORG $+2
$SG84308 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84309 DB	'm', 00H, '_', 00H, 'h', 00H, 'S', 00H, 'e', 00H, 'm', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG84318 DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ':', 00H, ' ', 00H, '%'
	DB	00H, 'l', 00H, 'd', 00H, 'x', 00H, '%', 00H, 'l', 00H, 'd', 00H
	DB	00H, 00H
$SG84343 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84344 DB	'm', 00H, '_', 00H, 'l', 00H, 'F', 00H, 'r', 00H, 'e', 00H
	DB	'e', 00H, '.', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'l', 00H, 'A'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG84356 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84357 DB	'"', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H
	DB	'n', 00H, '''', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, ' ', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG84367 DB	'C', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'A', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, 00H, 00H
$SG84394 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84395 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG84399 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84400 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '"', 00H, 00H, 00H
$SG84404 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84405 DB	'p', 00H, 'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H
	DB	's', 00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 'b', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG84408 DB	'A', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'q'
	DB	00H, 'u', 00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'x', 00H, ' ', 00H, 'n'
	DB	00H, 'o', 00H, 't', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, '2', 00H, '!', 00H, 00H, 00H
	ORG $+2
$SG84411 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '0', 00H
	DB	'x', 00H, '%', 00H, 'x', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'q'
	DB	00H, 'u', 00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, '-', 00H, ' ', 00H, 'g', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'u', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, ' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%'
	DB	00H, 'x', 00H, 00H, 00H
$SG84436 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84437 DB	'm', 00H, '_', 00H, 'p', 00H, 'B', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG84441 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84442 DB	'h', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'S', 00H, '_', 00H, 'O', 00H, 'K', 00H, 00H, 00H
	ORG $+2
$SG84449 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84450 DB	'l', 00H, 'A', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'e', 00H, 'd', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' '
	DB	00H, '%', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'l', 00H, 'A', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG84458 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84459 DB	'm', 00H, '_', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG84467 DB	'D', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r'
	DB	00H, 'y', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'd', 00H, 'i', 00H
	DB	'a', 00H, ' ', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l'
	DB	00H, 'e', 00H, 00H, 00H
$SG84470 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84471 DB	'S', 00H, 'U', 00H, 'C', 00H, 'C', 00H, 'E', 00H, 'E', 00H
	DB	'D', 00H, 'E', 00H, 'D', 00H, '(', 00H, 'h', 00H, 'r', 00H, ')'
	DB	00H, 00H, 00H
$SG84485 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG84486 DB	'm', 00H, '_', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'l', 00H
	DB	'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'G', 00H, 'e'
	DB	00H, 't', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG84497 DB	'.', 00H, '.', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG84498 DB	'V', 00H, 'i', 00H, 'r', 00H, 't', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'p', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	'e', 00H, 'r', 00H, ',', 00H, ' ', 00H, '0', 00H, ',', 00H, ' '
	DB	00H, '0', 00H, 'x', 00H, '8', 00H, '0', 00H, '0', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
$SG84507 DB	'=', 00H, ' ', 00H, 'A', 00H, 'M', 00H, 'o', 00H, 'v', 00H
	DB	'i', 00H, 'e', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'u', 00H, 'p'
	DB	00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 00H, 00H
$SG84510 DB	'=', 00H, ' ', 00H, '=', 00H, ' ', 00H, 'u', 00H, 'n', 00H
	DB	'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H
$SG84513 DB	'=', 00H, ' ', 00H, '=', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
$SG84516 DB	'=', 00H, ' ', 00H, '=', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'p', 00H, 'i', 00H, 'n', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG84523 DB	'=', 00H, ' ', 00H, '=', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'p', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, 's', 00H, 00H, 00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	_CreateMemoryAllocator@4
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	_CLSID_MemoryAllocator:BYTE
EXTRN	_IID_IMemAllocator:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT _CreateMemoryAllocator@4
_TEXT	SEGMENT
_ppAllocator$ = 8					; size = 4
_CreateMemoryAllocator@4 PROC				; COMDAT
; Line 38
	push	ebp
	mov	ebp, esp
	push	esi
; Line 43
	mov	esi, esp
	mov	eax, DWORD PTR _ppAllocator$[ebp]
	push	eax
	push	OFFSET _IID_IMemAllocator
	push	1
	push	0
	push	OFFSET _CLSID_MemoryAllocator
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 44
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_CreateMemoryAllocator@4 ENDP
_TEXT	ENDS
PUBLIC	_CreatePosPassThru@16
EXTRN	_IID_ISeekingPassThru:BYTE
EXTRN	_CLSID_SeekingPassThru:BYTE
EXTRN	_IID_IUnknown:BYTE
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _CreatePosPassThru@16
_TEXT	SEGMENT
_pPassThru$ = -24					; size = 4
_hr$ = -16						; size = 4
_pUnkSeek$ = -8						; size = 4
_pAgg$ = 8						; size = 4
_bRenderer$ = 12					; size = 4
_pPin$ = 16						; size = 4
_ppPassThru$ = 20					; size = 4
_CreatePosPassThru@16 PROC				; COMDAT
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 55
	mov	eax, DWORD PTR _ppPassThru$[ebp]
	mov	DWORD PTR [eax], 0
; Line 62
	mov	esi, esp
	lea	ecx, DWORD PTR _pUnkSeek$[ebp]
	push	ecx
	push	OFFSET _IID_IUnknown
	push	1
	mov	edx, DWORD PTR _pAgg$[ebp]
	push	edx
	push	OFFSET _CLSID_SeekingPassThru
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 63
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@CreatePosP
; Line 64
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN4@CreatePosP
$LN3@CreatePosP:
; Line 68
	mov	esi, esp
	lea	eax, DWORD PTR _pPassThru$[ebp]
	push	eax
	push	OFFSET _IID_ISeekingPassThru
	mov	ecx, DWORD PTR _pUnkSeek$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pUnkSeek$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 69
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CreatePosP
; Line 70
	mov	edx, DWORD PTR _pUnkSeek$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pUnkSeek$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@CreatePosP
$LN2@CreatePosP:
; Line 73
	mov	esi, esp
	mov	eax, DWORD PTR _pPin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bRenderer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPassThru$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pPassThru$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 74
	mov	eax, DWORD PTR _pPassThru$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pPassThru$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 75
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreatePosP
; Line 76
	mov	ecx, DWORD PTR _pUnkSeek$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pUnkSeek$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 77
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@CreatePosP
$LN1@CreatePosP:
; Line 79
	mov	edx, DWORD PTR _ppPassThru$[ebp]
	mov	eax, DWORD PTR _pUnkSeek$[ebp]
	mov	DWORD PTR [edx], eax
; Line 80
	xor	eax, eax
$LN4@CreatePosP:
; Line 81
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@CreatePosP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN9@CreatePosP:
	DD	2
	DD	$LN8@CreatePosP
$LN8@CreatePosP:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@CreatePosP
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@CreatePosP
$LN7@CreatePosP:
	DB	112					; 00000070H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	0
$LN6@CreatePosP:
	DB	112					; 00000070H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	107					; 0000006bH
	DB	0
_CreatePosPassThru@16 ENDP
_TEXT	ENDS
PUBLIC	??1CUnknown@@UAE@XZ				; CUnknown::~CUnknown
PUBLIC	??0CRefTime@@QAE@XZ				; CRefTime::CRefTime
PUBLIC	??0IMediaFilter@@QAE@XZ				; IMediaFilter::IMediaFilter
PUBLIC	??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z ; CBaseMediaFilter::CBaseMediaFilter
EXTRN	??0CUnknown@@QAE@PB_WPAUIUnknown@@@Z:PROC	; CUnknown::CUnknown
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z$0
__ehfuncinfo$??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_pLock$ = 16						; size = 4
_clsid$ = 20						; size = 4
??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z PROC ; CBaseMediaFilter::CBaseMediaFilter, COMDAT
; _this$ = ecx
; Line 105
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PB_WPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IMediaFilter@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	mov	ecx, DWORD PTR _clsid$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pLock$[ebp]
	mov	DWORD PTR [edx+56], eax
; Line 106
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseMediaFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z ENDP ; CBaseMediaFilter::CBaseMediaFilter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CRefTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRefTime@@QAE@XZ PROC				; CRefTime::CRefTime, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\reftime.h
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRefTime@@QAE@XZ ENDP				; CRefTime::CRefTime
_TEXT	ENDS
EXTRN	??1CBaseObject@@QAE@XZ:PROC			; CBaseObject::~CBaseObject
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CUnknown@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CUnknown@@UAE@XZ PROC				; CUnknown::~CUnknown, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\combase.h
; Line 212
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBaseObject@@QAE@XZ			; CBaseObject::~CBaseObject
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CUnknown@@UAE@XZ ENDP				; CUnknown::~CUnknown
_TEXT	ENDS
PUBLIC	??0IPersist@@QAE@XZ				; IPersist::IPersist
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IMediaFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IMediaFilter@@QAE@XZ PROC				; IMediaFilter::IMediaFilter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IPersist@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IMediaFilter@@QAE@XZ ENDP				; IMediaFilter::IMediaFilter
_TEXT	ENDS
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IPersist@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IPersist@@QAE@XZ PROC				; IPersist::IPersist, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IPersist@@QAE@XZ ENDP				; IPersist::IPersist
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??1CBaseMediaFilter@@UAE@XZ			; CBaseMediaFilter::~CBaseMediaFilter
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$??1CBaseMediaFilter@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseMediaFilter@@UAE@XZ$0
__ehfuncinfo$??1CBaseMediaFilter@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBaseMediaFilter@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseMediaFilter@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseMediaFilter@@UAE@XZ PROC			; CBaseMediaFilter::~CBaseMediaFilter, COMDAT
; _this$ = ecx
; Line 112
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseMediaFilter@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 118
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@CBaseMedia
; Line 119
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 120
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
$LN2@CBaseMedia:
; Line 122
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseMediaFilter@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??1CBaseMediaFilter@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseMediaFilter@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseMediaFilter@@UAE@XZ ENDP			; CBaseMediaFilter::~CBaseMediaFilter
PUBLIC	_==@8
PUBLIC	?NonDelegatingQueryInterface@CBaseMediaFilter@@UAGJABU_GUID@@PAPAX@Z ; CBaseMediaFilter::NonDelegatingQueryInterface
EXTRN	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z:PROC ; CUnknown::NonDelegatingQueryInterface
EXTRN	_IID_IPersist:BYTE
EXTRN	_GetInterface@8:PROC
EXTRN	_IID_IMediaFilter:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingQueryInterface@CBaseMediaFilter@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv94 = -8						; size = 4
tv77 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CBaseMediaFilter@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseMediaFilter::NonDelegatingQueryInterface, COMDAT
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 132
	push	OFFSET _IID_IMediaFilter
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@NonDelegat
; Line 133
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN7@NonDelegat
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN8@NonDelegat
$LN7@NonDelegat:
	mov	DWORD PTR tv77[ebp], 0
$LN8@NonDelegat:
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN5@NonDelegat
	jmp	SHORT $LN5@NonDelegat
$LN4@NonDelegat:
; Line 134
	push	OFFSET _IID_IPersist
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@NonDelegat
; Line 135
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@NonDelegat
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN10@NonDelegat
$LN9@NonDelegat:
	mov	DWORD PTR tv94[ebp], 0
$LN10@NonDelegat:
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv94[ebp]
	push	ecx
	call	_GetInterface@8
	jmp	SHORT $LN5@NonDelegat
; Line 136
	jmp	SHORT $LN5@NonDelegat
$LN2@NonDelegat:
; Line 137
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z ; CUnknown::NonDelegatingQueryInterface
$LN5@NonDelegat:
; Line 139
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CBaseMediaFilter@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseMediaFilter::NonDelegatingQueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	?GetClassID@CBaseMediaFilter@@UAGJPAU_GUID@@@Z	; CBaseMediaFilter::GetClassID
EXTRN	__imp__IsBadWritePtr@8:PROC
EXTRN	?DbgBreakPoint@@YGXPB_W0H@Z:PROC		; DbgBreakPoint
EXTRN	__imp__IsBadReadPtr@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetClassID@CBaseMediaFilter@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pClsID$ = 12						; size = 4
?GetClassID@CBaseMediaFilter@@UAGJPAU_GUID@@@Z PROC	; CBaseMediaFilter::GetClassID, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 144
	push	ebp
	mov	ebp, esp
	push	esi
; Line 145
	cmp	DWORD PTR _pClsID$[ebp], 0
	jne	SHORT $LN3@GetClassID
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN4@GetClassID
$LN3@GetClassID:
; Line 146
	mov	esi, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _pClsID$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetClassID
	push	146					; 00000092H
	push	OFFSET $SG81616
	push	OFFSET $SG81617
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetClassID:
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _pClsID$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN1@GetClassID
	push	146					; 00000092H
	push	OFFSET $SG81621
	push	OFFSET $SG81622
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@GetClassID:
; Line 147
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pClsID$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 148
	xor	eax, eax
$LN4@GetClassID:
; Line 149
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetClassID@CBaseMediaFilter@@UAGJPAU_GUID@@@Z ENDP	; CBaseMediaFilter::GetClassID
_TEXT	ENDS
PUBLIC	?GetState@CBaseMediaFilter@@UAGJKPAW4_FilterState@@@Z ; CBaseMediaFilter::GetState
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetState@CBaseMediaFilter@@UAGJKPAW4_FilterState@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwMSecs$ = 12						; size = 4
_State$ = 16						; size = 4
?GetState@CBaseMediaFilter@@UAGJKPAW4_FilterState@@@Z PROC ; CBaseMediaFilter::GetState, COMDAT
; Line 155
	push	ebp
	mov	ebp, esp
	push	esi
; Line 157
	cmp	DWORD PTR _State$[ebp], 0
	jne	SHORT $LN3@GetState
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN4@GetState
$LN3@GetState:
; Line 158
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _State$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetState
	push	158					; 0000009eH
	push	OFFSET $SG81633
	push	OFFSET $SG81634
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetState:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _State$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN1@GetState
	push	158					; 0000009eH
	push	OFFSET $SG81638
	push	OFFSET $SG81639
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@GetState:
; Line 160
	mov	edx, DWORD PTR _State$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
; Line 161
	xor	eax, eax
$LN4@GetState:
; Line 162
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetState@CBaseMediaFilter@@UAGJKPAW4_FilterState@@@Z ENDP ; CBaseMediaFilter::GetState
_TEXT	ENDS
PUBLIC	??1CAutoLock@@QAE@XZ				; CAutoLock::~CAutoLock
PUBLIC	??0CAutoLock@@QAE@PAVCCritSec@@@Z		; CAutoLock::CAutoLock
PUBLIC	?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z ; CBaseMediaFilter::SetSyncSource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z$0
__ehfuncinfo$?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z
_TEXT	SEGMENT
$T85592 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pClock$ = 12						; size = 4
?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z PROC ; CBaseMediaFilter::SetSyncSource, COMDAT
; Line 169
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 173
	cmp	DWORD PTR _pClock$[ebp], 0
	je	SHORT $LN2@SetSyncSou
; Line 174
	mov	edx, DWORD PTR _pClock$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pClock$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetSyncSou:
; Line 178
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@SetSyncSou
; Line 179
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetSyncSou:
; Line 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pClock$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 186
	mov	DWORD PTR $T85592[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85592[ebp]
; Line 187
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SetSyncSou
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@SetSyncSou:
	DD	1
	DD	$LN8@SetSyncSou
$LN8@SetSyncSou:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@SetSyncSou
$LN6@SetSyncSou:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSyncSource@CBaseMediaFilter@@UAGJPAUIReferenceClock@@@Z ENDP ; CBaseMediaFilter::SetSyncSource
EXTRN	?Lock@CCritSec@@QAEXXZ:PROC			; CCritSec::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAutoLock@@QAE@PAVCCritSec@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plock$ = 8						; size = 4
??0CAutoLock@@QAE@PAVCCritSec@@@Z PROC			; CAutoLock::CAutoLock, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plock$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 97
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAutoLock@@QAE@PAVCCritSec@@@Z ENDP			; CAutoLock::CAutoLock
_TEXT	ENDS
EXTRN	?Unlock@CCritSec@@QAEXXZ:PROC			; CCritSec::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoLock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoLock@@QAE@XZ PROC				; CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
; Line 102
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoLock@@QAE@XZ ENDP				; CAutoLock::~CAutoLock
_TEXT	ENDS
PUBLIC	?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z ; CBaseMediaFilter::GetSyncSource
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z$0
__ehfuncinfo$?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z
_TEXT	SEGMENT
$T85609 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pClock$ = 12						; size = 4
?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z PROC ; CBaseMediaFilter::GetSyncSource, COMDAT
; Line 192
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 193
	cmp	DWORD PTR _pClock$[ebp], 0
	jne	SHORT $LN4@GetSyncSou
	mov	eax, -2147467261			; 80004003H
	jmp	$LN5@GetSyncSou
$LN4@GetSyncSou:
; Line 194
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pClock$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@GetSyncSou
	push	194					; 000000c2H
	push	OFFSET $SG81658
	push	OFFSET $SG81659
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@GetSyncSou:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _pClock$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetSyncSou
	push	194					; 000000c2H
	push	OFFSET $SG81663
	push	OFFSET $SG81664
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetSyncSou:
; Line 195
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 197
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN1@GetSyncSou
; Line 199
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetSyncSou:
; Line 201
	mov	edx, DWORD PTR _pClock$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx
; Line 202
	mov	DWORD PTR $T85609[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85609[ebp]
$LN5@GetSyncSou:
; Line 203
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetSyncSou
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN11@GetSyncSou:
	DD	1
	DD	$LN10@GetSyncSou
$LN10@GetSyncSou:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@GetSyncSou
$LN8@GetSyncSou:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetSyncSource@CBaseMediaFilter@@UAGJPAPAUIReferenceClock@@@Z ENDP ; CBaseMediaFilter::GetSyncSource
PUBLIC	?Stop@CBaseMediaFilter@@UAGJXZ			; CBaseMediaFilter::Stop
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Stop@CBaseMediaFilter@@UAGJXZ
_TEXT	SEGMENT
$T85622 = -16						; size = 4
_cObjectLock$ = -8					; size = 4
_this$ = 8						; size = 4
?Stop@CBaseMediaFilter@@UAGJXZ PROC			; CBaseMediaFilter::Stop, COMDAT
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 211
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 214
	mov	DWORD PTR $T85622[ebp], 0
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85622[ebp]
; Line 215
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Stop
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@Stop:
	DD	1
	DD	$LN5@Stop
$LN5@Stop:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@Stop
$LN4@Stop:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?Stop@CBaseMediaFilter@@UAGJXZ ENDP			; CBaseMediaFilter::Stop
_TEXT	ENDS
PUBLIC	?Pause@CBaseMediaFilter@@UAGJXZ			; CBaseMediaFilter::Pause
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Pause@CBaseMediaFilter@@UAGJXZ
_TEXT	SEGMENT
$T85629 = -16						; size = 4
_cObjectLock$ = -8					; size = 4
_this$ = 8						; size = 4
?Pause@CBaseMediaFilter@@UAGJXZ PROC			; CBaseMediaFilter::Pause, COMDAT
; Line 222
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 223
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
; Line 225
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 1
; Line 226
	mov	DWORD PTR $T85629[ebp], 0
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85629[ebp]
; Line 227
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Pause
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@Pause:
	DD	1
	DD	$LN5@Pause
$LN5@Pause:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@Pause
$LN4@Pause:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?Pause@CBaseMediaFilter@@UAGJXZ ENDP			; CBaseMediaFilter::Pause
_TEXT	ENDS
PUBLIC	??4CRefTime@@QAEAAV0@_J@Z			; CRefTime::operator=
PUBLIC	?Run@CBaseMediaFilter@@UAGJ_J@Z			; CBaseMediaFilter::Run
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Run@CBaseMediaFilter@@UAGJ_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Run@CBaseMediaFilter@@UAGJ_J@Z$0
__ehfuncinfo$?Run@CBaseMediaFilter@@UAGJ_J@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Run@CBaseMediaFilter@@UAGJ_J@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Run@CBaseMediaFilter@@UAGJ_J@Z
_TEXT	SEGMENT
$T85637 = -36						; size = 4
$T85636 = -32						; size = 4
_hr$81687 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_tStart$ = 12						; size = 8
?Run@CBaseMediaFilter@@UAGJ_J@Z PROC			; CBaseMediaFilter::Run, COMDAT
; Line 241
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Run@CBaseMediaFilter@@UAGJ_J@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 245
	mov	edx, DWORD PTR _tStart$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _tStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4CRefTime@@QAEAAV0@_J@Z		; CRefTime::operator=
; Line 247
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN2@Run
; Line 248
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81687[ebp], eax
; Line 250
	cmp	DWORD PTR _hr$81687[ebp], 0
	jge	SHORT $LN2@Run
; Line 251
	mov	eax, DWORD PTR _hr$81687[ebp]
	mov	DWORD PTR $T85636[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85636[ebp]
	jmp	SHORT $LN3@Run
$LN2@Run:
; Line 254
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 2
; Line 255
	mov	DWORD PTR $T85637[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85637[ebp]
$LN3@Run:
; Line 256
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Run
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN9@Run:
	DD	1
	DD	$LN8@Run
$LN8@Run:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@Run
$LN6@Run:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Run@CBaseMediaFilter@@UAGJ_J@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Run@CBaseMediaFilter@@UAGJ_J@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Run@CBaseMediaFilter@@UAGJ_J@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Run@CBaseMediaFilter@@UAGJ_J@Z ENDP			; CBaseMediaFilter::Run
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CRefTime@@QAEAAV0@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ll$ = 8						; size = 8
??4CRefTime@@QAEAAV0@_J@Z PROC				; CRefTime::operator=, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\reftime.h
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ll$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ll$[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 89
	mov	eax, DWORD PTR _this$[ebp]
; Line 90
	mov	esp, ebp
	pop	ebp
	ret	8
??4CRefTime@@QAEAAV0@_J@Z ENDP				; CRefTime::operator=
_TEXT	ENDS
PUBLIC	??ZCRefTime@@QAEAAV0@ABV0@@Z			; CRefTime::operator-=
PUBLIC	?StreamTime@CBaseMediaFilter@@UAEJAAVCRefTime@@@Z ; CBaseMediaFilter::StreamTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?StreamTime@CBaseMediaFilter@@UAEJAAVCRefTime@@@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_rtStream$ = 8						; size = 4
?StreamTime@CBaseMediaFilter@@UAEJAAVCRefTime@@@Z PROC	; CBaseMediaFilter::StreamTime, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 264
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN2@StreamTime
; Line 270
	mov	eax, -2147220973			; 80040213H
	jmp	SHORT $LN3@StreamTime
$LN2@StreamTime:
; Line 274
	mov	esi, esp
	mov	ecx, DWORD PTR _rtStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 275
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@StreamTime
; Line 276
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN3@StreamTime
$LN1@StreamTime:
; Line 280
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _rtStream$[ebp]
	call	??ZCRefTime@@QAEAAV0@ABV0@@Z		; CRefTime::operator-=
; Line 282
	xor	eax, eax
$LN3@StreamTime:
; Line 283
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?StreamTime@CBaseMediaFilter@@UAEJAAVCRefTime@@@Z ENDP	; CBaseMediaFilter::StreamTime
_TEXT	ENDS
PUBLIC	??BCRefTime@@QBE_JXZ				; CRefTime::operator __int64
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??ZCRefTime@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rt$ = 8						; size = 4
??ZCRefTime@@QAEAAV0@ABV0@@Z PROC			; CRefTime::operator-=, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\reftime.h
; Line 98
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 99
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BCRefTime@@QBE_JXZ			; CRefTime::operator __int64
	mov	esi, eax
	mov	edi, edx
	mov	ecx, DWORD PTR _rt$[ebp]
	call	??BCRefTime@@QBE_JXZ			; CRefTime::operator __int64
	sub	esi, eax
	sbb	edi, edx
	push	edi
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CRefTime@@QAEAAV0@_J@Z		; CRefTime::operator=
; Line 100
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ZCRefTime@@QAEAAV0@ABV0@@Z ENDP			; CRefTime::operator-=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCRefTime@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCRefTime@@QBE_JXZ PROC				; CRefTime::operator __int64, COMDAT
; _this$ = ecx
; Line 76
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
; Line 78
	mov	esp, ebp
	pop	ebp
	ret	0
??BCRefTime@@QBE_JXZ ENDP				; CRefTime::operator __int64
_TEXT	ENDS
PUBLIC	?NonDelegatingQueryInterface@CBaseFilter@@UAGJABU_GUID@@PAPAX@Z ; CBaseFilter::NonDelegatingQueryInterface
EXTRN	_IID_IAMovieSetup:BYTE
EXTRN	_IID_IBaseFilter:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingQueryInterface@CBaseFilter@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv160 = -16						; size = 4
tv143 = -12						; size = 4
tv94 = -8						; size = 4
tv77 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CBaseFilter@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseFilter::NonDelegatingQueryInterface, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 297
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 300
	push	OFFSET _IID_IBaseFilter
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@NonDelegat@2
; Line 301
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN11@NonDelegat@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN12@NonDelegat@2
$LN11@NonDelegat@2:
	mov	DWORD PTR tv77[ebp], 0
$LN12@NonDelegat@2:
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	call	_GetInterface@8
	jmp	$LN9@NonDelegat@2
	jmp	$LN9@NonDelegat@2
$LN8@NonDelegat@2:
; Line 302
	push	OFFSET _IID_IMediaFilter
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@NonDelegat@2
; Line 303
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@NonDelegat@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN14@NonDelegat@2
$LN13@NonDelegat@2:
	mov	DWORD PTR tv94[ebp], 0
$LN14@NonDelegat@2:
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv94[ebp]
	push	ecx
	call	_GetInterface@8
	jmp	$LN9@NonDelegat@2
	jmp	$LN9@NonDelegat@2
$LN6@NonDelegat@2:
; Line 304
	push	OFFSET _IID_IPersist
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@NonDelegat@2
; Line 305
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@NonDelegat@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN16@NonDelegat@2
$LN15@NonDelegat@2:
	mov	DWORD PTR tv143[ebp], 0
$LN16@NonDelegat@2:
	mov	ecx, DWORD PTR _ppv$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv143[ebp]
	push	edx
	call	_GetInterface@8
	jmp	SHORT $LN9@NonDelegat@2
	jmp	SHORT $LN9@NonDelegat@2
$LN4@NonDelegat@2:
; Line 306
	push	OFFSET _IID_IAMovieSetup
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@NonDelegat@2
; Line 307
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@NonDelegat@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR tv160[ebp], ecx
	jmp	SHORT $LN18@NonDelegat@2
$LN17@NonDelegat@2:
	mov	DWORD PTR tv160[ebp], 0
$LN18@NonDelegat@2:
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR tv160[ebp]
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN9@NonDelegat@2
; Line 308
	jmp	SHORT $LN9@NonDelegat@2
$LN2@NonDelegat@2:
; Line 309
	mov	ecx, DWORD PTR _ppv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z ; CUnknown::NonDelegatingQueryInterface
$LN9@NonDelegat@2:
; Line 311
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CBaseFilter@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseFilter::NonDelegatingQueryInterface
_TEXT	ENDS
PUBLIC	?NonDelegatingRelease@CBaseFilter@@UAGKXZ	; CBaseFilter::NonDelegatingRelease
EXTRN	?NonDelegatingRelease@CUnknown@@UAGKXZ:PROC	; CUnknown::NonDelegatingRelease
EXTRN	?DbgKernelAssert@@YGXPB_W0H@Z:PROC		; DbgKernelAssert
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingRelease@CBaseFilter@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?NonDelegatingRelease@CBaseFilter@@UAGKXZ PROC		; CBaseFilter::NonDelegatingRelease, COMDAT
; Line 315
	push	ebp
	mov	ebp, esp
; Line 316
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jne	SHORT $LN2@NonDelegat@3
; Line 317
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN2@NonDelegat@3
	push	317					; 0000013dH
	push	OFFSET $SG81726
	push	OFFSET $SG81727
	call	?DbgKernelAssert@@YGXPB_W0H@Z		; DbgKernelAssert
$LN2@NonDelegat@3:
; Line 319
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?NonDelegatingRelease@CUnknown@@UAGKXZ	; CUnknown::NonDelegatingRelease
; Line 320
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?NonDelegatingRelease@CBaseFilter@@UAGKXZ ENDP		; CBaseFilter::NonDelegatingRelease
_TEXT	ENDS
PUBLIC	??0IAMovieSetup@@QAE@XZ				; IAMovieSetup::IAMovieSetup
PUBLIC	??0IBaseFilter@@QAE@XZ				; IBaseFilter::IBaseFilter
PUBLIC	??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z ; CBaseFilter::CBaseFilter
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z$0
__ehfuncinfo$??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_pLock$ = 16						; size = 4
_clsid$ = 20						; size = 4
??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z PROC ; CBaseFilter::CBaseFilter, COMDAT
; _this$ = ecx
; Line 339
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PB_WPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IBaseFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0IAMovieSetup@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	mov	ecx, DWORD PTR _clsid$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pLock$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 1
; Line 341
	cmp	DWORD PTR _pLock$[ebp], 0
	jne	SHORT $LN2@CBaseFilte
	push	341					; 00000155H
	push	OFFSET $SG81736
	push	OFFSET $SG81737
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseFilte:
; Line 342
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseFilter@@QAE@PB_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z ENDP ; CBaseFilter::CBaseFilter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IBaseFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IBaseFilter@@QAE@XZ PROC				; IBaseFilter::IBaseFilter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IMediaFilter@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IBaseFilter@@QAE@XZ ENDP				; IBaseFilter::IBaseFilter
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IAMovieSetup@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IAMovieSetup@@QAE@XZ PROC				; IAMovieSetup::IAMovieSetup, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IAMovieSetup@@QAE@XZ ENDP				; IAMovieSetup::IAMovieSetup
_TEXT	ENDS
PUBLIC	??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z ; CBaseFilter::CBaseFilter
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z$0
__ehfuncinfo$??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_pLock$ = 16						; size = 4
_clsid$ = 20						; size = 4
_phr$ = 24						; size = 4
??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z PROC ; CBaseFilter::CBaseFilter, COMDAT
; _this$ = ecx
; Line 360
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PB_WPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IBaseFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0IAMovieSetup@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	mov	ecx, DWORD PTR _clsid$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pLock$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 1
; Line 362
	cmp	DWORD PTR _pLock$[ebp], 0
	jne	SHORT $LN2@CBaseFilte@2
	push	362					; 0000016aH
	push	OFFSET $SG81755
	push	OFFSET $SG81756
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseFilte@2:
; Line 364
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseFilter@@QAE@PA_WPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z ENDP ; CBaseFilter::CBaseFilter
PUBLIC	??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z ; CBaseFilter::CBaseFilter
EXTRN	??0CUnknown@@QAE@PBDPAUIUnknown@@@Z:PROC	; CUnknown::CUnknown
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z$0
__ehfuncinfo$??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_pLock$ = 16						; size = 4
_clsid$ = 20						; size = 4
??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z PROC ; CBaseFilter::CBaseFilter, COMDAT
; _this$ = ecx
; Line 380
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PBDPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IBaseFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0IAMovieSetup@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	mov	ecx, DWORD PTR _clsid$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pLock$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 1
; Line 382
	cmp	DWORD PTR _pLock$[ebp], 0
	jne	SHORT $LN2@CBaseFilte@3
	push	382					; 0000017eH
	push	OFFSET $SG81765
	push	OFFSET $SG81766
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseFilte@3:
; Line 383
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseFilter@@QAE@PBDPAUIUnknown@@PAVCCritSec@@ABU_GUID@@@Z ENDP ; CBaseFilter::CBaseFilter
PUBLIC	??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z ; CBaseFilter::CBaseFilter
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z$0
__ehfuncinfo$??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_pLock$ = 16						; size = 4
_clsid$ = 20						; size = 4
_phr$ = 24						; size = 4
??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z PROC ; CBaseFilter::CBaseFilter, COMDAT
; _this$ = ecx
; Line 398
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PBDPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IBaseFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0IAMovieSetup@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	mov	ecx, DWORD PTR _clsid$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pLock$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 1
; Line 400
	cmp	DWORD PTR _pLock$[ebp], 0
	jne	SHORT $LN2@CBaseFilte@4
	push	400					; 00000190H
	push	OFFSET $SG81776
	push	OFFSET $SG81777
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseFilte@4:
; Line 402
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseFilter@@QAE@PADPAUIUnknown@@PAVCCritSec@@ABU_GUID@@PAJ@Z ENDP ; CBaseFilter::CBaseFilter
PUBLIC	??1CBaseFilter@@UAE@XZ				; CBaseFilter::~CBaseFilter
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBaseFilter@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseFilter@@UAE@XZ$0
__ehfuncinfo$??1CBaseFilter@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBaseFilter@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseFilter@@UAE@XZ
_TEXT	SEGMENT
$T85710 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseFilter@@UAE@XZ PROC				; CBaseFilter::~CBaseFilter, COMDAT
; _this$ = ecx
; Line 408
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseFilter@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 413
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR $T85710[ebp], ecx
	mov	edx, DWORD PTR $T85710[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 419
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@CBaseFilte@5
; Line 420
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 421
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN2@CBaseFilte@5:
; Line 423
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseFilter@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__ehhandler$??1CBaseFilter@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseFilter@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseFilter@@UAE@XZ ENDP				; CBaseFilter::~CBaseFilter
PUBLIC	?GetClassID@CBaseFilter@@UAGJPAU_GUID@@@Z	; CBaseFilter::GetClassID
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetClassID@CBaseFilter@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pClsID$ = 12						; size = 4
?GetClassID@CBaseFilter@@UAGJPAU_GUID@@@Z PROC		; CBaseFilter::GetClassID, COMDAT
; Line 428
	push	ebp
	mov	ebp, esp
	push	esi
; Line 429
	cmp	DWORD PTR _pClsID$[ebp], 0
	jne	SHORT $LN3@GetClassID@2
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN4@GetClassID@2
$LN3@GetClassID@2:
; Line 430
	mov	esi, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _pClsID$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetClassID@2
	push	430					; 000001aeH
	push	OFFSET $SG81792
	push	OFFSET $SG81793
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetClassID@2:
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _pClsID$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN1@GetClassID@2
	push	430					; 000001aeH
	push	OFFSET $SG81797
	push	OFFSET $SG81798
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@GetClassID@2:
; Line 431
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pClsID$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 432
	xor	eax, eax
$LN4@GetClassID@2:
; Line 433
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetClassID@CBaseFilter@@UAGJPAU_GUID@@@Z ENDP		; CBaseFilter::GetClassID
_TEXT	ENDS
PUBLIC	?GetState@CBaseFilter@@UAGJKPAW4_FilterState@@@Z ; CBaseFilter::GetState
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetState@CBaseFilter@@UAGJKPAW4_FilterState@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwMSecs$ = 12						; size = 4
_State$ = 16						; size = 4
?GetState@CBaseFilter@@UAGJKPAW4_FilterState@@@Z PROC	; CBaseFilter::GetState, COMDAT
; Line 438
	push	ebp
	mov	ebp, esp
	push	esi
; Line 440
	cmp	DWORD PTR _State$[ebp], 0
	jne	SHORT $LN3@GetState@2
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN4@GetState@2
$LN3@GetState@2:
; Line 441
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _State$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetState@2
	push	441					; 000001b9H
	push	OFFSET $SG81809
	push	OFFSET $SG81810
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetState@2:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _State$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN1@GetState@2
	push	441					; 000001b9H
	push	OFFSET $SG81814
	push	OFFSET $SG81815
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@GetState@2:
; Line 443
	mov	edx, DWORD PTR _State$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx
; Line 444
	xor	eax, eax
$LN4@GetState@2:
; Line 445
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetState@CBaseFilter@@UAGJKPAW4_FilterState@@@Z ENDP	; CBaseFilter::GetState
_TEXT	ENDS
PUBLIC	?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z ; CBaseFilter::SetSyncSource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z$0
__ehfuncinfo$?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z
_TEXT	SEGMENT
$T85724 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pClock$ = 12						; size = 4
?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z PROC ; CBaseFilter::SetSyncSource, COMDAT
; Line 452
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 453
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 456
	cmp	DWORD PTR _pClock$[ebp], 0
	je	SHORT $LN2@SetSyncSou@2
; Line 457
	mov	edx, DWORD PTR _pClock$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pClock$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetSyncSou@2:
; Line 461
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@SetSyncSou@2
; Line 462
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetSyncSou@2:
; Line 467
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pClock$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 469
	mov	DWORD PTR $T85724[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85724[ebp]
; Line 470
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SetSyncSou@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@SetSyncSou@2:
	DD	1
	DD	$LN8@SetSyncSou@2
$LN8@SetSyncSou@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@SetSyncSou@2
$LN6@SetSyncSou@2:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSyncSource@CBaseFilter@@UAGJPAUIReferenceClock@@@Z ENDP ; CBaseFilter::SetSyncSource
PUBLIC	?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z ; CBaseFilter::GetSyncSource
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z$0
__ehfuncinfo$?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z
_TEXT	SEGMENT
$T85737 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pClock$ = 12						; size = 4
?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z PROC ; CBaseFilter::GetSyncSource, COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 476
	cmp	DWORD PTR _pClock$[ebp], 0
	jne	SHORT $LN4@GetSyncSou@2
	mov	eax, -2147467261			; 80004003H
	jmp	$LN5@GetSyncSou@2
$LN4@GetSyncSou@2:
; Line 477
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pClock$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@GetSyncSou@2
	push	477					; 000001ddH
	push	OFFSET $SG81834
	push	OFFSET $SG81835
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@GetSyncSou@2:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _pClock$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetSyncSou@2
	push	477					; 000001ddH
	push	OFFSET $SG81839
	push	OFFSET $SG81840
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetSyncSou@2:
; Line 478
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 480
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN1@GetSyncSou@2
; Line 482
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetSyncSou@2:
; Line 484
	mov	edx, DWORD PTR _pClock$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
; Line 485
	mov	DWORD PTR $T85737[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85737[ebp]
$LN5@GetSyncSou@2:
; Line 486
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetSyncSou@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN11@GetSyncSou@2:
	DD	1
	DD	$LN10@GetSyncSou@2
$LN10@GetSyncSou@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@GetSyncSou@2
$LN8@GetSyncSou@2:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetSyncSource@CBaseFilter@@UAGJPAPAUIReferenceClock@@@Z ENDP ; CBaseFilter::GetSyncSource
PUBLIC	?IsConnected@CBasePin@@QAEHXZ			; CBasePin::IsConnected
PUBLIC	?Stop@CBaseFilter@@UAGJXZ			; CBaseFilter::Stop
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Stop@CBaseFilter@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Stop@CBaseFilter@@UAGJXZ$0
__ehfuncinfo$?Stop@CBaseFilter@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Stop@CBaseFilter@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Stop@CBaseFilter@@UAGJXZ
_TEXT	SEGMENT
$T85750 = -48						; size = 4
_hrTmp$81858 = -44					; size = 4
_pPin$81856 = -40					; size = 4
_c$81852 = -36						; size = 4
_cPins$81851 = -32					; size = 4
_hr$ = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?Stop@CBaseFilter@@UAGJXZ PROC				; CBaseFilter::Stop, COMDAT
; Line 494
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Stop@CBaseFilter@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 495
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 496
	mov	DWORD PTR _hr$[ebp], 0
; Line 499
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	$LN6@Stop@2
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cPins$81851[ebp], eax
; Line 501
	mov	DWORD PTR _c$81852[ebp], 0
	jmp	SHORT $LN5@Stop@2
$LN4@Stop@2:
	mov	ecx, DWORD PTR _c$81852[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$81852[ebp], ecx
$LN5@Stop@2:
	mov	edx, DWORD PTR _c$81852[ebp]
	cmp	edx, DWORD PTR _cPins$81851[ebp]
	jge	SHORT $LN6@Stop@2
; Line 503
	mov	esi, esp
	mov	eax, DWORD PTR _c$81852[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pPin$81856[ebp], eax
; Line 511
	mov	ecx, DWORD PTR _pPin$81856[ebp]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	je	SHORT $LN2@Stop@2
; Line 512
	mov	eax, DWORD PTR _pPin$81856[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pPin$81856[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hrTmp$81858[ebp], eax
; Line 513
	cmp	DWORD PTR _hrTmp$81858[ebp], 0
	jge	SHORT $LN2@Stop@2
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@Stop@2
; Line 514
	mov	ecx, DWORD PTR _hrTmp$81858[ebp]
	mov	DWORD PTR _hr$[ebp], ecx
$LN2@Stop@2:
; Line 517
	jmp	SHORT $LN4@Stop@2
$LN6@Stop@2:
; Line 521
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 522
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T85750[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85750[ebp]
; Line 523
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Stop@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN13@Stop@2:
	DD	1
	DD	$LN12@Stop@2
$LN12@Stop@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@Stop@2
$LN10@Stop@2:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Stop@CBaseFilter@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Stop@CBaseFilter@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Stop@CBaseFilter@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Stop@CBaseFilter@@UAGJXZ ENDP				; CBaseFilter::Stop
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsConnected@CBasePin@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsConnected@CBasePin@@QAEHXZ PROC			; CBasePin::IsConnected, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 499
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+28], 0
	setne	cl
	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsConnected@CBasePin@@QAEHXZ ENDP			; CBasePin::IsConnected
_TEXT	ENDS
PUBLIC	?Pause@CBaseFilter@@UAGJXZ			; CBaseFilter::Pause
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$?Pause@CBaseFilter@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Pause@CBaseFilter@@UAGJXZ$0
__ehfuncinfo$?Pause@CBaseFilter@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Pause@CBaseFilter@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Pause@CBaseFilter@@UAGJXZ
_TEXT	SEGMENT
$T85766 = -48						; size = 4
$T85765 = -44						; size = 4
_hr$81875 = -40						; size = 4
_pPin$81873 = -36					; size = 4
_c$81869 = -32						; size = 4
_cPins$81868 = -28					; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?Pause@CBaseFilter@@UAGJXZ PROC				; CBaseFilter::Pause, COMDAT
; Line 531
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Pause@CBaseFilter@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 532
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 535
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	$LN6@Pause@2
; Line 536
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cPins$81868[ebp], eax
; Line 537
	mov	DWORD PTR _c$81869[ebp], 0
	jmp	SHORT $LN5@Pause@2
$LN4@Pause@2:
	mov	ecx, DWORD PTR _c$81869[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$81869[ebp], ecx
$LN5@Pause@2:
	mov	edx, DWORD PTR _c$81869[ebp]
	cmp	edx, DWORD PTR _cPins$81868[ebp]
	jge	SHORT $LN6@Pause@2
; Line 539
	mov	esi, esp
	mov	eax, DWORD PTR _c$81869[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pPin$81873[ebp], eax
; Line 544
	mov	ecx, DWORD PTR _pPin$81873[ebp]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	je	SHORT $LN2@Pause@2
; Line 545
	mov	eax, DWORD PTR _pPin$81873[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pPin$81873[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81875[ebp], eax
; Line 546
	cmp	DWORD PTR _hr$81875[ebp], 0
	jge	SHORT $LN2@Pause@2
; Line 547
	mov	ecx, DWORD PTR _hr$81875[ebp]
	mov	DWORD PTR $T85765[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85765[ebp]
	jmp	SHORT $LN7@Pause@2
$LN2@Pause@2:
; Line 550
	jmp	SHORT $LN4@Pause@2
$LN6@Pause@2:
; Line 555
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 1
; Line 556
	mov	DWORD PTR $T85766[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85766[ebp]
$LN7@Pause@2:
; Line 557
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Pause@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN13@Pause@2:
	DD	1
	DD	$LN12@Pause@2
$LN12@Pause@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@Pause@2
$LN10@Pause@2:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Pause@CBaseFilter@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Pause@CBaseFilter@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Pause@CBaseFilter@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Pause@CBaseFilter@@UAGJXZ ENDP				; CBaseFilter::Pause
PUBLIC	?Run@CBaseFilter@@UAGJ_J@Z			; CBaseFilter::Run
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Run@CBaseFilter@@UAGJ_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Run@CBaseFilter@@UAGJ_J@Z$0
__ehfuncinfo$?Run@CBaseFilter@@UAGJ_J@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Run@CBaseFilter@@UAGJ_J@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Run@CBaseFilter@@UAGJ_J@Z
_TEXT	SEGMENT
$T85781 = -56						; size = 4
$T85780 = -52						; size = 4
$T85779 = -48						; size = 4
_hr$81899 = -44						; size = 4
_pPin$81897 = -40					; size = 4
_c$81893 = -36						; size = 4
_cPins$81892 = -32					; size = 4
_hr$81887 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_tStart$ = 12						; size = 8
?Run@CBaseFilter@@UAGJ_J@Z PROC				; CBaseFilter::Run, COMDAT
; Line 570
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Run@CBaseFilter@@UAGJ_J@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 571
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 574
	mov	edx, DWORD PTR _tStart$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _tStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4CRefTime@@QAEAAV0@_J@Z		; CRefTime::operator=
; Line 576
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN8@Run@2
; Line 577
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81887[ebp], eax
; Line 579
	cmp	DWORD PTR _hr$81887[ebp], 0
	jge	SHORT $LN8@Run@2
; Line 580
	mov	eax, DWORD PTR _hr$81887[ebp]
	mov	DWORD PTR $T85779[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85779[ebp]
	jmp	$LN9@Run@2
$LN8@Run@2:
; Line 584
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 2
	je	$LN6@Run@2
; Line 585
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	esi, esp
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cPins$81892[ebp], eax
; Line 586
	mov	DWORD PTR _c$81893[ebp], 0
	jmp	SHORT $LN5@Run@2
$LN4@Run@2:
	mov	eax, DWORD PTR _c$81893[ebp]
	add	eax, 1
	mov	DWORD PTR _c$81893[ebp], eax
$LN5@Run@2:
	mov	ecx, DWORD PTR _c$81893[ebp]
	cmp	ecx, DWORD PTR _cPins$81892[ebp]
	jge	SHORT $LN6@Run@2
; Line 588
	mov	esi, esp
	mov	edx, DWORD PTR _c$81893[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-16]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pPin$81897[ebp], eax
; Line 593
	mov	ecx, DWORD PTR _pPin$81897[ebp]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	je	SHORT $LN2@Run@2
; Line 594
	mov	esi, esp
	mov	ecx, DWORD PTR _tStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _tStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _pPin$81897[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pPin$81897[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81899[ebp], eax
; Line 595
	cmp	DWORD PTR _hr$81899[ebp], 0
	jge	SHORT $LN2@Run@2
; Line 596
	mov	ecx, DWORD PTR _hr$81899[ebp]
	mov	DWORD PTR $T85780[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85780[ebp]
	jmp	SHORT $LN9@Run@2
$LN2@Run@2:
; Line 599
	jmp	$LN4@Run@2
$LN6@Run@2:
; Line 603
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 2
; Line 604
	mov	DWORD PTR $T85781[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85781[ebp]
$LN9@Run@2:
; Line 605
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Run@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN15@Run@2:
	DD	1
	DD	$LN14@Run@2
$LN14@Run@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN12@Run@2
$LN12@Run@2:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Run@CBaseFilter@@UAGJ_J@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Run@CBaseFilter@@UAGJ_J@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Run@CBaseFilter@@UAGJ_J@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Run@CBaseFilter@@UAGJ_J@Z ENDP				; CBaseFilter::Run
PUBLIC	?StreamTime@CBaseFilter@@UAEJAAVCRefTime@@@Z	; CBaseFilter::StreamTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?StreamTime@CBaseFilter@@UAEJAAVCRefTime@@@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_rtStream$ = 8						; size = 4
?StreamTime@CBaseFilter@@UAEJAAVCRefTime@@@Z PROC	; CBaseFilter::StreamTime, COMDAT
; _this$ = ecx
; Line 612
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 617
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@StreamTime@2
; Line 618
	mov	eax, -2147220973			; 80040213H
	jmp	SHORT $LN3@StreamTime@2
$LN2@StreamTime@2:
; Line 622
	mov	esi, esp
	mov	ecx, DWORD PTR _rtStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 623
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@StreamTime@2
; Line 624
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN3@StreamTime@2
$LN1@StreamTime@2:
; Line 628
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _rtStream$[ebp]
	call	??ZCRefTime@@QAEAAV0@ABV0@@Z		; CRefTime::operator-=
; Line 630
	xor	eax, eax
$LN3@StreamTime@2:
; Line 631
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?StreamTime@CBaseFilter@@UAEJAAVCRefTime@@@Z ENDP	; CBaseFilter::StreamTime
_TEXT	ENDS
PUBLIC	??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z	; CEnumPins::CEnumPins
PUBLIC	?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z	; CBaseFilter::EnumPins
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z$0
__ehfuncinfo$?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z
_TEXT	SEGMENT
tv92 = -24						; size = 4
$T85797 = -20						; size = 4
$T85796 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ppEnum$ = 12						; size = 4
?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z PROC	; CBaseFilter::EnumPins, COMDAT
; Line 638
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 639
	cmp	DWORD PTR _ppEnum$[ebp], 0
	jne	SHORT $LN3@EnumPins
	mov	eax, -2147467261			; 80004003H
	jmp	$LN4@EnumPins
$LN3@EnumPins:
; Line 640
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppEnum$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@EnumPins
	push	640					; 00000280H
	push	OFFSET $SG81925
	push	OFFSET $SG81926
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@EnumPins:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppEnum$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN1@EnumPins
	push	640					; 00000280H
	push	OFFSET $SG81930
	push	OFFSET $SG81931
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@EnumPins:
; Line 645
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T85797[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T85797[ebp], 0
	je	SHORT $LN6@EnumPins
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR $T85797[ebp]
	call	??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z ; CEnumPins::CEnumPins
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN7@EnumPins
$LN6@EnumPins:
	mov	DWORD PTR tv92[ebp], 0
$LN7@EnumPins:
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T85796[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _ppEnum$[ebp]
	mov	edx, DWORD PTR $T85796[ebp]
	mov	DWORD PTR [ecx], edx
; Line 647
	mov	eax, DWORD PTR _ppEnum$[ebp]
	mov	eax, DWORD PTR [eax]
	neg	eax
	sbb	eax, eax
	and	eax, 2147024882				; 7ff8fff2H
	add	eax, -2147024882			; 8007000eH
$LN4@EnumPins:
; Line 648
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z$0:
	mov	eax, DWORD PTR $T85797[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnumPins@CBaseFilter@@UAGJPAPAUIEnumPins@@@Z ENDP	; CBaseFilter::EnumPins
PUBLIC	?Name@CBasePin@@QAEPA_WXZ			; CBasePin::Name
PUBLIC	?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z	; CBaseFilter::FindPin
EXTRN	__imp__lstrcmpW@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z$0
__ehfuncinfo$?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z
_TEXT	SEGMENT
tv146 = -48						; size = 4
$T85812 = -44						; size = 4
$T85811 = -40						; size = 4
_pPin$81960 = -36					; size = 4
_i$81956 = -32						; size = 4
_iCount$ = -28						; size = 4
_lck$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_Id$ = 12						; size = 4
_ppPin$ = 16						; size = 4
?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z PROC	; CBaseFilter::FindPin, COMDAT
; Line 658
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 659
	cmp	DWORD PTR _ppPin$[ebp], 0
	jne	SHORT $LN8@FindPin
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@FindPin
$LN8@FindPin:
; Line 660
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppPin$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN7@FindPin
	push	660					; 00000294H
	push	OFFSET $SG81947
	push	OFFSET $SG81948
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN7@FindPin:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppPin$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@FindPin
	push	660					; 00000294H
	push	OFFSET $SG81952
	push	OFFSET $SG81953
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN6@FindPin:
; Line 663
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 664
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	esi, esp
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _iCount$[ebp], eax
; Line 665
	mov	DWORD PTR _i$81956[ebp], 0
	jmp	SHORT $LN5@FindPin
$LN4@FindPin:
	mov	eax, DWORD PTR _i$81956[ebp]
	add	eax, 1
	mov	DWORD PTR _i$81956[ebp], eax
$LN5@FindPin:
	mov	ecx, DWORD PTR _i$81956[ebp]
	cmp	ecx, DWORD PTR _iCount$[ebp]
	jge	$LN3@FindPin
; Line 666
	mov	esi, esp
	mov	edx, DWORD PTR _i$81956[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-16]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pPin$81960[ebp], eax
; Line 667
	cmp	DWORD PTR _pPin$81960[ebp], 0
	jne	SHORT $LN2@FindPin
	push	667					; 0000029bH
	push	OFFSET $SG81962
	push	OFFSET $SG81963
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@FindPin:
; Line 669
	mov	esi, esp
	mov	ecx, DWORD PTR _Id$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPin$81960[ebp]
	call	?Name@CBasePin@@QAEPA_WXZ		; CBasePin::Name
	push	eax
	call	DWORD PTR __imp__lstrcmpW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@FindPin
; Line 673
	cmp	DWORD PTR _pPin$81960[ebp], 0
	je	SHORT $LN11@FindPin
	mov	edx, DWORD PTR _pPin$81960[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv146[ebp], edx
	jmp	SHORT $LN12@FindPin
$LN11@FindPin:
	mov	DWORD PTR tv146[ebp], 0
$LN12@FindPin:
	mov	eax, DWORD PTR _ppPin$[ebp]
	mov	ecx, DWORD PTR tv146[ebp]
	mov	DWORD PTR [eax], ecx
; Line 674
	mov	edx, DWORD PTR _pPin$81960[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _pPin$81960[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	push	edx
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 675
	mov	DWORD PTR $T85811[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85811[ebp]
	jmp	SHORT $LN9@FindPin
$LN1@FindPin:
; Line 677
	jmp	$LN4@FindPin
$LN3@FindPin:
; Line 678
	mov	eax, DWORD PTR _ppPin$[ebp]
	mov	DWORD PTR [eax], 0
; Line 679
	mov	DWORD PTR $T85812[ebp], -2147220970	; 80040216H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85812[ebp]
$LN9@FindPin:
; Line 680
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@FindPin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN17@FindPin:
	DD	1
	DD	$LN16@FindPin
$LN16@FindPin:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@FindPin
$LN14@FindPin:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindPin@CBaseFilter@@UAGJPB_WPAPAUIPin@@@Z ENDP	; CBaseFilter::FindPin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Name@CBasePin@@QAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Name@CBasePin@@QAEPA_WXZ PROC				; CBasePin::Name, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 551
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@CBasePin@@QAEPA_WXZ ENDP				; CBasePin::Name
_TEXT	ENDS
PUBLIC	?QueryFilterInfo@CBaseFilter@@UAGJPAU_FilterInfo@@@Z ; CBaseFilter::QueryFilterInfo
EXTRN	__imp__lstrcpynW@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryFilterInfo@CBaseFilter@@UAGJPAU_FilterInfo@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pInfo$ = 12						; size = 4
?QueryFilterInfo@CBaseFilter@@UAGJPAU_FilterInfo@@@Z PROC ; CBaseFilter::QueryFilterInfo, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 686
	push	ebp
	mov	ebp, esp
	push	esi
; Line 687
	cmp	DWORD PTR _pInfo$[ebp], 0
	jne	SHORT $LN6@QueryFilte
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@QueryFilte
$LN6@QueryFilte:
; Line 688
	mov	esi, esp
	push	260					; 00000104H
	mov	eax, DWORD PTR _pInfo$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@QueryFilte
	push	688					; 000002b0H
	push	OFFSET $SG81978
	push	OFFSET $SG81979
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@QueryFilte:
	mov	esi, esp
	push	260					; 00000104H
	mov	ecx, DWORD PTR _pInfo$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@QueryFilte
	push	688					; 000002b0H
	push	OFFSET $SG81983
	push	OFFSET $SG81984
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@QueryFilte:
; Line 690
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN3@QueryFilte
; Line 691
	mov	esi, esp
	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrcpynW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 692
	jmp	SHORT $LN2@QueryFilte
$LN3@QueryFilte:
; Line 693
	xor	eax, eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	WORD PTR [ecx], ax
$LN2@QueryFilte:
; Line 695
	mov	edx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+256], ecx
; Line 696
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN1@QueryFilte
; Line 697
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@QueryFilte:
; Line 698
	xor	eax, eax
$LN7@QueryFilte:
; Line 699
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?QueryFilterInfo@CBaseFilter@@UAGJPAU_FilterInfo@@@Z ENDP ; CBaseFilter::QueryFilterInfo
_TEXT	ENDS
PUBLIC	?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z ; CBaseFilter::JoinFilterGraph
EXTRN	_memcpy:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	_IID_IMediaEventSink:BYTE
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z$0
__ehfuncinfo$?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z
_TEXT	SEGMENT
$T85831 = -44						; size = 4
$T85830 = -40						; size = 4
$T85829 = -36						; size = 4
_nameLen$82008 = -32					; size = 4
_hr$81996 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pGraph$ = 12						; size = 4
_pName$ = 16						; size = 4
?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z PROC ; CBaseFilter::JoinFilterGraph, COMDAT
; Line 708
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 709
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 713
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pGraph$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 714
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN10@JoinFilter
; Line 716
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 52					; 00000034H
	mov	esi, esp
	push	edx
	push	OFFSET _IID_IMediaEventSink
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$81996[ebp], eax
; Line 717
	cmp	DWORD PTR _hr$81996[ebp], 0
	jge	SHORT $LN9@JoinFilter
; Line 718
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN8@JoinFilter
	push	718					; 000002ceH
	push	OFFSET $SG82001
	push	OFFSET $SG82002
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@JoinFilter:
; Line 719
	jmp	SHORT $LN7@JoinFilter
$LN9@JoinFilter:
; Line 720
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@JoinFilter:
; Line 721
	jmp	SHORT $LN6@JoinFilter
$LN10@JoinFilter:
; Line 725
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN6@JoinFilter:
; Line 729
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN5@JoinFilter
; Line 730
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T85829[ebp], ecx
	mov	edx, DWORD PTR $T85829[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 731
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN5@JoinFilter:
; Line 734
	cmp	DWORD PTR _pName$[ebp], 0
	je	$LN4@JoinFilter
; Line 735
	mov	esi, esp
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR _nameLen$82008[ebp], eax
; Line 736
	xor	ecx, ecx
	mov	eax, DWORD PTR _nameLen$82008[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T85830[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T85830[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 737
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN3@JoinFilter
; Line 738
	mov	eax, DWORD PTR _nameLen$82008[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 739
	jmp	SHORT $LN4@JoinFilter
$LN3@JoinFilter:
; Line 741
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN4@JoinFilter
	push	741					; 000002e5H
	push	OFFSET $SG82015
	push	OFFSET $SG82016
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@JoinFilter:
; Line 746
	mov	DWORD PTR $T85831[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T85831[ebp]
; Line 747
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@JoinFilter
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN17@JoinFilter:
	DD	1
	DD	$LN16@JoinFilter
$LN16@JoinFilter:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@JoinFilter
$LN14@JoinFilter:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?JoinFilterGraph@CBaseFilter@@UAGJPAUIFilterGraph@@PB_W@Z ENDP ; CBaseFilter::JoinFilterGraph
PUBLIC	?QueryVendorInfo@CBaseFilter@@UAGJPAPA_W@Z	; CBaseFilter::QueryVendorInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryVendorInfo@CBaseFilter@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pVendorInfo$ = 12					; size = 4
?QueryVendorInfo@CBaseFilter@@UAGJPAPA_W@Z PROC		; CBaseFilter::QueryVendorInfo, COMDAT
; Line 756
	push	ebp
	mov	ebp, esp
; Line 758
	mov	eax, -2147467263			; 80004001H
; Line 759
	pop	ebp
	ret	8
?QueryVendorInfo@CBaseFilter@@UAGJPAPA_W@Z ENDP		; CBaseFilter::QueryVendorInfo
_TEXT	ENDS
PUBLIC	?NotifyEvent@CBaseFilter@@QAEJJJJ@Z		; CBaseFilter::NotifyEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NotifyEvent@CBaseFilter@@QAEJJJJ@Z
_TEXT	SEGMENT
tv71 = -12						; size = 4
_pSink$ = -8						; size = 4
_this$ = -4						; size = 4
_EventCode$ = 8						; size = 4
_EventParam1$ = 12					; size = 4
_EventParam2$ = 16					; size = 4
?NotifyEvent@CBaseFilter@@QAEJJJJ@Z PROC		; CBaseFilter::NotifyEvent, COMDAT
; _this$ = ecx
; Line 770
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 772
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _pSink$[ebp], ecx
; Line 773
	cmp	DWORD PTR _pSink$[ebp], 0
	je	SHORT $LN3@NotifyEven
; Line 774
	cmp	DWORD PTR _EventCode$[ebp], 1
	jne	SHORT $LN2@NotifyEven
; Line 775
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN6@NotifyEven
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN7@NotifyEven
$LN6@NotifyEven:
	mov	DWORD PTR tv71[ebp], 0
$LN7@NotifyEven:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _EventParam2$[ebp], eax
$LN2@NotifyEven:
; Line 778
	mov	esi, esp
	mov	ecx, DWORD PTR _EventParam2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _EventParam1$[ebp]
	push	edx
	mov	eax, DWORD PTR _EventCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSink$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pSink$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN4@NotifyEven
; Line 779
	jmp	SHORT $LN4@NotifyEven
$LN3@NotifyEven:
; Line 780
	mov	eax, -2147467263			; 80004001H
$LN4@NotifyEven:
; Line 782
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?NotifyEvent@CBaseFilter@@QAEJJJJ@Z ENDP		; CBaseFilter::NotifyEvent
_TEXT	ENDS
PUBLIC	?ReconnectPin@CBaseFilter@@QAEJPAUIPin@@PBU_AMMediaType@@@Z ; CBaseFilter::ReconnectPin
EXTRN	_IID_IFilterGraph2:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReconnectPin@CBaseFilter@@QAEJPAUIPin@@PBU_AMMediaType@@@Z
_TEXT	SEGMENT
_hr$82043 = -20						; size = 4
_pGraph2$ = -12						; size = 4
_this$ = -4						; size = 4
_pPin$ = 8						; size = 4
_pmt$ = 12						; size = 4
?ReconnectPin@CBaseFilter@@QAEJPAUIPin@@PBU_AMMediaType@@@Z PROC ; CBaseFilter::ReconnectPin, COMDAT
; _this$ = ecx
; Line 793
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 795
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	$LN4@ReconnectP
; Line 796
	mov	esi, esp
	lea	ecx, DWORD PTR _pGraph2$[ebp]
	push	ecx
	push	OFFSET _IID_IFilterGraph2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$82043[ebp], eax
; Line 797
	cmp	DWORD PTR _hr$82043[ebp], 0
	jl	SHORT $LN3@ReconnectP
; Line 798
	mov	esi, esp
	mov	edx, DWORD PTR _pmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _pPin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGraph2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pGraph2$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+76]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$82043[ebp], eax
; Line 799
	mov	edx, DWORD PTR _pGraph2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pGraph2$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 800
	mov	eax, DWORD PTR _hr$82043[ebp]
	jmp	SHORT $LN5@ReconnectP
; Line 801
	jmp	SHORT $LN2@ReconnectP
$LN3@ReconnectP:
; Line 802
	mov	esi, esp
	mov	eax, DWORD PTR _pPin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@ReconnectP
$LN2@ReconnectP:
; Line 804
	jmp	SHORT $LN5@ReconnectP
$LN4@ReconnectP:
; Line 805
	mov	eax, -2147467262			; 80004002H
$LN5@ReconnectP:
; Line 807
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ReconnectP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN9@ReconnectP:
	DD	1
	DD	$LN8@ReconnectP
$LN8@ReconnectP:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@ReconnectP
$LN7@ReconnectP:
	DB	112					; 00000070H
	DB	71					; 00000047H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	50					; 00000032H
	DB	0
?ReconnectPin@CBaseFilter@@QAEJPAUIPin@@PBU_AMMediaType@@@Z ENDP ; CBaseFilter::ReconnectPin
_TEXT	ENDS
PUBLIC	?GetPinVersion@CBaseFilter@@UAEJXZ		; CBaseFilter::GetPinVersion
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetPinVersion@CBaseFilter@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPinVersion@CBaseFilter@@UAEJXZ PROC			; CBaseFilter::GetPinVersion, COMDAT
; _this$ = ecx
; Line 817
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 818
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
; Line 819
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPinVersion@CBaseFilter@@UAEJXZ ENDP			; CBaseFilter::GetPinVersion
_TEXT	ENDS
PUBLIC	?IncrementPinVersion@CBaseFilter@@QAEXXZ	; CBaseFilter::IncrementPinVersion
EXTRN	__imp__InterlockedIncrement@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IncrementPinVersion@CBaseFilter@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementPinVersion@CBaseFilter@@QAEXXZ PROC		; CBaseFilter::IncrementPinVersion, COMDAT
; _this$ = ecx
; Line 825
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 826
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 72					; 00000048H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 827
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementPinVersion@CBaseFilter@@QAEXXZ ENDP		; CBaseFilter::IncrementPinVersion
_TEXT	ENDS
PUBLIC	_AMovieSetupRegisterFilter@12
PUBLIC	?Register@CBaseFilter@@UAGJXZ			; CBaseFilter::Register
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__CoFreeUnusedLibraries@0:PROC
EXTRN	_CLSID_FilterMapper:BYTE
EXTRN	_IID_IFilterMapper:BYTE
EXTRN	__imp__CoInitialize@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Register@CBaseFilter@@UAGJXZ
_TEXT	SEGMENT
_pIFM$ = -16						; size = 4
_hr$ = -8						; size = 4
_psetupdata$ = -4					; size = 4
_this$ = 8						; size = 4
?Register@CBaseFilter@@UAGJXZ PROC			; CBaseFilter::Register, COMDAT
; Line 832
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 835
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-20]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _psetupdata$[ebp], eax
; Line 839
	cmp	DWORD PTR _psetupdata$[ebp], 0
	jne	SHORT $LN3@Register
	mov	eax, 1
	jmp	$LN4@Register
$LN3@Register:
; Line 844
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__CoInitialize@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 845
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@Register
	push	845					; 0000034dH
	push	OFFSET $SG82066
	push	OFFSET $SG82067
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Register:
; Line 854
	mov	esi, esp
	lea	ecx, DWORD PTR _pIFM$[ebp]
	push	ecx
	push	OFFSET _IID_IFilterMapper
	push	1
	push	0
	push	OFFSET _CLSID_FilterMapper
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 855
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@Register
; Line 857
	push	1
	mov	edx, DWORD PTR _pIFM$[ebp]
	push	edx
	mov	eax, DWORD PTR _psetupdata$[ebp]
	push	eax
	call	_AMovieSetupRegisterFilter@12
	mov	DWORD PTR _hr$[ebp], eax
; Line 858
	mov	ecx, DWORD PTR _pIFM$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pIFM$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Register:
; Line 863
	mov	esi, esp
	call	DWORD PTR __imp__CoFreeUnusedLibraries@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 864
	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 866
	xor	eax, eax
$LN4@Register:
; Line 867
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Register
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN8@Register:
	DD	1
	DD	$LN7@Register
$LN7@Register:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN6@Register
$LN6@Register:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	70					; 00000046H
	DB	77					; 0000004dH
	DB	0
?Register@CBaseFilter@@UAGJXZ ENDP			; CBaseFilter::Register
_TEXT	ENDS
PUBLIC	?Unregister@CBaseFilter@@UAGJXZ			; CBaseFilter::Unregister
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unregister@CBaseFilter@@UAGJXZ
_TEXT	SEGMENT
_pIFM$ = -16						; size = 4
_hr$ = -8						; size = 4
_psetupdata$ = -4					; size = 4
_this$ = 8						; size = 4
?Unregister@CBaseFilter@@UAGJXZ PROC			; CBaseFilter::Unregister, COMDAT
; Line 873
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 876
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-20]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _psetupdata$[ebp], eax
; Line 880
	cmp	DWORD PTR _psetupdata$[ebp], 0
	jne	SHORT $LN5@Unregister
	mov	eax, 1
	jmp	$LN6@Unregister
$LN5@Unregister:
; Line 885
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__CoInitialize@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 886
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Unregister
	push	886					; 00000376H
	push	OFFSET $SG82082
	push	OFFSET $SG82083
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@Unregister:
; Line 895
	mov	esi, esp
	lea	ecx, DWORD PTR _pIFM$[ebp]
	push	ecx
	push	OFFSET _IID_IFilterMapper
	push	1
	push	0
	push	OFFSET _CLSID_FilterMapper
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 896
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@Unregister
; Line 898
	push	0
	mov	edx, DWORD PTR _pIFM$[ebp]
	push	edx
	mov	eax, DWORD PTR _psetupdata$[ebp]
	push	eax
	call	_AMovieSetupRegisterFilter@12
	mov	DWORD PTR _hr$[ebp], eax
; Line 902
	mov	ecx, DWORD PTR _pIFM$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pIFM$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Unregister:
; Line 907
	mov	esi, esp
	call	DWORD PTR __imp__CoFreeUnusedLibraries@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 908
	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 915
	cmp	DWORD PTR _hr$[ebp], -2147024894	; 80070002H
	jne	SHORT $LN2@Unregister
; Line 916
	xor	eax, eax
	jmp	SHORT $LN6@Unregister
; Line 917
	jmp	SHORT $LN6@Unregister
$LN2@Unregister:
; Line 918
	mov	eax, DWORD PTR _hr$[ebp]
$LN6@Unregister:
; Line 919
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Unregister
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN10@Unregister:
	DD	1
	DD	$LN9@Unregister
$LN9@Unregister:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN8@Unregister
$LN8@Unregister:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	70					; 00000046H
	DB	77					; 0000004dH
	DB	0
?Unregister@CBaseFilter@@UAGJXZ ENDP			; CBaseFilter::Unregister
_TEXT	ENDS
PUBLIC	??1?$CGenericList@VCBasePin@@@@QAE@XZ		; CGenericList<CBasePin>::~CGenericList<CBasePin>
PUBLIC	?AddTail@?$CGenericList@VCBasePin@@@@QAEHPAV1@@Z ; CGenericList<CBasePin>::AddTail
PUBLIC	??0?$CGenericList@VCBasePin@@@@QAE@PA_W@Z	; CGenericList<CBasePin>::CGenericList<CBasePin>
PUBLIC	??_7CEnumPins@@6B@				; CEnumPins::`vftable'
PUBLIC	??0IEnumPins@@QAE@XZ				; IEnumPins::IEnumPins
PUBLIC	??_R4CEnumPins@@6B@				; CEnumPins::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEnumPins@@@8				; CEnumPins `RTTI Type Descriptor'
PUBLIC	??_R3CEnumPins@@8				; CEnumPins::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEnumPins@@8				; CEnumPins::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEnumPins@@8			; CEnumPins::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IEnumPins@@8			; IEnumPins::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIEnumPins@@@8				; IEnumPins `RTTI Type Descriptor'
PUBLIC	??_R3IEnumPins@@8				; IEnumPins::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IEnumPins@@8				; IEnumPins::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CEnumPins@@UAGJABU_GUID@@PAPAX@Z ; CEnumPins::QueryInterface
PUBLIC	?AddRef@CEnumPins@@UAGKXZ			; CEnumPins::AddRef
PUBLIC	?Release@CEnumPins@@UAGKXZ			; CEnumPins::Release
PUBLIC	?Next@CEnumPins@@UAGJKPAPAUIPin@@PAK@Z		; CEnumPins::Next
PUBLIC	?Skip@CEnumPins@@UAGJK@Z			; CEnumPins::Skip
PUBLIC	?Reset@CEnumPins@@UAGJXZ			; CEnumPins::Reset
PUBLIC	?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z	; CEnumPins::Clone
EXTRN	?DbgRegisterObjectCreation@@YGKPBDPB_W@Z:PROC	; DbgRegisterObjectCreation
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECEnumPins@@UAEPAXI@Z:PROC			; CEnumPins::`vector deleting destructor'
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IEnumPins@@8
rdata$r	SEGMENT
??_R2IEnumPins@@8 DD FLAT:??_R1A@?0A@EA@IEnumPins@@8	; IEnumPins::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IEnumPins@@8
rdata$r	SEGMENT
??_R3IEnumPins@@8 DD 00H				; IEnumPins::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IEnumPins@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIEnumPins@@@8
_DATA	SEGMENT
??_R0?AUIEnumPins@@@8 DD FLAT:??_7type_info@@6B@	; IEnumPins `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIEnumPins@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IEnumPins@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IEnumPins@@8 DD FLAT:??_R0?AUIEnumPins@@@8 ; IEnumPins::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IEnumPins@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEnumPins@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEnumPins@@8 DD FLAT:??_R0?AVCEnumPins@@@8 ; CEnumPins::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEnumPins@@8
rdata$r	ENDS
;	COMDAT ??_R2CEnumPins@@8
rdata$r	SEGMENT
??_R2CEnumPins@@8 DD FLAT:??_R1A@?0A@EA@CEnumPins@@8	; CEnumPins::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IEnumPins@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CEnumPins@@8
rdata$r	SEGMENT
??_R3CEnumPins@@8 DD 00H				; CEnumPins::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CEnumPins@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEnumPins@@@8
_DATA	SEGMENT
??_R0?AVCEnumPins@@@8 DD FLAT:??_7type_info@@6B@	; CEnumPins `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEnumPins@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CEnumPins@@6B@
rdata$r	SEGMENT
??_R4CEnumPins@@6B@ DD 00H				; CEnumPins::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEnumPins@@@8
	DD	FLAT:??_R3CEnumPins@@8
rdata$r	ENDS
;	COMDAT ??_7CEnumPins@@6B@
CONST	SEGMENT
??_7CEnumPins@@6B@ DD FLAT:??_R4CEnumPins@@6B@		; CEnumPins::`vftable'
	DD	FLAT:?QueryInterface@CEnumPins@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CEnumPins@@UAGKXZ
	DD	FLAT:?Release@CEnumPins@@UAGKXZ
	DD	FLAT:?Next@CEnumPins@@UAGJKPAPAUIPin@@PAK@Z
	DD	FLAT:?Skip@CEnumPins@@UAGJK@Z
	DD	FLAT:?Reset@CEnumPins@@UAGJXZ
	DD	FLAT:?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z
	DD	FLAT:??_ECEnumPins@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z$0
__ehfuncinfo$??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pFilter$ = 8						; size = 4
_pEnumPins$ = 12					; size = 4
??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z PROC		; CEnumPins::CEnumPins, COMDAT
; _this$ = ecx
; Line 936
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IEnumPins@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEnumPins@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pFilter$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 1
	push	OFFSET $SG82095
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CGenericList@VCBasePin@@@@QAE@PA_W@Z ; CGenericList<CBasePin>::CGenericList<CBasePin>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 939
	push	0
	push	OFFSET $SG82096
	call	?DbgRegisterObjectCreation@@YGKPBDPB_W@Z ; DbgRegisterObjectCreation
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 944
	cmp	DWORD PTR _pFilter$[ebp], 0
	jne	SHORT $LN4@CEnumPins
	push	944					; 000003b0H
	push	OFFSET $SG82098
	push	OFFSET $SG82099
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CEnumPins:
; Line 947
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [eax+16]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 951
	cmp	DWORD PTR _pEnumPins$[ebp], 0
	jne	SHORT $LN3@CEnumPins
; Line 952
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 953
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 954
	jmp	SHORT $LN5@CEnumPins
$LN3@CEnumPins:
; Line 955
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN1@CEnumPins
	push	955					; 000003bbH
	push	OFFSET $SG82103
	push	OFFSET $SG82104
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CEnumPins:
; Line 956
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pEnumPins$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
; Line 957
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pEnumPins$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
; Line 958
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pEnumPins$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
; Line 959
	mov	edx, DWORD PTR _pEnumPins$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?AddTail@?$CGenericList@VCBasePin@@@@QAEHPAV1@@Z ; CGenericList<CBasePin>::AddTail
$LN5@CEnumPins:
; Line 961
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CGenericList@VCBasePin@@@@QAE@XZ
__ehhandler$??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z ENDP		; CEnumPins::CEnumPins
PUBLIC	??1CEnumPins@@UAE@XZ				; CEnumPins::~CEnumPins
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCEnumPins@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCEnumPins@@UAEPAXI@Z PROC				; CEnumPins::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CEnumPins@@UAE@XZ			; CEnumPins::~CEnumPins
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCEnumPins@@UAEPAXI@Z ENDP				; CEnumPins::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IEnumPins@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IEnumPins@@QAE@XZ PROC				; IEnumPins::IEnumPins, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IEnumPins@@QAE@XZ ENDP				; IEnumPins::IEnumPins
_TEXT	ENDS
EXTRN	??1CBaseList@@QAE@XZ:PROC			; CBaseList::~CBaseList
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CGenericList@VCBasePin@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CGenericList@VCBasePin@@@@QAE@XZ PROC		; CGenericList<CBasePin>::~CGenericList<CBasePin>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseList@@QAE@XZ			; CBaseList::~CBaseList
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGenericList@VCBasePin@@@@QAE@XZ ENDP		; CGenericList<CBasePin>::~CGenericList<CBasePin>
_TEXT	ENDS
EXTRN	?DbgRegisterObjectDestruction@@YGHK@Z:PROC	; DbgRegisterObjectDestruction
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CEnumPins@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CEnumPins@@UAE@XZ$0
__ehfuncinfo$??1CEnumPins@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CEnumPins@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CEnumPins@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CEnumPins@@UAE@XZ PROC				; CEnumPins::~CEnumPins, COMDAT
; _this$ = ecx
; Line 970
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CEnumPins@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEnumPins@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 971
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [edx+16]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 974
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	?DbgRegisterObjectDestruction@@YGHK@Z	; DbgRegisterObjectDestruction
; Line 976
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CGenericList@VCBasePin@@@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CEnumPins@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CGenericList@VCBasePin@@@@QAE@XZ
__ehhandler$??1CEnumPins@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CEnumPins@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CEnumPins@@UAE@XZ ENDP				; CEnumPins::~CEnumPins
EXTRN	_IID_IEnumPins:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CEnumPins@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CEnumPins@@UAGJABU_GUID@@PAPAX@Z PROC	; CEnumPins::QueryInterface, COMDAT
; Line 983
	push	ebp
	mov	ebp, esp
; Line 984
	cmp	DWORD PTR _ppv$[ebp], 0
	jne	SHORT $LN4@QueryInter
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN5@QueryInter
$LN4@QueryInter:
; Line 988
	push	OFFSET _IID_IEnumPins
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	jne	SHORT $LN2@QueryInter
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN3@QueryInter
$LN2@QueryInter:
; Line 989
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN5@QueryInter
; Line 990
	jmp	SHORT $LN5@QueryInter
$LN3@QueryInter:
; Line 991
	mov	ecx, DWORD PTR _ppv$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 992
	mov	eax, -2147467262			; 80004002H
$LN5@QueryInter:
; Line 994
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CEnumPins@@UAGJABU_GUID@@PAPAX@Z ENDP	; CEnumPins::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CEnumPins@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?AddRef@CEnumPins@@UAGKXZ PROC				; CEnumPins::AddRef, COMDAT
; Line 998
	push	ebp
	mov	ebp, esp
	push	esi
; Line 999
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1000
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?AddRef@CEnumPins@@UAGKXZ ENDP				; CEnumPins::AddRef
_TEXT	ENDS
EXTRN	__imp__InterlockedDecrement@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CEnumPins@@UAGKXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T85899 = -12						; size = 4
$T85898 = -8						; size = 4
_cRef$ = -4						; size = 4
_this$ = 8						; size = 4
?Release@CEnumPins@@UAGKXZ PROC				; CEnumPins::Release, COMDAT
; Line 1004
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1005
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedDecrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cRef$[ebp], eax
; Line 1006
	cmp	DWORD PTR _cRef$[ebp], 0
	jne	SHORT $LN1@Release
; Line 1007
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T85899[ebp], ecx
	mov	edx, DWORD PTR $T85899[ebp]
	mov	DWORD PTR $T85898[ebp], edx
	cmp	DWORD PTR $T85898[ebp], 0
	je	SHORT $LN4@Release
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T85898[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T85898[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN1@Release
$LN4@Release:
	mov	DWORD PTR tv74[ebp], 0
$LN1@Release:
; Line 1009
	mov	eax, DWORD PTR _cRef$[ebp]
; Line 1010
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CEnumPins@@UAGKXZ ENDP				; CEnumPins::Release
_TEXT	ENDS
PUBLIC	?AreWeOutOfSync@CEnumPins@@AAEHXZ		; CEnumPins::AreWeOutOfSync
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z$0
__ehfuncinfo$?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z
_TEXT	SEGMENT
tv95 = -28						; size = 4
$T85905 = -24						; size = 4
$T85904 = -20						; size = 4
_hr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ppEnum$ = 12						; size = 4
?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z PROC		; CEnumPins::Clone, COMDAT
; Line 1018
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1019
	cmp	DWORD PTR _ppEnum$[ebp], 0
	jne	SHORT $LN6@Clone
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@Clone
$LN6@Clone:
; Line 1020
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppEnum$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Clone
	push	1020					; 000003fcH
	push	OFFSET $SG82147
	push	OFFSET $SG82148
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@Clone:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppEnum$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@Clone
	push	1020					; 000003fcH
	push	OFFSET $SG82152
	push	OFFSET $SG82153
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@Clone:
; Line 1021
	mov	DWORD PTR _hr$[ebp], 0
; Line 1024
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreWeOutOfSync@CEnumPins@@AAEHXZ	; CEnumPins::AreWeOutOfSync
	cmp	eax, 1
	jne	SHORT $LN3@Clone
; Line 1025
	mov	edx, DWORD PTR _ppEnum$[ebp]
	mov	DWORD PTR [edx], 0
; Line 1026
	mov	DWORD PTR _hr$[ebp], -2147220989	; 80040203H
; Line 1027
	jmp	SHORT $LN2@Clone
$LN3@Clone:
; Line 1030
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T85905[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T85905[ebp], 0
	je	SHORT $LN9@Clone
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR $T85905[ebp]
	call	??0CEnumPins@@QAE@PAVCBaseFilter@@PAV0@@Z ; CEnumPins::CEnumPins
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN10@Clone
$LN9@Clone:
	mov	DWORD PTR tv95[ebp], 0
$LN10@Clone:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T85904[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _ppEnum$[ebp]
	mov	edx, DWORD PTR $T85904[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1031
	mov	eax, DWORD PTR _ppEnum$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@Clone
; Line 1032
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
$LN2@Clone:
; Line 1035
	mov	eax, DWORD PTR _hr$[ebp]
$LN7@Clone:
; Line 1036
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z$0:
	mov	eax, DWORD PTR $T85905[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@CEnumPins@@UAGJPAPAUIEnumPins@@@Z ENDP		; CEnumPins::Clone
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AreWeOutOfSync@CEnumPins@@AAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AreWeOutOfSync@CEnumPins@@AAEHXZ PROC			; CEnumPins::AreWeOutOfSync, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 607
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx+16]
	setne	dl
	mov	eax, edx
; Line 609
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreWeOutOfSync@CEnumPins@@AAEHXZ ENDP			; CEnumPins::AreWeOutOfSync
_TEXT	ENDS
PUBLIC	?AddTail@?$CGenericList@VCBasePin@@@@QAEPAU__POSITION@@PAVCBasePin@@@Z ; CGenericList<CBasePin>::AddTail
PUBLIC	?Find@?$CGenericList@VCBasePin@@@@QBEPAU__POSITION@@PAVCBasePin@@@Z ; CGenericList<CBasePin>::Find
PUBLIC	?Refresh@CEnumPins@@AAGJXZ			; CEnumPins::Refresh
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Next@CEnumPins@@UAGJKPAPAUIPin@@PAK@Z
_TEXT	SEGMENT
tv172 = -24						; size = 4
tv156 = -20						; size = 4
tv137 = -16						; size = 4
_pPin$82204 = -12					; size = 4
_cRealPins$ = -8					; size = 4
_cFetched$ = -4						; size = 4
_this$ = 8						; size = 4
_cPins$ = 12						; size = 4
_ppPins$ = 16						; size = 4
_pcFetched$ = 20					; size = 4
?Next@CEnumPins@@UAGJKPAPAUIPin@@PAK@Z PROC		; CEnumPins::Next, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 1045
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1046
	cmp	DWORD PTR _ppPins$[ebp], 0
	jne	SHORT $LN16@Next
	mov	eax, -2147467261			; 80004003H
	jmp	$LN17@Next
$LN16@Next:
; Line 1047
	mov	eax, DWORD PTR _cPins$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ppPins$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN15@Next
	push	1047					; 00000417H
	push	OFFSET $SG82175
	push	OFFSET $SG82176
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN15@Next:
	mov	edx, DWORD PTR _cPins$[ebp]
	shl	edx, 2
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ppPins$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN14@Next
	push	1047					; 00000417H
	push	OFFSET $SG82180
	push	OFFSET $SG82181
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN14@Next:
; Line 1049
	cmp	DWORD PTR _ppPins$[ebp], 0
	jne	SHORT $LN13@Next
	push	1049					; 00000419H
	push	OFFSET $SG82183
	push	OFFSET $SG82184
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN13@Next:
; Line 1051
	cmp	DWORD PTR _pcFetched$[ebp], 0
	je	SHORT $LN12@Next
; Line 1052
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _pcFetched$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN11@Next
	push	1052					; 0000041cH
	push	OFFSET $SG82189
	push	OFFSET $SG82190
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN11@Next:
; Line 1053
	mov	edx, DWORD PTR _pcFetched$[ebp]
	mov	DWORD PTR [edx], 0
	jmp	SHORT $LN10@Next
$LN12@Next:
; Line 1056
	cmp	DWORD PTR _cPins$[ebp], 1
	jbe	SHORT $LN10@Next
; Line 1057
	mov	eax, -2147024809			; 80070057H
	jmp	$LN17@Next
$LN10@Next:
; Line 1059
	mov	DWORD PTR _cFetched$[ebp], 0
; Line 1062
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreWeOutOfSync@CEnumPins@@AAEHXZ	; CEnumPins::AreWeOutOfSync
	cmp	eax, 1
	jne	SHORT $LN8@Next
; Line 1066
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Refresh@CEnumPins@@AAGJXZ		; CEnumPins::Refresh
$LN8@Next:
; Line 1071
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _cPins$[ebp]
	jge	SHORT $LN19@Next
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN20@Next
$LN19@Next:
	mov	ecx, DWORD PTR _cPins$[ebp]
	mov	DWORD PTR tv137[ebp], ecx
$LN20@Next:
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _cRealPins$[ebp], edx
; Line 1072
	cmp	DWORD PTR _cRealPins$[ebp], 0
	jne	SHORT $LN6@Next
; Line 1073
	mov	eax, 1
	jmp	$LN17@Next
$LN6@Next:
; Line 1083
	cmp	DWORD PTR _cRealPins$[ebp], 0
	je	$LN5@Next
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	je	$LN5@Next
; Line 1087
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv156[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	esi, esp
	mov	edx, DWORD PTR tv156[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pPin$82204[ebp], eax
; Line 1088
	cmp	DWORD PTR _pPin$82204[ebp], 0
	jne	SHORT $LN4@Next
; Line 1092
	cmp	DWORD PTR _cFetched$[ebp], 0
	je	SHORT $LN3@Next
	push	1092					; 00000444H
	push	OFFSET $SG82207
	push	OFFSET $SG82208
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@Next:
; Line 1093
	mov	eax, -2147220989			; 80040203H
	jmp	$LN17@Next
$LN4@Next:
; Line 1097
	mov	ecx, DWORD PTR _pPin$82204[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Find@?$CGenericList@VCBasePin@@@@QBEPAU__POSITION@@PAVCBasePin@@@Z ; CGenericList<CBasePin>::Find
	test	eax, eax
	jne	SHORT $LN2@Next
; Line 1101
	cmp	DWORD PTR _pPin$82204[ebp], 0
	je	SHORT $LN21@Next
	mov	edx, DWORD PTR _pPin$82204[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv172[ebp], edx
	jmp	SHORT $LN22@Next
$LN21@Next:
	mov	DWORD PTR tv172[ebp], 0
$LN22@Next:
	mov	eax, DWORD PTR _ppPins$[ebp]
	mov	ecx, DWORD PTR tv172[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1102
	mov	edx, DWORD PTR _pPin$82204[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _pPin$82204[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	esi, esp
	push	edx
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1104
	mov	eax, DWORD PTR _cFetched$[ebp]
	add	eax, 1
	mov	DWORD PTR _cFetched$[ebp], eax
; Line 1105
	mov	ecx, DWORD PTR _ppPins$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ppPins$[ebp], ecx
; Line 1107
	mov	edx, DWORD PTR _pPin$82204[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?AddTail@?$CGenericList@VCBasePin@@@@QAEPAU__POSITION@@PAVCBasePin@@@Z ; CGenericList<CBasePin>::AddTail
; Line 1109
	mov	eax, DWORD PTR _cRealPins$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cRealPins$[ebp], eax
$LN2@Next:
; Line 1112
	jmp	$LN6@Next
$LN5@Next:
; Line 1114
	cmp	DWORD PTR _pcFetched$[ebp], 0
	je	SHORT $LN1@Next
; Line 1115
	mov	ecx, DWORD PTR _pcFetched$[ebp]
	mov	edx, DWORD PTR _cFetched$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Next:
; Line 1118
	mov	eax, DWORD PTR _cPins$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR _cFetched$[ebp]
	setne	cl
	mov	eax, ecx
$LN17@Next:
; Line 1119
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Next@CEnumPins@@UAGJKPAPAUIPin@@PAK@Z ENDP		; CEnumPins::Next
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Skip@CEnumPins@@UAGJK@Z
_TEXT	SEGMENT
_PinsLeft$ = -4						; size = 4
_this$ = 8						; size = 4
_cPins$ = 12						; size = 4
?Skip@CEnumPins@@UAGJK@Z PROC				; CEnumPins::Skip, COMDAT
; Line 1126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreWeOutOfSync@CEnumPins@@AAEHXZ	; CEnumPins::AreWeOutOfSync
	cmp	eax, 1
	jne	SHORT $LN2@Skip
; Line 1129
	mov	eax, -2147220989			; 80040203H
	jmp	SHORT $LN3@Skip
$LN2@Skip:
; Line 1136
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _PinsLeft$[ebp], edx
; Line 1137
	mov	eax, DWORD PTR _cPins$[ebp]
	cmp	eax, DWORD PTR _PinsLeft$[ebp]
	jbe	SHORT $LN1@Skip
; Line 1138
	mov	eax, 1
	jmp	SHORT $LN3@Skip
$LN1@Skip:
; Line 1140
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _cPins$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 1141
	xor	eax, eax
$LN3@Skip:
; Line 1142
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Skip@CEnumPins@@UAGJK@Z ENDP				; CEnumPins::Skip
_TEXT	ENDS
EXTRN	?RemoveAll@CBaseList@@QAEXXZ:PROC		; CBaseList::RemoveAll
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reset@CEnumPins@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Reset@CEnumPins@@UAGJXZ PROC				; CEnumPins::Reset, COMDAT
; Line 1156
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1157
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1158
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1160
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1163
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?RemoveAll@CBaseList@@QAEXXZ		; CBaseList::RemoveAll
; Line 1165
	xor	eax, eax
; Line 1166
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Reset@CEnumPins@@UAGJXZ ENDP				; CEnumPins::Reset
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Refresh@CEnumPins@@AAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Refresh@CEnumPins@@AAGJXZ PROC				; CEnumPins::Refresh, COMDAT
; Line 1179
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1180
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1181
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1183
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1184
	xor	eax, eax
; Line 1185
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Refresh@CEnumPins@@AAGJXZ ENDP				; CEnumPins::Refresh
_TEXT	ENDS
PUBLIC	??_7CEnumMediaTypes@@6B@			; CEnumMediaTypes::`vftable'
PUBLIC	??0IEnumMediaTypes@@QAE@XZ			; IEnumMediaTypes::IEnumMediaTypes
PUBLIC	??0CEnumMediaTypes@@QAE@PAVCBasePin@@PAV0@@Z	; CEnumMediaTypes::CEnumMediaTypes
PUBLIC	??_R4CEnumMediaTypes@@6B@			; CEnumMediaTypes::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEnumMediaTypes@@@8			; CEnumMediaTypes `RTTI Type Descriptor'
PUBLIC	??_R3CEnumMediaTypes@@8				; CEnumMediaTypes::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEnumMediaTypes@@8				; CEnumMediaTypes::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEnumMediaTypes@@8		; CEnumMediaTypes::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IEnumMediaTypes@@8		; IEnumMediaTypes::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIEnumMediaTypes@@@8			; IEnumMediaTypes `RTTI Type Descriptor'
PUBLIC	??_R3IEnumMediaTypes@@8				; IEnumMediaTypes::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IEnumMediaTypes@@8				; IEnumMediaTypes::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CEnumMediaTypes@@UAGJABU_GUID@@PAPAX@Z ; CEnumMediaTypes::QueryInterface
PUBLIC	?AddRef@CEnumMediaTypes@@UAGKXZ			; CEnumMediaTypes::AddRef
PUBLIC	?Release@CEnumMediaTypes@@UAGKXZ		; CEnumMediaTypes::Release
PUBLIC	?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z ; CEnumMediaTypes::Next
PUBLIC	?Skip@CEnumMediaTypes@@UAGJK@Z			; CEnumMediaTypes::Skip
PUBLIC	?Reset@CEnumMediaTypes@@UAGJXZ			; CEnumMediaTypes::Reset
PUBLIC	?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z ; CEnumMediaTypes::Clone
EXTRN	??_ECEnumMediaTypes@@UAEPAXI@Z:PROC		; CEnumMediaTypes::`vector deleting destructor'
;	COMDAT ??_R2IEnumMediaTypes@@8
rdata$r	SEGMENT
??_R2IEnumMediaTypes@@8 DD FLAT:??_R1A@?0A@EA@IEnumMediaTypes@@8 ; IEnumMediaTypes::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IEnumMediaTypes@@8
rdata$r	SEGMENT
??_R3IEnumMediaTypes@@8 DD 00H				; IEnumMediaTypes::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IEnumMediaTypes@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIEnumMediaTypes@@@8
_DATA	SEGMENT
??_R0?AUIEnumMediaTypes@@@8 DD FLAT:??_7type_info@@6B@	; IEnumMediaTypes `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIEnumMediaTypes@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IEnumMediaTypes@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IEnumMediaTypes@@8 DD FLAT:??_R0?AUIEnumMediaTypes@@@8 ; IEnumMediaTypes::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IEnumMediaTypes@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEnumMediaTypes@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEnumMediaTypes@@8 DD FLAT:??_R0?AVCEnumMediaTypes@@@8 ; CEnumMediaTypes::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEnumMediaTypes@@8
rdata$r	ENDS
;	COMDAT ??_R2CEnumMediaTypes@@8
rdata$r	SEGMENT
??_R2CEnumMediaTypes@@8 DD FLAT:??_R1A@?0A@EA@CEnumMediaTypes@@8 ; CEnumMediaTypes::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IEnumMediaTypes@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CEnumMediaTypes@@8
rdata$r	SEGMENT
??_R3CEnumMediaTypes@@8 DD 00H				; CEnumMediaTypes::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CEnumMediaTypes@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEnumMediaTypes@@@8
_DATA	SEGMENT
??_R0?AVCEnumMediaTypes@@@8 DD FLAT:??_7type_info@@6B@	; CEnumMediaTypes `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEnumMediaTypes@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CEnumMediaTypes@@6B@
rdata$r	SEGMENT
??_R4CEnumMediaTypes@@6B@ DD 00H			; CEnumMediaTypes::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEnumMediaTypes@@@8
	DD	FLAT:??_R3CEnumMediaTypes@@8
rdata$r	ENDS
;	COMDAT ??_7CEnumMediaTypes@@6B@
CONST	SEGMENT
??_7CEnumMediaTypes@@6B@ DD FLAT:??_R4CEnumMediaTypes@@6B@ ; CEnumMediaTypes::`vftable'
	DD	FLAT:?QueryInterface@CEnumMediaTypes@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CEnumMediaTypes@@UAGKXZ
	DD	FLAT:?Release@CEnumMediaTypes@@UAGKXZ
	DD	FLAT:?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z
	DD	FLAT:?Skip@CEnumMediaTypes@@UAGJK@Z
	DD	FLAT:?Reset@CEnumMediaTypes@@UAGJXZ
	DD	FLAT:?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z
	DD	FLAT:??_ECEnumMediaTypes@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CEnumMediaTypes@@QAE@PAVCBasePin@@PAV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pPin$ = 8						; size = 4
_pEnumMediaTypes$ = 12					; size = 4
??0CEnumMediaTypes@@QAE@PAVCBasePin@@PAV0@@Z PROC	; CEnumMediaTypes::CEnumMediaTypes, COMDAT
; _this$ = ecx
; Line 1200
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IEnumMediaTypes@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEnumMediaTypes@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pPin$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 1
; Line 1203
	push	0
	push	OFFSET $SG82235
	call	?DbgRegisterObjectCreation@@YGKPBDPB_W@Z ; DbgRegisterObjectCreation
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 1208
	cmp	DWORD PTR _pPin$[ebp], 0
	jne	SHORT $LN2@CEnumMedia
	push	1208					; 000004b8H
	push	OFFSET $SG82237
	push	OFFSET $SG82238
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CEnumMedia:
; Line 1211
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [ecx+16]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1215
	cmp	DWORD PTR _pEnumMediaTypes$[ebp], 0
	jne	SHORT $LN1@CEnumMedia
; Line 1216
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1217
	jmp	SHORT $LN3@CEnumMedia
$LN1@CEnumMedia:
; Line 1220
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pEnumMediaTypes$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
; Line 1221
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pEnumMediaTypes$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
$LN3@CEnumMedia:
; Line 1222
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0CEnumMediaTypes@@QAE@PAVCBasePin@@PAV0@@Z ENDP	; CEnumMediaTypes::CEnumMediaTypes
_TEXT	ENDS
PUBLIC	??1CEnumMediaTypes@@UAE@XZ			; CEnumMediaTypes::~CEnumMediaTypes
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCEnumMediaTypes@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCEnumMediaTypes@@UAEPAXI@Z PROC			; CEnumMediaTypes::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CEnumMediaTypes@@UAE@XZ		; CEnumMediaTypes::~CEnumMediaTypes
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCEnumMediaTypes@@UAEPAXI@Z ENDP			; CEnumMediaTypes::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IEnumMediaTypes@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IEnumMediaTypes@@QAE@XZ PROC				; IEnumMediaTypes::IEnumMediaTypes, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IEnumMediaTypes@@QAE@XZ ENDP				; IEnumMediaTypes::IEnumMediaTypes
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CEnumMediaTypes@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CEnumMediaTypes@@UAE@XZ PROC				; CEnumMediaTypes::~CEnumMediaTypes, COMDAT
; _this$ = ecx
; Line 1231
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEnumMediaTypes@@6B@
; Line 1233
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?DbgRegisterObjectDestruction@@YGHK@Z	; DbgRegisterObjectDestruction
; Line 1235
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [ecx+16]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1236
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CEnumMediaTypes@@UAE@XZ ENDP				; CEnumMediaTypes::~CEnumMediaTypes
_TEXT	ENDS
EXTRN	_IID_IEnumMediaTypes:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CEnumMediaTypes@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CEnumMediaTypes@@UAGJABU_GUID@@PAPAX@Z PROC ; CEnumMediaTypes::QueryInterface, COMDAT
; Line 1243
	push	ebp
	mov	ebp, esp
; Line 1244
	cmp	DWORD PTR _ppv$[ebp], 0
	jne	SHORT $LN4@QueryInter@2
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN5@QueryInter@2
$LN4@QueryInter@2:
; Line 1248
	push	OFFSET _IID_IEnumMediaTypes
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	jne	SHORT $LN2@QueryInter@2
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:
; Line 1249
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN5@QueryInter@2
; Line 1250
	jmp	SHORT $LN5@QueryInter@2
$LN3@QueryInter@2:
; Line 1251
	mov	ecx, DWORD PTR _ppv$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1252
	mov	eax, -2147467262			; 80004002H
$LN5@QueryInter@2:
; Line 1254
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CEnumMediaTypes@@UAGJABU_GUID@@PAPAX@Z ENDP ; CEnumMediaTypes::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CEnumMediaTypes@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?AddRef@CEnumMediaTypes@@UAGKXZ PROC			; CEnumMediaTypes::AddRef, COMDAT
; Line 1258
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1259
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1260
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?AddRef@CEnumMediaTypes@@UAGKXZ ENDP			; CEnumMediaTypes::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CEnumMediaTypes@@UAGKXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T85944 = -12						; size = 4
$T85943 = -8						; size = 4
_cRef$ = -4						; size = 4
_this$ = 8						; size = 4
?Release@CEnumMediaTypes@@UAGKXZ PROC			; CEnumMediaTypes::Release, COMDAT
; Line 1264
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1265
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedDecrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cRef$[ebp], eax
; Line 1266
	cmp	DWORD PTR _cRef$[ebp], 0
	jne	SHORT $LN1@Release@2
; Line 1267
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T85944[ebp], ecx
	mov	edx, DWORD PTR $T85944[ebp]
	mov	DWORD PTR $T85943[ebp], edx
	cmp	DWORD PTR $T85943[ebp], 0
	je	SHORT $LN4@Release@2
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T85943[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T85943[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN1@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv74[ebp], 0
$LN1@Release@2:
; Line 1269
	mov	eax, DWORD PTR _cRef$[ebp]
; Line 1270
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CEnumMediaTypes@@UAGKXZ ENDP			; CEnumMediaTypes::Release
_TEXT	ENDS
PUBLIC	?AreWeOutOfSync@CEnumMediaTypes@@AAEHXZ		; CEnumMediaTypes::AreWeOutOfSync
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z$0
__ehfuncinfo$?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z
_TEXT	SEGMENT
tv95 = -28						; size = 4
$T85950 = -24						; size = 4
$T85949 = -20						; size = 4
_hr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ppEnum$ = 12						; size = 4
?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z PROC ; CEnumMediaTypes::Clone, COMDAT
; Line 1278
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1279
	cmp	DWORD PTR _ppEnum$[ebp], 0
	jne	SHORT $LN6@Clone@2
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@Clone@2
$LN6@Clone@2:
; Line 1280
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppEnum$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Clone@2
	push	1280					; 00000500H
	push	OFFSET $SG82280
	push	OFFSET $SG82281
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@Clone@2:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppEnum$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@Clone@2
	push	1280					; 00000500H
	push	OFFSET $SG82285
	push	OFFSET $SG82286
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@Clone@2:
; Line 1281
	mov	DWORD PTR _hr$[ebp], 0
; Line 1284
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreWeOutOfSync@CEnumMediaTypes@@AAEHXZ	; CEnumMediaTypes::AreWeOutOfSync
	cmp	eax, 1
	jne	SHORT $LN3@Clone@2
; Line 1285
	mov	edx, DWORD PTR _ppEnum$[ebp]
	mov	DWORD PTR [edx], 0
; Line 1286
	mov	DWORD PTR _hr$[ebp], -2147220989	; 80040203H
; Line 1287
	jmp	SHORT $LN2@Clone@2
$LN3@Clone@2:
; Line 1290
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T85950[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T85950[ebp], 0
	je	SHORT $LN9@Clone@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR $T85950[ebp]
	call	??0CEnumMediaTypes@@QAE@PAVCBasePin@@PAV0@@Z ; CEnumMediaTypes::CEnumMediaTypes
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN10@Clone@2
$LN9@Clone@2:
	mov	DWORD PTR tv95[ebp], 0
$LN10@Clone@2:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T85949[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _ppEnum$[ebp]
	mov	edx, DWORD PTR $T85949[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1292
	mov	eax, DWORD PTR _ppEnum$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@Clone@2
; Line 1293
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
$LN2@Clone@2:
; Line 1296
	mov	eax, DWORD PTR _hr$[ebp]
$LN7@Clone@2:
; Line 1297
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z$0:
	mov	eax, DWORD PTR $T85950[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Clone@CEnumMediaTypes@@UAGJPAPAUIEnumMediaTypes@@@Z ENDP ; CEnumMediaTypes::Clone
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AreWeOutOfSync@CEnumMediaTypes@@AAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AreWeOutOfSync@CEnumMediaTypes@@AAEHXZ PROC		; CEnumMediaTypes::AreWeOutOfSync, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 668
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 669
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx+12]
	setne	dl
	mov	eax, edx
; Line 670
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreWeOutOfSync@CEnumMediaTypes@@AAEHXZ ENDP		; CEnumMediaTypes::AreWeOutOfSync
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__CoTaskMemAlloc@4:PROC
EXTRN	??1CMediaType@@QAE@XZ:PROC			; CMediaType::~CMediaType
EXTRN	??0CMediaType@@QAE@XZ:PROC			; CMediaType::CMediaType
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z$0
__ehfuncinfo$?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z
_TEXT	SEGMENT
tv142 = -180						; size = 4
$T82338 = -176						; size = 72
_hr$82331 = -104					; size = 4
_cmt$82330 = -96					; size = 72
_cFetched$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_cMediaTypes$ = 12					; size = 4
_ppMediaTypes$ = 16					; size = 4
_pcFetched$ = 20					; size = 4
?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z PROC ; CEnumMediaTypes::Next, COMDAT
; Line 1314
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1315
	cmp	DWORD PTR _ppMediaTypes$[ebp], 0
	jne	SHORT $LN13@Next@2
	mov	eax, -2147467261			; 80004003H
	jmp	$LN14@Next@2
$LN13@Next@2:
; Line 1316
	mov	eax, DWORD PTR _cMediaTypes$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ppMediaTypes$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@Next@2
	push	1316					; 00000524H
	push	OFFSET $SG82308
	push	OFFSET $SG82309
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN12@Next@2:
	mov	edx, DWORD PTR _cMediaTypes$[ebp]
	shl	edx, 2
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ppMediaTypes$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN11@Next@2
	push	1316					; 00000524H
	push	OFFSET $SG82313
	push	OFFSET $SG82314
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN11@Next@2:
; Line 1318
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreWeOutOfSync@CEnumMediaTypes@@AAEHXZ	; CEnumMediaTypes::AreWeOutOfSync
	cmp	eax, 1
	jne	SHORT $LN10@Next@2
; Line 1319
	mov	eax, -2147220989			; 80040203H
	jmp	$LN14@Next@2
$LN10@Next@2:
; Line 1322
	cmp	DWORD PTR _pcFetched$[ebp], 0
	je	SHORT $LN9@Next@2
; Line 1323
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _pcFetched$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN8@Next@2
	push	1323					; 0000052bH
	push	OFFSET $SG82321
	push	OFFSET $SG82322
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN8@Next@2:
; Line 1324
	mov	edx, DWORD PTR _pcFetched$[ebp]
	mov	DWORD PTR [edx], 0
	jmp	SHORT $LN7@Next@2
$LN9@Next@2:
; Line 1327
	cmp	DWORD PTR _cMediaTypes$[ebp], 1
	jbe	SHORT $LN7@Next@2
; Line 1328
	mov	eax, -2147024809			; 80070057H
	jmp	$LN14@Next@2
$LN7@Next@2:
; Line 1330
	mov	DWORD PTR _cFetched$[ebp], 0
$LN5@Next@2:
; Line 1338
	cmp	DWORD PTR _cMediaTypes$[ebp], 0
	je	$LN4@Next@2
; Line 1340
	lea	ecx, DWORD PTR _cmt$82330[ebp]
	call	??0CMediaType@@QAE@XZ			; CMediaType::CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1342
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv142[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	esi, esp
	lea	edx, DWORD PTR _cmt$82330[ebp]
	push	edx
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$82331[ebp], eax
; Line 1343
	cmp	DWORD PTR _hr$82331[ebp], 0
	je	SHORT $LN3@Next@2
; Line 1344
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cmt$82330[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	jmp	$LN4@Next@2
$LN3@Next@2:
; Line 1356
	mov	esi, esp
	push	72					; 00000048H
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ppMediaTypes$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1357
	mov	edx, DWORD PTR _ppMediaTypes$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN2@Next@2
; Line 1358
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cmt$82330[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	jmp	SHORT $LN4@Next@2
$LN2@Next@2:
; Line 1362
	mov	ecx, 18					; 00000012H
	lea	esi, DWORD PTR _cmt$82330[ebp]
	lea	edi, DWORD PTR $T82338[ebp]
	rep movsd
	mov	eax, DWORD PTR _ppMediaTypes$[ebp]
	mov	edi, DWORD PTR [eax]
	mov	ecx, 18					; 00000012H
	lea	esi, DWORD PTR $T82338[ebp]
	rep movsd
; Line 1365
	mov	DWORD PTR _cmt$82330[ebp+68], 0
; Line 1366
	mov	DWORD PTR _cmt$82330[ebp+64], 0
; Line 1367
	mov	DWORD PTR _cmt$82330[ebp+60], 0
; Line 1370
	mov	ecx, DWORD PTR _ppMediaTypes$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ppMediaTypes$[ebp], ecx
; Line 1371
	mov	edx, DWORD PTR _cFetched$[ebp]
	add	edx, 1
	mov	DWORD PTR _cFetched$[ebp], edx
; Line 1372
	mov	eax, DWORD PTR _cMediaTypes$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cMediaTypes$[ebp], eax
; Line 1373
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cmt$82330[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	jmp	$LN5@Next@2
$LN4@Next@2:
; Line 1375
	cmp	DWORD PTR _pcFetched$[ebp], 0
	je	SHORT $LN1@Next@2
; Line 1376
	mov	ecx, DWORD PTR _pcFetched$[ebp]
	mov	edx, DWORD PTR _cFetched$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Next@2:
; Line 1379
	xor	eax, eax
	cmp	DWORD PTR _cMediaTypes$[ebp], 0
	setne	al
$LN14@Next@2:
; Line 1380
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Next@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN20@Next@2:
	DD	1
	DD	$LN19@Next@2
$LN19@Next@2:
	DD	-96					; ffffffa0H
	DD	72					; 00000048H
	DD	$LN17@Next@2
$LN17@Next@2:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z$0:
	lea	ecx, DWORD PTR _cmt$82330[ebp]
	jmp	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
__ehhandler$?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Next@CEnumMediaTypes@@UAGJKPAPAU_AMMediaType@@PAK@Z ENDP ; CEnumMediaTypes::Next
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Skip@CEnumMediaTypes@@UAGJK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Skip@CEnumMediaTypes@@UAGJK@Z$0
__ehfuncinfo$?Skip@CEnumMediaTypes@@UAGJK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Skip@CEnumMediaTypes@@UAGJK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Skip@CEnumMediaTypes@@UAGJK@Z
_TEXT	SEGMENT
$T85978 = -100						; size = 4
_cmt$ = -92						; size = 72
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_cMediaTypes$ = 12					; size = 4
?Skip@CEnumMediaTypes@@UAGJK@Z PROC			; CEnumMediaTypes::Skip, COMDAT
; Line 1387
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Skip@CEnumMediaTypes@@UAGJK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1390
	cmp	DWORD PTR _cMediaTypes$[ebp], 0
	jne	SHORT $LN2@Skip@2
; Line 1391
	xor	eax, eax
	jmp	SHORT $LN3@Skip@2
$LN2@Skip@2:
; Line 1395
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreWeOutOfSync@CEnumMediaTypes@@AAEHXZ	; CEnumMediaTypes::AreWeOutOfSync
	cmp	eax, 1
	jne	SHORT $LN1@Skip@2
; Line 1396
	mov	eax, -2147220989			; 80040203H
	jmp	SHORT $LN3@Skip@2
$LN1@Skip@2:
; Line 1399
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _cMediaTypes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 1402
	lea	ecx, DWORD PTR _cmt$[ebp]
	call	??0CMediaType@@QAE@XZ			; CMediaType::CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1403
	mov	esi, esp
	lea	eax, DWORD PTR _cmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR $T85978[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cmt$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	eax, DWORD PTR $T85978[ebp]
$LN3@Skip@2:
; Line 1404
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Skip@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@Skip@2:
	DD	1
	DD	$LN8@Skip@2
$LN8@Skip@2:
	DD	-92					; ffffffa4H
	DD	72					; 00000048H
	DD	$LN6@Skip@2
$LN6@Skip@2:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Skip@CEnumMediaTypes@@UAGJK@Z$0:
	lea	ecx, DWORD PTR _cmt$[ebp]
	jmp	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
__ehhandler$?Skip@CEnumMediaTypes@@UAGJK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Skip@CEnumMediaTypes@@UAGJK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Skip@CEnumMediaTypes@@UAGJK@Z ENDP			; CEnumMediaTypes::Skip
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reset@CEnumMediaTypes@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Reset@CEnumMediaTypes@@UAGJXZ PROC			; CEnumMediaTypes::Reset, COMDAT
; Line 1418
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1419
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1424
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1425
	xor	eax, eax
; Line 1426
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Reset@CEnumMediaTypes@@UAGJXZ ENDP			; CEnumMediaTypes::Reset
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	??0CRefTime@@QAE@_J@Z				; CRefTime::CRefTime
PUBLIC	??0IQualityControl@@QAE@XZ			; IQualityControl::IQualityControl
PUBLIC	??0IPin@@QAE@XZ					; IPin::IPin
PUBLIC	??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z ; CBasePin::CBasePin
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z$1
__ehfuncinfo$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z
_TEXT	SEGMENT
$T85993 = -24						; size = 4
_nameLen$82373 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pObjectName$ = 8					; size = 4
_pFilter$ = 12						; size = 4
_pLock$ = 16						; size = 4
_phr$ = 20						; size = 4
_pName$ = 24						; size = 4
_dir$ = 28						; size = 4
??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z PROC ; CBasePin::CBasePin, COMDAT
; _this$ = ecx
; Line 1467
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	eax, DWORD PTR _pObjectName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PB_WPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IPin@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0IQualityControl@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pLock$[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+41], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+42], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pFilter$[ebp]
	mov	DWORD PTR [ecx+44], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CMediaType@@QAE@XZ			; CMediaType::CMediaType
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	push	2147483647				; 7fffffffH
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0CRefTime@@QAE@_J@Z			; CRefTime::CRefTime
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	QWORD PTR [edx+144]
; Line 1476
	cmp	DWORD PTR _pFilter$[ebp], 0
	jne	SHORT $LN4@CBasePin
	push	1476					; 000005c4H
	push	OFFSET $SG82367
	push	OFFSET $SG82368
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CBasePin:
; Line 1477
	cmp	DWORD PTR _pLock$[ebp], 0
	jne	SHORT $LN3@CBasePin
	push	1477					; 000005c5H
	push	OFFSET $SG82370
	push	OFFSET $SG82371
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CBasePin:
; Line 1479
	cmp	DWORD PTR _pName$[ebp], 0
	je	SHORT $LN1@CBasePin
; Line 1480
	mov	esi, esp
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR _nameLen$82373[ebp], eax
; Line 1481
	xor	ecx, ecx
	mov	eax, DWORD PTR _nameLen$82373[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T85993[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T85993[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1482
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN1@CBasePin
; Line 1483
	mov	eax, DWORD PTR _nameLen$82373[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@CBasePin:
; Line 1488
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], 0
; Line 1490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__unwindfunclet$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
__ehhandler$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z ENDP ; CBasePin::CBasePin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CRefTime@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rt$ = 8						; size = 8
??0CRefTime@@QAE@_J@Z PROC				; CRefTime::CRefTime, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\reftime.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rt$[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0CRefTime@@QAE@_J@Z ENDP				; CRefTime::CRefTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IPin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IPin@@QAE@XZ PROC					; IPin::IPin, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IPin@@QAE@XZ ENDP					; IPin::IPin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IQualityControl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IQualityControl@@QAE@XZ PROC				; IQualityControl::IQualityControl, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IQualityControl@@QAE@XZ ENDP				; IQualityControl::IQualityControl
_TEXT	ENDS
PUBLIC	??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z ; CBasePin::CBasePin
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z$1
__ehfuncinfo$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z
_TEXT	SEGMENT
$T86013 = -24						; size = 4
_nameLen$82402 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pObjectName$ = 8					; size = 4
_pFilter$ = 12						; size = 4
_pLock$ = 16						; size = 4
_phr$ = 20						; size = 4
_pName$ = 24						; size = 4
_dir$ = 28						; size = 4
??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z PROC ; CBasePin::CBasePin, COMDAT
; _this$ = ecx
; Line 1513
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	eax, DWORD PTR _pObjectName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PBDPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IPin@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0IQualityControl@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dir$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pLock$[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+41], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+42], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pFilter$[ebp]
	mov	DWORD PTR [ecx+44], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CMediaType@@QAE@XZ			; CMediaType::CMediaType
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	push	2147483647				; 7fffffffH
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0CRefTime@@QAE@_J@Z			; CRefTime::CRefTime
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	QWORD PTR [edx+144]
; Line 1522
	cmp	DWORD PTR _pFilter$[ebp], 0
	jne	SHORT $LN4@CBasePin@2
	push	1522					; 000005f2H
	push	OFFSET $SG82396
	push	OFFSET $SG82397
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CBasePin@2:
; Line 1523
	cmp	DWORD PTR _pLock$[ebp], 0
	jne	SHORT $LN3@CBasePin@2
	push	1523					; 000005f3H
	push	OFFSET $SG82399
	push	OFFSET $SG82400
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CBasePin@2:
; Line 1525
	cmp	DWORD PTR _pName$[ebp], 0
	je	SHORT $LN1@CBasePin@2
; Line 1526
	mov	esi, esp
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR _nameLen$82402[ebp], eax
; Line 1527
	xor	ecx, ecx
	mov	eax, DWORD PTR _nameLen$82402[ebp]
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T86013[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T86013[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1528
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN1@CBasePin@2
; Line 1529
	mov	eax, DWORD PTR _nameLen$82402[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@CBasePin@2:
; Line 1534
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], 0
; Line 1536
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__unwindfunclet$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
__ehhandler$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z ENDP ; CBasePin::CBasePin
PUBLIC	??1CBasePin@@UAE@XZ				; CBasePin::~CBasePin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBasePin@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBasePin@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBasePin@@UAE@XZ$1
__ehfuncinfo$??1CBasePin@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CBasePin@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBasePin@@UAE@XZ
_TEXT	SEGMENT
$T86024 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBasePin@@UAE@XZ PROC				; CBasePin::~CBasePin, COMDAT
; _this$ = ecx
; Line 1543
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBasePin@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1548
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@CBasePin@3
	push	1548					; 0000060cH
	push	OFFSET $SG82411
	push	OFFSET $SG82412
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBasePin@3:
; Line 1550
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR $T86024[ebp], edx
	mov	eax, DWORD PTR $T86024[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 1553
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+152], 0
	je	SHORT $LN3@CBasePin@3
	push	1553					; 00000611H
	push	OFFSET $SG82415
	push	OFFSET $SG82416
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CBasePin@3:
; Line 1554
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBasePin@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__unwindfunclet$??1CBasePin@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
__ehhandler$??1CBasePin@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBasePin@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBasePin@@UAE@XZ ENDP				; CBasePin::~CBasePin
PUBLIC	?NonDelegatingQueryInterface@CBasePin@@UAGJABU_GUID@@PAPAX@Z ; CBasePin::NonDelegatingQueryInterface
EXTRN	_IID_IQualityControl:BYTE
EXTRN	_IID_IPin:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingQueryInterface@CBasePin@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv94 = -8						; size = 4
tv77 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CBasePin@@UAGJABU_GUID@@PAPAX@Z PROC ; CBasePin::NonDelegatingQueryInterface, COMDAT
; Line 1561
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1564
	push	OFFSET _IID_IPin
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@NonDelegat@4
; Line 1565
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN7@NonDelegat@4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN8@NonDelegat@4
$LN7@NonDelegat@4:
	mov	DWORD PTR tv77[ebp], 0
$LN8@NonDelegat@4:
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN5@NonDelegat@4
	jmp	SHORT $LN5@NonDelegat@4
$LN4@NonDelegat@4:
; Line 1566
	push	OFFSET _IID_IQualityControl
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@NonDelegat@4
; Line 1567
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@NonDelegat@4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN10@NonDelegat@4
$LN9@NonDelegat@4:
	mov	DWORD PTR tv94[ebp], 0
$LN10@NonDelegat@4:
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv94[ebp]
	push	ecx
	call	_GetInterface@8
	jmp	SHORT $LN5@NonDelegat@4
; Line 1568
	jmp	SHORT $LN5@NonDelegat@4
$LN2@NonDelegat@4:
; Line 1569
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z ; CUnknown::NonDelegatingQueryInterface
$LN5@NonDelegat@4:
; Line 1571
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CBasePin@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBasePin::NonDelegatingQueryInterface
_TEXT	ENDS
PUBLIC	?NonDelegatingAddRef@CBasePin@@UAGKXZ		; CBasePin::NonDelegatingAddRef
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingAddRef@CBasePin@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?NonDelegatingAddRef@CBasePin@@UAGKXZ PROC		; CBasePin::NonDelegatingAddRef, COMDAT
; Line 1578
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1579
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jg	SHORT $LN1@NonDelegat@5
	push	1579					; 0000062bH
	push	OFFSET $SG82432
	push	OFFSET $SG82433
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@NonDelegat@5:
; Line 1580
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [edx+16]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1581
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?NonDelegatingAddRef@CBasePin@@UAGKXZ ENDP		; CBasePin::NonDelegatingAddRef
_TEXT	ENDS
PUBLIC	?NonDelegatingRelease@CBasePin@@UAGKXZ		; CBasePin::NonDelegatingRelease
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingRelease@CBasePin@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?NonDelegatingRelease@CBasePin@@UAGKXZ PROC		; CBasePin::NonDelegatingRelease, COMDAT
; Line 1588
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1589
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedDecrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN1@NonDelegat@6
	push	1589					; 00000635H
	push	OFFSET $SG82438
	push	OFFSET $SG82439
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@NonDelegat@6:
; Line 1590
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [edx+16]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1591
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?NonDelegatingRelease@CBasePin@@UAGKXZ ENDP		; CBasePin::NonDelegatingRelease
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DisplayPinInfo@CBasePin@@IAEXPAUIPin@@@Z	; CBasePin::DisplayPinInfo
EXTRN	?DbgLogInfo@@YAXKKPB_WZZ:PROC			; DbgLogInfo
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	?DbgCheckModuleLevel@@YGHKK@Z:PROC		; DbgCheckModuleLevel
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DisplayPinInfo@CBasePin@@IAEXPAUIPin@@@Z
_TEXT	SEGMENT
_ReceivePinInfo$82446 = -548				; size = 264
_ConnectPinInfo$82445 = -276				; size = 264
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pReceivePin$ = 8					; size = 4
?DisplayPinInfo@CBasePin@@IAEXPAUIPin@@@Z PROC		; CBasePin::DisplayPinInfo, COMDAT
; _this$ = ecx
; Line 1599
	push	ebp
	mov	ebp, esp
	sub	esp, 552				; 00000228H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-552]
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1601
	push	3
	push	2
	call	?DbgCheckModuleLevel@@YGHKK@Z		; DbgCheckModuleLevel
	test	eax, eax
	je	$LN8@DisplayPin
; Line 1605
	mov	esi, esp
	lea	eax, DWORD PTR _ConnectPinInfo$82445[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	ecx
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN6@DisplayPin
; Line 1606
	mov	esi, esp
	push	OFFSET $SG82449
	lea	edx, DWORD PTR _ConnectPinInfo$82445[ebp+8]
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1607
	jmp	SHORT $LN5@DisplayPin
$LN6@DisplayPin:
; Line 1608
	cmp	DWORD PTR _ConnectPinInfo$82445[ebp], 0
	je	SHORT $LN5@DisplayPin
	mov	eax, DWORD PTR _ConnectPinInfo$82445[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _ConnectPinInfo$82445[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@DisplayPin:
; Line 1611
	mov	esi, esp
	lea	ecx, DWORD PTR _ReceivePinInfo$82446[ebp]
	push	ecx
	mov	edx, DWORD PTR _pReceivePin$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pReceivePin$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN3@DisplayPin
; Line 1612
	mov	esi, esp
	push	OFFSET $SG82454
	lea	eax, DWORD PTR _ReceivePinInfo$82446[ebp+8]
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1613
	jmp	SHORT $LN2@DisplayPin
$LN3@DisplayPin:
; Line 1614
	cmp	DWORD PTR _ReceivePinInfo$82446[ebp], 0
	je	SHORT $LN2@DisplayPin
	mov	ecx, DWORD PTR _ReceivePinInfo$82446[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _ReceivePinInfo$82446[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DisplayPin:
; Line 1617
	push	OFFSET $SG82457
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1618
	lea	edx, DWORD PTR _ConnectPinInfo$82445[ebp+8]
	push	edx
	push	OFFSET $SG82458
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 1619
	lea	eax, DWORD PTR _ReceivePinInfo$82446[ebp+8]
	push	eax
	push	OFFSET $SG82459
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
$LN8@DisplayPin:
; Line 1621
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@DisplayPin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 552				; 00000228H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN13@DisplayPin:
	DD	2
	DD	$LN12@DisplayPin
$LN12@DisplayPin:
	DD	-276					; fffffeecH
	DD	264					; 00000108H
	DD	$LN10@DisplayPin
	DD	-548					; fffffddcH
	DD	264					; 00000108H
	DD	$LN11@DisplayPin
$LN11@DisplayPin:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN10@DisplayPin:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
?DisplayPinInfo@CBasePin@@IAEXPAUIPin@@@Z ENDP		; CBasePin::DisplayPinInfo
_TEXT	ENDS
PUBLIC	?Subtype@CMediaType@@QBEPBU_GUID@@XZ		; CMediaType::Subtype
PUBLIC	?Type@CMediaType@@QBEPBU_GUID@@XZ		; CMediaType::Type
PUBLIC	?DisplayTypeInfo@CBasePin@@IAEXPAUIPin@@PBVCMediaType@@@Z ; CBasePin::DisplayTypeInfo
EXTRN	??ACGuidNameList@@QAEPADABU_GUID@@@Z:PROC	; CGuidNameList::operator[]
EXTRN	?GuidNames@@3VCGuidNameList@@A:BYTE		; GuidNames
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DisplayTypeInfo@CBasePin@@IAEXPAUIPin@@PBVCMediaType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pPin$ = 8						; size = 4
_pmt$ = 12						; size = 4
?DisplayTypeInfo@CBasePin@@IAEXPAUIPin@@PBVCMediaType@@@Z PROC ; CBasePin::DisplayTypeInfo, COMDAT
; _this$ = ecx
; Line 1629
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1631
	push	3
	push	2
	call	?DbgCheckModuleLevel@@YGHKK@Z		; DbgCheckModuleLevel
	test	eax, eax
	je	SHORT $LN2@DisplayTyp
; Line 1632
	push	OFFSET $SG82466
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1634
	mov	ecx, DWORD PTR _pmt$[ebp]
	call	?Type@CMediaType@@QBEPBU_GUID@@XZ	; CMediaType::Type
	push	eax
	mov	ecx, OFFSET ?GuidNames@@3VCGuidNameList@@A ; GuidNames
	call	??ACGuidNameList@@QAEPADABU_GUID@@@Z	; CGuidNameList::operator[]
	push	eax
	push	OFFSET $SG82467
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 1636
	mov	ecx, DWORD PTR _pmt$[ebp]
	call	?Subtype@CMediaType@@QBEPBU_GUID@@XZ	; CMediaType::Subtype
	push	eax
	mov	ecx, OFFSET ?GuidNames@@3VCGuidNameList@@A ; GuidNames
	call	??ACGuidNameList@@QAEPADABU_GUID@@@Z	; CGuidNameList::operator[]
	push	eax
	push	OFFSET $SG82468
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
$LN2@DisplayTyp:
; Line 1638
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?DisplayTypeInfo@CBasePin@@IAEXPAUIPin@@PBVCMediaType@@@Z ENDP ; CBasePin::DisplayTypeInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Type@CMediaType@@QBEPBU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@CMediaType@@QBEPBU_GUID@@XZ PROC			; CMediaType::Type, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.h
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@CMediaType@@QBEPBU_GUID@@XZ ENDP			; CMediaType::Type
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Subtype@CMediaType@@QBEPBU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Subtype@CMediaType@@QBEPBU_GUID@@XZ PROC		; CMediaType::Subtype, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtype@CMediaType@@QBEPBU_GUID@@XZ ENDP		; CMediaType::Subtype
_TEXT	ENDS
PUBLIC	?AgreeMediaType@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z ; CBasePin::AgreeMediaType
PUBLIC	?IsStopped@CBasePin@@QAEHXZ			; CBasePin::IsStopped
PUBLIC	?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z ; CBasePin::Connect
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z$0
__ehfuncinfo$?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
_TEXT	SEGMENT
$T86061 = -48						; size = 4
$T86060 = -44						; size = 4
$T86059 = -40						; size = 4
$T86058 = -36						; size = 4
_hr$ = -32						; size = 4
_ptype$ = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pReceivePin$ = 12					; size = 4
_pmt$ = 16						; size = 4
?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z PROC ; CBasePin::Connect, COMDAT
; Line 1652
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1653
	cmp	DWORD PTR _pReceivePin$[ebp], 0
	jne	SHORT $LN6@Connect
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@Connect
$LN6@Connect:
; Line 1654
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pReceivePin$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Connect
	push	1654					; 00000676H
	push	OFFSET $SG82479
	push	OFFSET $SG82480
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@Connect:
; Line 1655
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1656
	mov	eax, DWORD PTR _pReceivePin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?DisplayPinInfo@CBasePin@@IAEXPAUIPin@@@Z ; CBasePin::DisplayPinInfo
; Line 1660
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN4@Connect
; Line 1661
	push	OFFSET $SG82483
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1662
	mov	DWORD PTR $T86058[ebp], -2147220988	; 80040204H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86058[ebp]
	jmp	$LN7@Connect
$LN4@Connect:
; Line 1666
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?IsStopped@CBasePin@@QAEHXZ		; CBasePin::IsStopped
	test	eax, eax
	jne	SHORT $LN3@Connect
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	test	eax, eax
	jne	SHORT $LN3@Connect
; Line 1667
	mov	DWORD PTR $T86059[ebp], -2147220956	; 80040224H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86059[ebp]
	jmp	$LN7@Connect
$LN3@Connect:
; Line 1677
	mov	ecx, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR _ptype$[ebp], ecx
; Line 1678
	mov	edx, DWORD PTR _ptype$[ebp]
	push	edx
	mov	eax, DWORD PTR _pReceivePin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?AgreeMediaType@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z ; CBasePin::AgreeMediaType
	mov	DWORD PTR _hr$[ebp], eax
; Line 1679
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@Connect
; Line 1680
	push	OFFSET $SG82494
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1684
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	esi, esp
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN1@Connect
	push	1684					; 00000694H
	push	OFFSET $SG82497
	push	OFFSET $SG82498
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Connect:
; Line 1687
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T86060[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86060[ebp]
	jmp	SHORT $LN7@Connect
$LN2@Connect:
; Line 1690
	push	OFFSET $SG82500
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1693
	mov	DWORD PTR $T86061[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86061[ebp]
$LN7@Connect:
; Line 1694
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Connect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN13@Connect:
	DD	1
	DD	$LN12@Connect
$LN12@Connect:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@Connect
$LN10@Connect:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z ENDP ; CBasePin::Connect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsStopped@CBasePin@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStopped@CBasePin@@QAEHXZ PROC			; CBasePin::IsStopped, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 504
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 505
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	xor	eax, eax
	cmp	DWORD PTR [ecx+24], 0
	sete	al
; Line 506
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStopped@CBasePin@@QAEHXZ ENDP			; CBasePin::IsStopped
_TEXT	ENDS
PUBLIC	?AttemptConnection@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z ; CBasePin::AttemptConnection
EXTRN	?CritCheckIn@@YGHPAVCCritSec@@@Z:PROC		; CritCheckIn
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AttemptConnection@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z
_TEXT	SEGMENT
tv160 = -12						; size = 4
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pReceivePin$ = 8					; size = 4
_pmt$ = 12						; size = 4
?AttemptConnection@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z PROC ; CBasePin::AttemptConnection, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 1703
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1708
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?CritCheckIn@@YGHPAVCCritSec@@@Z	; CritCheckIn
	test	eax, eax
	jne	SHORT $LN13@AttemptCon
	push	1708					; 000006acH
	push	OFFSET $SG82508
	push	OFFSET $SG82509
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN13@AttemptCon:
; Line 1712
	mov	esi, esp
	mov	edx, DWORD PTR _pReceivePin$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1713
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN12@AttemptCon
; Line 1714
	push	OFFSET $SG82513
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1718
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN11@AttemptCon
	push	1718					; 000006b6H
	push	OFFSET $SG82516
	push	OFFSET $SG82517
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN11@AttemptCon:
; Line 1720
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN14@AttemptCon
$LN12@AttemptCon:
; Line 1723
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pReceivePin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayTypeInfo@CBasePin@@IAEXPAUIPin@@PBVCMediaType@@@Z ; CBasePin::DisplayTypeInfo
; Line 1727
	mov	esi, esp
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1728
	cmp	DWORD PTR _hr$[ebp], 0
	jne	$LN10@AttemptCon
; Line 1733
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pReceivePin$[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 1734
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1735
	mov	esi, esp
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1736
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN9@AttemptCon
; Line 1739
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN16@AttemptCon
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv160[ebp], ecx
	jmp	SHORT $LN17@AttemptCon
$LN16@AttemptCon:
	mov	DWORD PTR tv160[ebp], 0
$LN17@AttemptCon:
	mov	esi, esp
	mov	edx, DWORD PTR _pmt$[ebp]
	push	edx
	mov	eax, DWORD PTR tv160[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReceivePin$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pReceivePin$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1740
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN9@AttemptCon
; Line 1743
	mov	esi, esp
	mov	edx, DWORD PTR _pReceivePin$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1744
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN7@AttemptCon
; Line 1745
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN14@AttemptCon
; Line 1746
	jmp	SHORT $LN9@AttemptCon
$LN7@AttemptCon:
; Line 1749
	push	OFFSET $SG82527
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1750
	mov	ecx, DWORD PTR _pReceivePin$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pReceivePin$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@AttemptCon:
; Line 1754
	jmp	SHORT $LN5@AttemptCon
$LN10@AttemptCon:
; Line 1762
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@AttemptCon
	cmp	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	je	SHORT $LN3@AttemptCon
	cmp	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
	jne	SHORT $LN5@AttemptCon
$LN3@AttemptCon:
; Line 1763
	mov	DWORD PTR _hr$[ebp], -2147220950	; 8004022aH
$LN5@AttemptCon:
; Line 1773
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN2@AttemptCon
	push	1773					; 000006edH
	push	OFFSET $SG82537
	push	OFFSET $SG82538
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@AttemptCon:
; Line 1776
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@AttemptCon
; Line 1777
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1778
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN1@AttemptCon:
; Line 1781
	mov	eax, DWORD PTR _hr$[ebp]
$LN14@AttemptCon:
; Line 1782
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AttemptConnection@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z ENDP ; CBasePin::AttemptConnection
_TEXT	ENDS
PUBLIC	?TryMediaTypes@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@PAUIEnumMediaTypes@@@Z ; CBasePin::TryMediaTypes
EXTRN	?DeleteMediaType@@YGXPAU_AMMediaType@@@Z:PROC	; DeleteMediaType
EXTRN	?MatchesPartial@CMediaType@@QBEHPBV1@@Z:PROC	; CMediaType::MatchesPartial
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?TryMediaTypes@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@PAUIEnumMediaTypes@@@Z
_TEXT	SEGMENT
_hrFailure$ = -36					; size = 4
_ulMediaCount$ = -28					; size = 4
_pMediaType$ = -16					; size = 4
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pReceivePin$ = 8					; size = 4
_pmt$ = 12						; size = 4
_pEnum$ = 16						; size = 4
?TryMediaTypes@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@PAUIEnumMediaTypes@@@Z PROC ; CBasePin::TryMediaTypes, COMDAT
; _this$ = ecx
; Line 1795
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1798
	mov	eax, DWORD PTR _pEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEnum$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1799
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN12@TryMediaTy
; Line 1800
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN13@TryMediaTy
$LN12@TryMediaTy:
; Line 1803
	mov	DWORD PTR _pMediaType$[ebp], 0
; Line 1804
	mov	DWORD PTR _ulMediaCount$[ebp], 0
; Line 1807
	mov	DWORD PTR _hrFailure$[ebp], 0
$LN11@TryMediaTy:
; Line 1816
	mov	esi, esp
	lea	ecx, DWORD PTR _ulMediaCount$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pMediaType$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _pEnum$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pEnum$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1817
	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN9@TryMediaTy
; Line 1818
	cmp	DWORD PTR _hrFailure$[ebp], 0
	jne	SHORT $LN8@TryMediaTy
; Line 1819
	mov	DWORD PTR _hrFailure$[ebp], -2147220985	; 80040207H
$LN8@TryMediaTy:
; Line 1821
	mov	eax, DWORD PTR _hrFailure$[ebp]
	jmp	$LN13@TryMediaTy
$LN9@TryMediaTy:
; Line 1825
	cmp	DWORD PTR _ulMediaCount$[ebp], 1
	je	SHORT $LN7@TryMediaTy
	push	1825					; 00000721H
	push	OFFSET $SG82563
	push	OFFSET $SG82564
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@TryMediaTy:
; Line 1826
	cmp	DWORD PTR _pMediaType$[ebp], 0
	jne	SHORT $LN6@TryMediaTy
	push	1826					; 00000722H
	push	OFFSET $SG82566
	push	OFFSET $SG82567
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@TryMediaTy:
; Line 1831
	cmp	DWORD PTR _pmt$[ebp], 0
	je	SHORT $LN4@TryMediaTy
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMediaType$[ebp]
	call	?MatchesPartial@CMediaType@@QBEHPBV1@@Z	; CMediaType::MatchesPartial
	test	eax, eax
	je	SHORT $LN5@TryMediaTy
$LN4@TryMediaTy:
; Line 1833
	mov	edx, DWORD PTR _pMediaType$[ebp]
	push	edx
	mov	eax, DWORD PTR _pReceivePin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AttemptConnection@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z ; CBasePin::AttemptConnection
	mov	DWORD PTR _hr$[ebp], eax
; Line 1840
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@TryMediaTy
	cmp	DWORD PTR _hrFailure$[ebp], 0
	jl	SHORT $LN3@TryMediaTy
	cmp	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	je	SHORT $LN3@TryMediaTy
	cmp	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
	je	SHORT $LN3@TryMediaTy
	cmp	DWORD PTR _hr$[ebp], -2147220950	; 8004022aH
	je	SHORT $LN3@TryMediaTy
; Line 1841
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR _hrFailure$[ebp], ecx
$LN3@TryMediaTy:
; Line 1843
	jmp	SHORT $LN2@TryMediaTy
$LN5@TryMediaTy:
; Line 1844
	mov	DWORD PTR _hr$[ebp], -2147220985	; 80040207H
$LN2@TryMediaTy:
; Line 1847
	mov	edx, DWORD PTR _pMediaType$[ebp]
	push	edx
	call	?DeleteMediaType@@YGXPAU_AMMediaType@@@Z ; DeleteMediaType
; Line 1849
	cmp	DWORD PTR _hr$[ebp], 0
	jne	SHORT $LN1@TryMediaTy
; Line 1850
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN13@TryMediaTy
$LN1@TryMediaTy:
; Line 1852
	jmp	$LN11@TryMediaTy
$LN13@TryMediaTy:
; Line 1853
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TryMediaTy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN18@TryMediaTy:
	DD	2
	DD	$LN17@TryMediaTy
$LN17@TryMediaTy:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN15@TryMediaTy
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN16@TryMediaTy
$LN16@TryMediaTy:
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN15@TryMediaTy:
	DB	112					; 00000070H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
?TryMediaTypes@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@PAUIEnumMediaTypes@@@Z ENDP ; CBasePin::TryMediaTypes
_TEXT	ENDS
EXTRN	?IsPartiallySpecified@CMediaType@@QBEHXZ:PROC	; CMediaType::IsPartiallySpecified
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AgreeMediaType@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z
_TEXT	SEGMENT
_hr$82596 = -28						; size = 4
_i$82592 = -24						; size = 4
_hrFailure$ = -20					; size = 4
_pEnumMediaTypes$ = -12					; size = 4
_this$ = -4						; size = 4
_pReceivePin$ = 8					; size = 4
_pmt$ = 12						; size = 4
?AgreeMediaType@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z PROC ; CBasePin::AgreeMediaType, COMDAT
; _this$ = ecx
; Line 1868
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1869
	cmp	DWORD PTR _pReceivePin$[ebp], 0
	jne	SHORT $LN12@AgreeMedia
	push	1869					; 0000074dH
	push	OFFSET $SG82586
	push	OFFSET $SG82587
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN12@AgreeMedia:
; Line 1870
	mov	DWORD PTR _pEnumMediaTypes$[ebp], 0
; Line 1873
	cmp	DWORD PTR _pmt$[ebp], 0
	je	SHORT $LN11@AgreeMedia
	mov	ecx, DWORD PTR _pmt$[ebp]
	call	?IsPartiallySpecified@CMediaType@@QBEHXZ ; CMediaType::IsPartiallySpecified
	test	eax, eax
	jne	SHORT $LN11@AgreeMedia
; Line 1879
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReceivePin$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AttemptConnection@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z ; CBasePin::AttemptConnection
	jmp	$LN13@AgreeMedia
$LN11@AgreeMedia:
; Line 1885
	mov	DWORD PTR _hrFailure$[ebp], -2147220985	; 80040207H
; Line 1887
	mov	DWORD PTR _i$82592[ebp], 0
	jmp	SHORT $LN10@AgreeMedia
$LN9@AgreeMedia:
	mov	edx, DWORD PTR _i$82592[ebp]
	add	edx, 1
	mov	DWORD PTR _i$82592[ebp], edx
$LN10@AgreeMedia:
	cmp	DWORD PTR _i$82592[ebp], 2
	jge	$LN8@AgreeMedia
; Line 1889
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+42]
	cmp	DWORD PTR _i$82592[ebp], ecx
	jne	SHORT $LN7@AgreeMedia
; Line 1890
	mov	esi, esp
	lea	edx, DWORD PTR _pEnumMediaTypes$[ebp]
	push	edx
	mov	eax, DWORD PTR _pReceivePin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pReceivePin$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$82596[ebp], eax
; Line 1891
	jmp	SHORT $LN6@AgreeMedia
$LN7@AgreeMedia:
; Line 1892
	mov	esi, esp
	lea	ecx, DWORD PTR _pEnumMediaTypes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	edx
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$82596[ebp], eax
$LN6@AgreeMedia:
; Line 1894
	cmp	DWORD PTR _hr$82596[ebp], 0
	jl	SHORT $LN5@AgreeMedia
; Line 1895
	cmp	DWORD PTR _pEnumMediaTypes$[ebp], 0
	jne	SHORT $LN4@AgreeMedia
	push	1895					; 00000767H
	push	OFFSET $SG82603
	push	OFFSET $SG82604
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@AgreeMedia:
; Line 1896
	mov	eax, DWORD PTR _pEnumMediaTypes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pReceivePin$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TryMediaTypes@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@PAUIEnumMediaTypes@@@Z ; CBasePin::TryMediaTypes
	mov	DWORD PTR _hr$82596[ebp], eax
; Line 1897
	mov	eax, DWORD PTR _pEnumMediaTypes$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEnumMediaTypes$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1898
	cmp	DWORD PTR _hr$82596[ebp], 0
	jl	SHORT $LN3@AgreeMedia
; Line 1899
	xor	eax, eax
	jmp	SHORT $LN13@AgreeMedia
; Line 1900
	jmp	SHORT $LN5@AgreeMedia
$LN3@AgreeMedia:
; Line 1904
	cmp	DWORD PTR _hr$82596[ebp], -2147467259	; 80004005H
	je	SHORT $LN5@AgreeMedia
	cmp	DWORD PTR _hr$82596[ebp], -2147024809	; 80070057H
	je	SHORT $LN5@AgreeMedia
	cmp	DWORD PTR _hr$82596[ebp], -2147220950	; 8004022aH
	je	SHORT $LN5@AgreeMedia
; Line 1905
	mov	ecx, DWORD PTR _hr$82596[ebp]
	mov	DWORD PTR _hrFailure$[ebp], ecx
$LN5@AgreeMedia:
; Line 1909
	jmp	$LN9@AgreeMedia
$LN8@AgreeMedia:
; Line 1911
	mov	eax, DWORD PTR _hrFailure$[ebp]
$LN13@AgreeMedia:
; Line 1912
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@AgreeMedia
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN17@AgreeMedia:
	DD	1
	DD	$LN16@AgreeMedia
$LN16@AgreeMedia:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN15@AgreeMedia
$LN15@AgreeMedia:
	DB	112					; 00000070H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?AgreeMediaType@CBasePin@@IAEJPAUIPin@@PBVCMediaType@@@Z ENDP ; CBasePin::AgreeMediaType
_TEXT	ENDS
PUBLIC	?CompleteConnect@CBasePin@@UAEJPAUIPin@@@Z	; CBasePin::CompleteConnect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CompleteConnect@CBasePin@@UAEJPAUIPin@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pReceivePin$ = 8					; size = 4
?CompleteConnect@CBasePin@@UAEJPAUIPin@@@Z PROC		; CBasePin::CompleteConnect, COMDAT
; _this$ = ecx
; Line 1920
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1922
	xor	eax, eax
; Line 1923
	mov	esp, ebp
	pop	ebp
	ret	4
?CompleteConnect@CBasePin@@UAEJPAUIPin@@@Z ENDP		; CBasePin::CompleteConnect
_TEXT	ENDS
PUBLIC	?SetMediaType@CBasePin@@UAEJPBVCMediaType@@@Z	; CBasePin::SetMediaType
EXTRN	?Set@CMediaType@@QAEJABV1@@Z:PROC		; CMediaType::Set
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetMediaType@CBasePin@@UAEJPBVCMediaType@@@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pmt$ = 8						; size = 4
?SetMediaType@CBasePin@@UAEJPBVCMediaType@@@Z PROC	; CBasePin::SetMediaType, COMDAT
; _this$ = ecx
; Line 1932
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1933
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Set@CMediaType@@QAEJABV1@@Z		; CMediaType::Set
	mov	DWORD PTR _hr$[ebp], eax
; Line 1934
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetMediaTy
; Line 1935
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@SetMediaTy
$LN1@SetMediaTy:
; Line 1938
	xor	eax, eax
$LN2@SetMediaTy:
; Line 1939
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMediaType@CBasePin@@UAEJPBVCMediaType@@@Z ENDP	; CBasePin::SetMediaType
_TEXT	ENDS
PUBLIC	?CheckConnect@CBasePin@@UAEJPAUIPin@@@Z		; CBasePin::CheckConnect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckConnect@CBasePin@@UAEJPAUIPin@@@Z
_TEXT	SEGMENT
_pd$ = -12						; size = 4
_this$ = -4						; size = 4
_pPin$ = 8						; size = 4
?CheckConnect@CBasePin@@UAEJPAUIPin@@@Z PROC		; CBasePin::CheckConnect, COMDAT
; _this$ = ecx
; Line 1948
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1952
	mov	esi, esp
	lea	eax, DWORD PTR _pd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPin$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pPin$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+36]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1954
	cmp	DWORD PTR _pd$[ebp], 1
	je	SHORT $LN3@CheckConne
	cmp	DWORD PTR _pd$[ebp], 0
	je	SHORT $LN3@CheckConne
	push	1954					; 000007a2H
	push	OFFSET $SG82629
	push	OFFSET $SG82630
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CheckConne:
; Line 1955
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 1
	je	SHORT $LN2@CheckConne
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@CheckConne
	push	1955					; 000007a3H
	push	OFFSET $SG82632
	push	OFFSET $SG82633
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CheckConne:
; Line 1958
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pd$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jne	SHORT $LN1@CheckConne
; Line 1959
	mov	eax, -2147220984			; 80040208H
	jmp	SHORT $LN4@CheckConne
$LN1@CheckConne:
; Line 1961
	xor	eax, eax
$LN4@CheckConne:
; Line 1962
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@CheckConne
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN8@CheckConne:
	DD	1
	DD	$LN7@CheckConne
$LN7@CheckConne:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@CheckConne
$LN6@CheckConne:
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	0
?CheckConnect@CBasePin@@UAEJPAUIPin@@@Z ENDP		; CBasePin::CheckConnect
_TEXT	ENDS
PUBLIC	?BreakConnect@CBasePin@@UAEJXZ			; CBasePin::BreakConnect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BreakConnect@CBasePin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BreakConnect@CBasePin@@UAEJXZ PROC			; CBasePin::BreakConnect, COMDAT
; _this$ = ecx
; Line 1970
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1971
	xor	eax, eax
; Line 1972
	mov	esp, ebp
	pop	ebp
	ret	0
?BreakConnect@CBasePin@@UAEJXZ ENDP			; CBasePin::BreakConnect
_TEXT	ENDS
PUBLIC	?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z ; CBasePin::ReceiveConnection
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z$0
__ehfuncinfo$?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
_TEXT	SEGMENT
$T86107 = -56						; size = 4
$T86106 = -52						; size = 4
$T86105 = -48						; size = 4
$T86104 = -44						; size = 4
$T86103 = -40						; size = 4
$T86102 = -36						; size = 4
_pcmt$ = -32						; size = 4
_hr$ = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pConnector$ = 12					; size = 4
_pmt$ = 16						; size = 4
?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z PROC ; CBasePin::ReceiveConnection, COMDAT
; Line 1984
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1985
	cmp	DWORD PTR _pConnector$[ebp], 0
	jne	SHORT $LN15@ReceiveCon
	mov	eax, -2147467261			; 80004003H
	jmp	$LN16@ReceiveCon
$LN15@ReceiveCon:
; Line 1986
	cmp	DWORD PTR _pmt$[ebp], 0
	jne	SHORT $LN14@ReceiveCon
	mov	eax, -2147467261			; 80004003H
	jmp	$LN16@ReceiveCon
$LN14@ReceiveCon:
; Line 1987
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pConnector$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN13@ReceiveCon
	push	1987					; 000007c3H
	push	OFFSET $SG82651
	push	OFFSET $SG82652
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN13@ReceiveCon:
; Line 1988
	mov	esi, esp
	push	72					; 00000048H
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@ReceiveCon
	push	1988					; 000007c4H
	push	OFFSET $SG82656
	push	OFFSET $SG82657
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN12@ReceiveCon:
; Line 1989
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1992
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN11@ReceiveCon
; Line 1993
	mov	DWORD PTR $T86102[ebp], -2147220988	; 80040204H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86102[ebp]
	jmp	$LN16@ReceiveCon
$LN11@ReceiveCon:
; Line 1997
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?IsStopped@CBasePin@@QAEHXZ		; CBasePin::IsStopped
	test	eax, eax
	jne	SHORT $LN10@ReceiveCon
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	test	eax, eax
	jne	SHORT $LN10@ReceiveCon
; Line 1998
	mov	DWORD PTR $T86103[ebp], -2147220956	; 80040224H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86103[ebp]
	jmp	$LN16@ReceiveCon
$LN10@ReceiveCon:
; Line 2001
	mov	esi, esp
	mov	ecx, DWORD PTR _pConnector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2002
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@ReceiveCon
; Line 2005
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN8@ReceiveCon
	push	2005					; 000007d5H
	push	OFFSET $SG82670
	push	OFFSET $SG82671
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@ReceiveCon:
; Line 2008
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T86104[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86104[ebp]
	jmp	$LN16@ReceiveCon
$LN9@ReceiveCon:
; Line 2013
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR _pcmt$[ebp], edx
; Line 2014
	mov	esi, esp
	mov	eax, DWORD PTR _pcmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2015
	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN7@ReceiveCon
; Line 2020
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN6@ReceiveCon
	push	2020					; 000007e4H
	push	OFFSET $SG82678
	push	OFFSET $SG82679
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@ReceiveCon:
; Line 2027
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@ReceiveCon
	cmp	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	je	SHORT $LN4@ReceiveCon
	cmp	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
	jne	SHORT $LN5@ReceiveCon
$LN4@ReceiveCon:
; Line 2028
	mov	DWORD PTR _hr$[ebp], -2147220950	; 8004022aH
$LN5@ReceiveCon:
; Line 2032
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T86105[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86105[ebp]
	jmp	$LN16@ReceiveCon
$LN7@ReceiveCon:
; Line 2037
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pConnector$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 2038
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2039
	mov	esi, esp
	mov	ecx, DWORD PTR _pcmt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2040
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@ReceiveCon
; Line 2041
	mov	esi, esp
	mov	eax, DWORD PTR _pConnector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	edx, DWORD PTR [eax+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2042
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@ReceiveCon
; Line 2045
	mov	DWORD PTR $T86106[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86106[ebp]
	jmp	$LN16@ReceiveCon
$LN3@ReceiveCon:
; Line 2049
	push	OFFSET $SG82692
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2050
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2051
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 2055
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	esi, esp
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN1@ReceiveCon
	push	2055					; 00000807H
	push	OFFSET $SG82695
	push	OFFSET $SG82696
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@ReceiveCon:
; Line 2058
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T86107[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86107[ebp]
$LN16@ReceiveCon:
; Line 2059
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@ReceiveCon
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN22@ReceiveCon:
	DD	1
	DD	$LN21@ReceiveCon
$LN21@ReceiveCon:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN19@ReceiveCon
$LN19@ReceiveCon:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z ENDP ; CBasePin::ReceiveConnection
PUBLIC	?DisconnectInternal@CBasePin@@IAGJXZ		; CBasePin::DisconnectInternal
PUBLIC	?Disconnect@CBasePin@@UAGJXZ			; CBasePin::Disconnect
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Disconnect@CBasePin@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Disconnect@CBasePin@@UAGJXZ$0
__ehfuncinfo$?Disconnect@CBasePin@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Disconnect@CBasePin@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Disconnect@CBasePin@@UAGJXZ
_TEXT	SEGMENT
$T86121 = -32						; size = 4
$T86120 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?Disconnect@CBasePin@@UAGJXZ PROC			; CBasePin::Disconnect, COMDAT
; Line 2066
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Disconnect@CBasePin@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2067
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2070
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?IsStopped@CBasePin@@QAEHXZ		; CBasePin::IsStopped
	test	eax, eax
	jne	SHORT $LN1@Disconnect
; Line 2071
	mov	DWORD PTR $T86120[ebp], -2147220956	; 80040224H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86120[ebp]
	jmp	SHORT $LN2@Disconnect
$LN1@Disconnect:
; Line 2074
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 16					; 00000010H
	push	edx
	call	?DisconnectInternal@CBasePin@@IAGJXZ	; CBasePin::DisconnectInternal
	mov	DWORD PTR $T86121[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86121[ebp]
$LN2@Disconnect:
; Line 2075
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Disconnect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN8@Disconnect:
	DD	1
	DD	$LN7@Disconnect
$LN7@Disconnect:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@Disconnect
$LN5@Disconnect:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Disconnect@CBasePin@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Disconnect@CBasePin@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Disconnect@CBasePin@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Disconnect@CBasePin@@UAGJXZ ENDP			; CBasePin::Disconnect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DisconnectInternal@CBasePin@@IAGJXZ
_TEXT	SEGMENT
_hr$82713 = -4						; size = 4
_this$ = 8						; size = 4
?DisconnectInternal@CBasePin@@IAGJXZ PROC		; CBasePin::DisconnectInternal, COMDAT
; Line 2079
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2080
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?CritCheckIn@@YGHPAVCCritSec@@@Z	; CritCheckIn
	test	eax, eax
	jne	SHORT $LN4@Disconnect@2
	push	2080					; 00000820H
	push	OFFSET $SG82710
	push	OFFSET $SG82711
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@Disconnect@2:
; Line 2082
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN3@Disconnect@2
; Line 2083
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$82713[ebp], eax
; Line 2084
	cmp	DWORD PTR _hr$82713[ebp], 0
	jge	SHORT $LN2@Disconnect@2
; Line 2088
	push	2088					; 00000828H
	push	OFFSET $SG82716
	push	OFFSET $SG82717
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
; Line 2089
	mov	eax, DWORD PTR _hr$82713[ebp]
	jmp	SHORT $LN5@Disconnect@2
$LN2@Disconnect@2:
; Line 2092
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2093
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 2096
	xor	eax, eax
	jmp	SHORT $LN5@Disconnect@2
; Line 2097
	jmp	SHORT $LN5@Disconnect@2
$LN3@Disconnect@2:
; Line 2101
	mov	eax, 1
$LN5@Disconnect@2:
; Line 2103
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DisconnectInternal@CBasePin@@IAGJXZ ENDP		; CBasePin::DisconnectInternal
_TEXT	ENDS
PUBLIC	?ConnectedTo@CBasePin@@UAGJPAPAUIPin@@@Z	; CBasePin::ConnectedTo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ConnectedTo@CBasePin@@UAGJPAPAUIPin@@@Z
_TEXT	SEGMENT
_pPin$ = -4						; size = 4
_this$ = 8						; size = 4
_ppPin$ = 12						; size = 4
?ConnectedTo@CBasePin@@UAGJPAPAUIPin@@@Z PROC		; CBasePin::ConnectedTo, COMDAT
; Line 2111
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2112
	cmp	DWORD PTR _ppPin$[ebp], 0
	jne	SHORT $LN6@ConnectedT
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@ConnectedT
$LN6@ConnectedT:
; Line 2113
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppPin$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@ConnectedT
	push	2113					; 00000841H
	push	OFFSET $SG82730
	push	OFFSET $SG82731
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@ConnectedT:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppPin$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@ConnectedT
	push	2113					; 00000841H
	push	OFFSET $SG82735
	push	OFFSET $SG82736
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@ConnectedT:
; Line 2119
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _pPin$[ebp], eax
; Line 2120
	mov	ecx, DWORD PTR _ppPin$[ebp]
	mov	edx, DWORD PTR _pPin$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 2121
	cmp	DWORD PTR _pPin$[ebp], 0
	je	SHORT $LN3@ConnectedT
; Line 2122
	mov	eax, DWORD PTR _pPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pPin$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2123
	xor	eax, eax
	jmp	SHORT $LN7@ConnectedT
; Line 2124
	jmp	SHORT $LN7@ConnectedT
$LN3@ConnectedT:
; Line 2125
	mov	ecx, DWORD PTR _ppPin$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@ConnectedT
	push	2125					; 0000084dH
	push	OFFSET $SG82742
	push	OFFSET $SG82743
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@ConnectedT:
; Line 2126
	mov	eax, -2147220983			; 80040209H
$LN7@ConnectedT:
; Line 2128
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConnectedTo@CBasePin@@UAGJPAPAUIPin@@@Z ENDP		; CBasePin::ConnectedTo
_TEXT	ENDS
PUBLIC	?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z ; CBasePin::ConnectionMediaType
EXTRN	?InitMediaType@CMediaType@@QAEXXZ:PROC		; CMediaType::InitMediaType
EXTRN	?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z:PROC ; CopyMediaType
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z$0
__ehfuncinfo$?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z
_TEXT	SEGMENT
$T86139 = -32						; size = 4
$T86138 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pmt$ = 12						; size = 4
?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z PROC ; CBasePin::ConnectionMediaType, COMDAT
; Line 2135
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2136
	cmp	DWORD PTR _pmt$[ebp], 0
	jne	SHORT $LN5@Connection
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@Connection
$LN5@Connection:
; Line 2137
	mov	esi, esp
	push	72					; 00000048H
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@Connection
	push	2137					; 00000859H
	push	OFFSET $SG82754
	push	OFFSET $SG82755
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@Connection:
	mov	esi, esp
	push	72					; 00000048H
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@Connection
	push	2137					; 00000859H
	push	OFFSET $SG82759
	push	OFFSET $SG82760
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@Connection:
; Line 2138
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2141
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	je	SHORT $LN2@Connection
; Line 2142
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _pmt$[ebp]
	push	edx
	call	?CopyMediaType@@YGJPAU_AMMediaType@@PBU1@@Z ; CopyMediaType
; Line 2143
	mov	DWORD PTR $T86138[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86138[ebp]
	jmp	SHORT $LN6@Connection
; Line 2144
	jmp	SHORT $LN1@Connection
$LN2@Connection:
; Line 2145
	mov	ecx, DWORD PTR _pmt$[ebp]
	call	?InitMediaType@CMediaType@@QAEXXZ	; CMediaType::InitMediaType
; Line 2146
	mov	DWORD PTR $T86139[ebp], -2147220983	; 80040209H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86139[ebp]
	jmp	SHORT $LN6@Connection
$LN1@Connection:
; Line 2148
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
$LN6@Connection:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Connection
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN12@Connection:
	DD	1
	DD	$LN11@Connection
$LN11@Connection:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@Connection
$LN9@Connection:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z ENDP ; CBasePin::ConnectionMediaType
PUBLIC	?QueryPinInfo@CBasePin@@UAGJPAU_PinInfo@@@Z	; CBasePin::QueryPinInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryPinInfo@CBasePin@@UAGJPAU_PinInfo@@@Z
_TEXT	SEGMENT
tv85 = -8						; size = 4
tv86 = -4						; size = 4
_this$ = 8						; size = 4
_pInfo$ = 12						; size = 4
?QueryPinInfo@CBasePin@@UAGJPAU_PinInfo@@@Z PROC	; CBasePin::QueryPinInfo, COMDAT
; Line 2156
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2157
	cmp	DWORD PTR _pInfo$[ebp], 0
	jne	SHORT $LN6@QueryPinIn
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@QueryPinIn
$LN6@QueryPinIn:
; Line 2158
	mov	esi, esp
	push	264					; 00000108H
	mov	eax, DWORD PTR _pInfo$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@QueryPinIn
	push	2158					; 0000086eH
	push	OFFSET $SG82778
	push	OFFSET $SG82779
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@QueryPinIn:
	mov	esi, esp
	push	264					; 00000108H
	mov	ecx, DWORD PTR _pInfo$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@QueryPinIn
	push	2158					; 0000086eH
	push	OFFSET $SG82783
	push	OFFSET $SG82784
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@QueryPinIn:
; Line 2160
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR tv86[ebp], eax
	cmp	DWORD PTR tv86[ebp], 0
	je	SHORT $LN9@QueryPinIn
	mov	ecx, DWORD PTR tv86[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN10@QueryPinIn
$LN9@QueryPinIn:
	mov	DWORD PTR tv85[ebp], 0
$LN10@QueryPinIn:
	mov	edx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR [edx], eax
; Line 2161
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN3@QueryPinIn
; Line 2162
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [eax+16]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@QueryPinIn:
; Line 2165
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@QueryPinIn
; Line 2166
	mov	esi, esp
	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	add	edx, 8
	push	edx
	call	DWORD PTR __imp__lstrcpynW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2167
	jmp	SHORT $LN1@QueryPinIn
$LN2@QueryPinIn:
; Line 2168
	xor	eax, eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	mov	WORD PTR [ecx+8], ax
$LN1@QueryPinIn:
; Line 2171
	mov	edx, DWORD PTR _pInfo$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+4], ecx
; Line 2173
	xor	eax, eax
$LN7@QueryPinIn:
; Line 2174
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?QueryPinInfo@CBasePin@@UAGJPAU_PinInfo@@@Z ENDP	; CBasePin::QueryPinInfo
_TEXT	ENDS
PUBLIC	?QueryDirection@CBasePin@@UAGJPAW4_PinDirection@@@Z ; CBasePin::QueryDirection
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryDirection@CBasePin@@UAGJPAW4_PinDirection@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pPinDir$ = 12						; size = 4
?QueryDirection@CBasePin@@UAGJPAW4_PinDirection@@@Z PROC ; CBasePin::QueryDirection, COMDAT
; Line 2180
	push	ebp
	mov	ebp, esp
	push	esi
; Line 2181
	cmp	DWORD PTR _pPinDir$[ebp], 0
	jne	SHORT $LN3@QueryDirec
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN4@QueryDirec
$LN3@QueryDirec:
; Line 2182
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pPinDir$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@QueryDirec
	push	2182					; 00000886H
	push	OFFSET $SG82798
	push	OFFSET $SG82799
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@QueryDirec:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _pPinDir$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN1@QueryDirec
	push	2182					; 00000886H
	push	OFFSET $SG82803
	push	OFFSET $SG82804
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@QueryDirec:
; Line 2184
	mov	edx, DWORD PTR _pPinDir$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx], ecx
; Line 2185
	xor	eax, eax
$LN4@QueryDirec:
; Line 2186
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?QueryDirection@CBasePin@@UAGJPAW4_PinDirection@@@Z ENDP ; CBasePin::QueryDirection
_TEXT	ENDS
PUBLIC	?QueryId@CBasePin@@UAGJPAPA_W@Z			; CBasePin::QueryId
EXTRN	_AMGetWideString@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryId@CBasePin@@UAGJPAPA_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_Id$ = 12						; size = 4
?QueryId@CBasePin@@UAGJPAPA_W@Z PROC			; CBasePin::QueryId, COMDAT
; Line 2193
	push	ebp
	mov	ebp, esp
; Line 2197
	mov	eax, DWORD PTR _Id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?Name@CBasePin@@QAEPA_WXZ		; CBasePin::Name
	push	eax
	call	_AMGetWideString@8
; Line 2198
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?QueryId@CBasePin@@UAGJPAPA_W@Z ENDP			; CBasePin::QueryId
_TEXT	ENDS
PUBLIC	?QueryAccept@CBasePin@@UAGJPBU_AMMediaType@@@Z	; CBasePin::QueryAccept
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryAccept@CBasePin@@UAGJPBU_AMMediaType@@@Z
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_pmt$ = 12						; size = 4
?QueryAccept@CBasePin@@UAGJPBU_AMMediaType@@@Z PROC	; CBasePin::QueryAccept, COMDAT
; Line 2209
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2210
	cmp	DWORD PTR _pmt$[ebp], 0
	jne	SHORT $LN3@QueryAccep
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN4@QueryAccep
$LN3@QueryAccep:
; Line 2211
	mov	esi, esp
	push	72					; 00000048H
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@QueryAccep
	push	2211					; 000008a3H
	push	OFFSET $SG82818
	push	OFFSET $SG82819
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@QueryAccep:
; Line 2217
	mov	esi, esp
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2218
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@QueryAccep
; Line 2219
	mov	eax, 1
	jmp	SHORT $LN4@QueryAccep
$LN1@QueryAccep:
; Line 2222
	mov	eax, DWORD PTR _hr$[ebp]
$LN4@QueryAccep:
; Line 2223
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?QueryAccept@CBasePin@@UAGJPBU_AMMediaType@@@Z ENDP	; CBasePin::QueryAccept
_TEXT	ENDS
PUBLIC	?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z ; CBasePin::EnumMediaTypes
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z$0
__ehfuncinfo$?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z
_TEXT	SEGMENT
tv92 = -24						; size = 4
$T86163 = -20						; size = 4
$T86162 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ppEnum$ = 12						; size = 4
?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z PROC ; CBasePin::EnumMediaTypes, COMDAT
; Line 2237
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2238
	cmp	DWORD PTR _ppEnum$[ebp], 0
	jne	SHORT $LN4@EnumMediaT
	mov	eax, -2147467261			; 80004003H
	jmp	$LN5@EnumMediaT
$LN4@EnumMediaT:
; Line 2239
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppEnum$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@EnumMediaT
	push	2239					; 000008bfH
	push	OFFSET $SG82834
	push	OFFSET $SG82835
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@EnumMediaT:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppEnum$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@EnumMediaT
	push	2239					; 000008bfH
	push	OFFSET $SG82839
	push	OFFSET $SG82840
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@EnumMediaT:
; Line 2244
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T86163[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T86163[ebp], 0
	je	SHORT $LN7@EnumMediaT
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR $T86163[ebp]
	call	??0CEnumMediaTypes@@QAE@PAVCBasePin@@PAV0@@Z ; CEnumMediaTypes::CEnumMediaTypes
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN8@EnumMediaT
$LN7@EnumMediaT:
	mov	DWORD PTR tv92[ebp], 0
$LN8@EnumMediaT:
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T86162[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _ppEnum$[ebp]
	mov	edx, DWORD PTR $T86162[ebp]
	mov	DWORD PTR [ecx], edx
; Line 2246
	mov	eax, DWORD PTR _ppEnum$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@EnumMediaT
; Line 2247
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN5@EnumMediaT
$LN1@EnumMediaT:
; Line 2250
	xor	eax, eax
$LN5@EnumMediaT:
; Line 2251
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z$0:
	mov	eax, DWORD PTR $T86163[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z ENDP ; CBasePin::EnumMediaTypes
PUBLIC	?GetMediaType@CBasePin@@UAEJHPAVCMediaType@@@Z	; CBasePin::GetMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetMediaType@CBasePin@@UAEJHPAVCMediaType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iPosition$ = 8						; size = 4
_pMediaType$ = 12					; size = 4
?GetMediaType@CBasePin@@UAEJHPAVCMediaType@@@Z PROC	; CBasePin::GetMediaType, COMDAT
; _this$ = ecx
; Line 2260
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2263
	mov	eax, -2147418113			; 8000ffffH
; Line 2264
	mov	esp, ebp
	pop	ebp
	ret	8
?GetMediaType@CBasePin@@UAEJHPAVCMediaType@@@Z ENDP	; CBasePin::GetMediaType
_TEXT	ENDS
PUBLIC	?GetMediaTypeVersion@CBasePin@@UAEJXZ		; CBasePin::GetMediaTypeVersion
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetMediaTypeVersion@CBasePin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMediaTypeVersion@CBasePin@@UAEJXZ PROC		; CBasePin::GetMediaTypeVersion, COMDAT
; _this$ = ecx
; Line 2276
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2277
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
; Line 2278
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMediaTypeVersion@CBasePin@@UAEJXZ ENDP		; CBasePin::GetMediaTypeVersion
_TEXT	ENDS
PUBLIC	?IncrementTypeVersion@CBasePin@@QAEXXZ		; CBasePin::IncrementTypeVersion
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IncrementTypeVersion@CBasePin@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementTypeVersion@CBasePin@@QAEXXZ PROC		; CBasePin::IncrementTypeVersion, COMDAT
; _this$ = ecx
; Line 2284
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2285
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2286
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementTypeVersion@CBasePin@@QAEXXZ ENDP		; CBasePin::IncrementTypeVersion
_TEXT	ENDS
PUBLIC	?Active@CBasePin@@UAEJXZ			; CBasePin::Active
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Active@CBasePin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Active@CBasePin@@UAEJXZ PROC				; CBasePin::Active, COMDAT
; _this$ = ecx
; Line 2295
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2296
	xor	eax, eax
; Line 2297
	mov	esp, ebp
	pop	ebp
	ret	0
?Active@CBasePin@@UAEJXZ ENDP				; CBasePin::Active
_TEXT	ENDS
PUBLIC	?Run@CBasePin@@UAEJ_J@Z				; CBasePin::Run
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Run@CBasePin@@UAEJ_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tStart$ = 8						; size = 8
?Run@CBasePin@@UAEJ_J@Z PROC				; CBasePin::Run, COMDAT
; _this$ = ecx
; Line 2305
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2307
	xor	eax, eax
; Line 2308
	mov	esp, ebp
	pop	ebp
	ret	8
?Run@CBasePin@@UAEJ_J@Z ENDP				; CBasePin::Run
_TEXT	ENDS
PUBLIC	?Inactive@CBasePin@@UAEJXZ			; CBasePin::Inactive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Inactive@CBasePin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Inactive@CBasePin@@UAEJXZ PROC				; CBasePin::Inactive, COMDAT
; _this$ = ecx
; Line 2317
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2318
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0
; Line 2319
	xor	eax, eax
; Line 2320
	mov	esp, ebp
	pop	ebp
	ret	0
?Inactive@CBasePin@@UAEJXZ ENDP				; CBasePin::Inactive
_TEXT	ENDS
PUBLIC	?EndOfStream@CBasePin@@UAGJXZ			; CBasePin::EndOfStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?EndOfStream@CBasePin@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?EndOfStream@CBasePin@@UAGJXZ PROC			; CBasePin::EndOfStream, COMDAT
; Line 2326
	push	ebp
	mov	ebp, esp
; Line 2327
	xor	eax, eax
; Line 2328
	pop	ebp
	ret	4
?EndOfStream@CBasePin@@UAGJXZ ENDP			; CBasePin::EndOfStream
_TEXT	ENDS
PUBLIC	?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z	; CBasePin::SetSink
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z$0
__ehfuncinfo$?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z
_TEXT	SEGMENT
$T86189 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_piqc$ = 12						; size = 4
?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z PROC	; CBasePin::SetSink, COMDAT
; Line 2333
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2334
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2335
	cmp	DWORD PTR _piqc$[ebp], 0
	je	SHORT $LN2@SetSink
	mov	esi, esp
	push	4
	mov	edx, DWORD PTR _piqc$[ebp]
	push	edx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@SetSink
	push	2335					; 0000091fH
	push	OFFSET $SG82885
	push	OFFSET $SG82886
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@SetSink:
; Line 2336
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _piqc$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2337
	mov	DWORD PTR $T86189[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86189[ebp]
; Line 2338
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SetSink
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@SetSink:
	DD	1
	DD	$LN8@SetSink
$LN8@SetSink:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@SetSink
$LN6@SetSink:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z ENDP	; CBasePin::SetSink
PUBLIC	?Notify@CBasePin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z ; CBasePin::Notify
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Notify@CBasePin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pSender$ = 12						; size = 4
_q$ = 16						; size = 24
?Notify@CBasePin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z PROC ; CBasePin::Notify, COMDAT
; Line 2343
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2346
	push	2346					; 0000092aH
	push	OFFSET $SG82893
	push	OFFSET $SG82894
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
; Line 2347
	mov	eax, -2147467263			; 80004001H
; Line 2348
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Notify
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
	npad	3
$LN5@Notify:
	DD	1
	DD	$LN4@Notify
$LN4@Notify:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Notify
$LN3@Notify:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?Notify@CBasePin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z ENDP ; CBasePin::Notify
_TEXT	ENDS
PUBLIC	?NewSegment@CBasePin@@UAGJ_J0N@Z		; CBasePin::NewSegment
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NewSegment@CBasePin@@UAGJ_J0N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_tStart$ = 12						; size = 8
_tStop$ = 20						; size = 8
_dRate$ = 28						; size = 8
?NewSegment@CBasePin@@UAGJ_J0N@Z PROC			; CBasePin::NewSegment, COMDAT
; Line 2360
	push	ebp
	mov	ebp, esp
; Line 2361
	mov	eax, DWORD PTR _tStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??4CRefTime@@QAEAAV0@_J@Z		; CRefTime::operator=
; Line 2362
	mov	edx, DWORD PTR _tStop$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _tStop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??4CRefTime@@QAEAAV0@_J@Z		; CRefTime::operator=
; Line 2363
	mov	ecx, DWORD PTR _this$[ebp]
	fld	QWORD PTR _dRate$[ebp]
	fstp	QWORD PTR [ecx+128]
; Line 2365
	xor	eax, eax
; Line 2366
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	28					; 0000001cH
?NewSegment@CBasePin@@UAGJ_J0N@Z ENDP			; CBasePin::NewSegment
_TEXT	ENDS
PUBLIC	??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ; CBaseOutputPin::CBaseOutputPin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$0
__ehfuncinfo$??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pObjectName$ = 8					; size = 4
_pFilter$ = 12						; size = 4
_pLock$ = 16						; size = 4
_phr$ = 20						; size = 4
_pName$ = 24						; size = 4
??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z PROC ; CBaseOutputPin::CBaseOutputPin, COMDAT
; _this$ = ecx
; Line 2384
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _phr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLock$[ebp]
	push	edx
	mov	eax, DWORD PTR _pFilter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObjectName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z ; CBasePin::CBasePin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+160], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0
; Line 2385
	cmp	DWORD PTR _pFilter$[ebp], 0
	jne	SHORT $LN2@CBaseOutpu
	push	2385					; 00000951H
	push	OFFSET $SG82912
	push	OFFSET $SG82913
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseOutpu:
; Line 2386
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBasePin@@UAE@XZ			; CBasePin::~CBasePin
__ehhandler$??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ENDP ; CBaseOutputPin::CBaseOutputPin
PUBLIC	??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ; CBaseOutputPin::CBaseOutputPin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$0
__ehfuncinfo$??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pObjectName$ = 8					; size = 4
_pFilter$ = 12						; size = 4
_pLock$ = 16						; size = 4
_phr$ = 20						; size = 4
_pName$ = 24						; size = 4
??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z PROC ; CBaseOutputPin::CBaseOutputPin, COMDAT
; _this$ = ecx
; Line 2397
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _phr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLock$[ebp]
	push	edx
	mov	eax, DWORD PTR _pFilter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObjectName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z ; CBasePin::CBasePin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+160], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0
; Line 2398
	cmp	DWORD PTR _pFilter$[ebp], 0
	jne	SHORT $LN2@CBaseOutpu@2
	push	2398					; 0000095eH
	push	OFFSET $SG82929
	push	OFFSET $SG82930
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseOutpu@2:
; Line 2399
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBasePin@@UAE@XZ			; CBasePin::~CBasePin
__ehhandler$??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ENDP ; CBaseOutputPin::CBaseOutputPin
PUBLIC	?CompleteConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z ; CBaseOutputPin::CompleteConnect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CompleteConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pReceivePin$ = 8					; size = 4
?CompleteConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z PROC	; CBaseOutputPin::CompleteConnect, COMDAT
; _this$ = ecx
; Line 2408
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2410
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 160				; 000000a0H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2411
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CompleteConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z ENDP	; CBaseOutputPin::CompleteConnect
_TEXT	ENDS
PUBLIC	?CheckConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z	; CBaseOutputPin::CheckConnect
EXTRN	_IID_IMemInputPin:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pPin$ = 8						; size = 4
?CheckConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z PROC	; CBaseOutputPin::CheckConnect, COMDAT
; _this$ = ecx
; Line 2426
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2427
	mov	eax, DWORD PTR _pPin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckConnect@CBasePin@@UAEJPAUIPin@@@Z	; CBasePin::CheckConnect
	mov	DWORD PTR _hr$[ebp], eax
; Line 2428
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CheckConne@2
; Line 2429
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN3@CheckConne@2
$LN2@CheckConne@2:
; Line 2433
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	mov	esi, esp
	push	ecx
	push	OFFSET _IID_IMemInputPin
	mov	edx, DWORD PTR _pPin$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pPin$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2434
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CheckConne@2
; Line 2435
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN3@CheckConne@2
$LN1@CheckConne@2:
; Line 2437
	xor	eax, eax
$LN3@CheckConne@2:
; Line 2438
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z ENDP	; CBaseOutputPin::CheckConnect
_TEXT	ENDS
PUBLIC	?BreakConnect@CBaseOutputPin@@UAEJXZ		; CBaseOutputPin::BreakConnect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BreakConnect@CBaseOutputPin@@UAEJXZ
_TEXT	SEGMENT
_hr$82949 = -8						; size = 4
_this$ = -4						; size = 4
?BreakConnect@CBaseOutputPin@@UAEJXZ PROC		; CBaseOutputPin::BreakConnect, COMDAT
; _this$ = ecx
; Line 2445
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2448
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN3@BreakConne
; Line 2452
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$82949[ebp], eax
; Line 2453
	cmp	DWORD PTR _hr$82949[ebp], 0
	jge	SHORT $LN2@BreakConne
; Line 2454
	mov	eax, DWORD PTR _hr$82949[ebp]
	jmp	SHORT $LN4@BreakConne
$LN2@BreakConne:
; Line 2457
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2458
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], 0
$LN3@BreakConne:
; Line 2463
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+164], 0
	je	SHORT $LN1@BreakConne
; Line 2464
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2465
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0
$LN1@BreakConne:
; Line 2467
	xor	eax, eax
$LN4@BreakConne:
; Line 2468
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BreakConnect@CBaseOutputPin@@UAEJXZ ENDP		; CBaseOutputPin::BreakConnect
_TEXT	ENDS
PUBLIC	?InitAllocator@CBaseOutputPin@@UAEJPAPAUIMemAllocator@@@Z ; CBaseOutputPin::InitAllocator
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitAllocator@CBaseOutputPin@@UAEJPAPAUIMemAllocator@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ppAlloc$ = 8						; size = 4
?InitAllocator@CBaseOutputPin@@UAEJPAPAUIMemAllocator@@@Z PROC ; CBaseOutputPin::InitAllocator, COMDAT
; _this$ = ecx
; Line 2475
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2476
	mov	eax, DWORD PTR _ppAlloc$[ebp]
	push	eax
	call	_CreateMemoryAllocator@4
; Line 2477
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InitAllocator@CBaseOutputPin@@UAEJPAPAUIMemAllocator@@@Z ENDP ; CBaseOutputPin::InitAllocator
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DecideAllocator@CBaseOutputPin@@UAEJPAUIMemInputPin@@PAPAUIMemAllocator@@@Z ; CBaseOutputPin::DecideAllocator
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DecideAllocator@CBaseOutputPin@@UAEJPAUIMemInputPin@@PAPAUIMemAllocator@@@Z
_TEXT	SEGMENT
_prop$ = -32						; size = 16
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pPin$ = 8						; size = 4
_ppAlloc$ = 12						; size = 4
?DecideAllocator@CBaseOutputPin@@UAEJPAUIMemInputPin@@PAPAUIMemAllocator@@@Z PROC ; CBaseOutputPin::DecideAllocator, COMDAT
; _this$ = ecx
; Line 2495
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 2496
	mov	DWORD PTR _hr$[ebp], 0
; Line 2497
	mov	eax, DWORD PTR _ppAlloc$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2504
	push	16					; 00000010H
	push	0
	lea	ecx, DWORD PTR _prop$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2508
	mov	esi, esp
	lea	edx, DWORD PTR _prop$[ebp]
	push	edx
	mov	eax, DWORD PTR _pPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pPin$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2511
	cmp	DWORD PTR _prop$[ebp+8], 0
	jne	SHORT $LN9@DecideAllo
; Line 2512
	mov	DWORD PTR _prop$[ebp+8], 1
$LN9@DecideAllo:
; Line 2517
	mov	esi, esp
	mov	ecx, DWORD PTR _ppAlloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPin$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pPin$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2518
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN8@DecideAllo
; Line 2520
	mov	esi, esp
	lea	eax, DWORD PTR _prop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppAlloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2521
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN8@DecideAllo
; Line 2522
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _ppAlloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pPin$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2523
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN8@DecideAllo
; Line 2524
	xor	eax, eax
	jmp	$LN10@DecideAllo
$LN8@DecideAllo:
; Line 2531
	mov	ecx, DWORD PTR _ppAlloc$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN5@DecideAllo
; Line 2532
	mov	edx, DWORD PTR _ppAlloc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ppAlloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2533
	mov	edx, DWORD PTR _ppAlloc$[ebp]
	mov	DWORD PTR [edx], 0
$LN5@DecideAllo:
; Line 2538
	mov	esi, esp
	mov	eax, DWORD PTR _ppAlloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2539
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN4@DecideAllo
; Line 2544
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppAlloc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2545
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN4@DecideAllo
; Line 2546
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _ppAlloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pPin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pPin$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2547
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN4@DecideAllo
; Line 2548
	xor	eax, eax
	jmp	SHORT $LN10@DecideAllo
$LN4@DecideAllo:
; Line 2555
	mov	ecx, DWORD PTR _ppAlloc$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@DecideAllo
; Line 2556
	mov	edx, DWORD PTR _ppAlloc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ppAlloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2557
	mov	edx, DWORD PTR _ppAlloc$[ebp]
	mov	DWORD PTR [edx], 0
$LN1@DecideAllo:
; Line 2559
	mov	eax, DWORD PTR _hr$[ebp]
$LN10@DecideAllo:
; Line 2560
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@DecideAllo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN14@DecideAllo:
	DD	1
	DD	$LN13@DecideAllo
$LN13@DecideAllo:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN12@DecideAllo
$LN12@DecideAllo:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
?DecideAllocator@CBaseOutputPin@@UAEJPAUIMemInputPin@@PAPAUIMemAllocator@@@Z ENDP ; CBaseOutputPin::DecideAllocator
_TEXT	ENDS
PUBLIC	?GetDeliveryBuffer@CBaseOutputPin@@UAEJPAPAUIMediaSample@@PA_J1K@Z ; CBaseOutputPin::GetDeliveryBuffer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDeliveryBuffer@CBaseOutputPin@@UAEJPAPAUIMediaSample@@PA_J1K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ppSample$ = 8						; size = 4
_pStartTime$ = 12					; size = 4
_pEndTime$ = 16						; size = 4
_dwFlags$ = 20						; size = 4
?GetDeliveryBuffer@CBaseOutputPin@@UAEJPAPAUIMediaSample@@PA_J1K@Z PROC ; CBaseOutputPin::GetDeliveryBuffer, COMDAT
; _this$ = ecx
; Line 2571
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2572
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN2@GetDeliver
; Line 2573
	mov	esi, esp
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEndTime$[ebp]
	push	edx
	mov	eax, DWORD PTR _pStartTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppSample$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@GetDeliver
; Line 2574
	jmp	SHORT $LN3@GetDeliver
$LN2@GetDeliver:
; Line 2575
	mov	eax, -2147467262			; 80004002H
$LN3@GetDeliver:
; Line 2577
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetDeliveryBuffer@CBaseOutputPin@@UAEJPAPAUIMediaSample@@PA_J1K@Z ENDP ; CBaseOutputPin::GetDeliveryBuffer
_TEXT	ENDS
PUBLIC	?Deliver@CBaseOutputPin@@UAEJPAUIMediaSample@@@Z ; CBaseOutputPin::Deliver
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Deliver@CBaseOutputPin@@UAEJPAUIMediaSample@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSample$ = 8						; size = 4
?Deliver@CBaseOutputPin@@UAEJPAUIMediaSample@@@Z PROC	; CBaseOutputPin::Deliver, COMDAT
; _this$ = ecx
; Line 2605
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2606
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	jne	SHORT $LN1@Deliver
; Line 2607
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN2@Deliver
$LN1@Deliver:
; Line 2611
	mov	esi, esp
	mov	ecx, DWORD PTR _pSample$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Deliver:
; Line 2612
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Deliver@CBaseOutputPin@@UAEJPAUIMediaSample@@@Z ENDP	; CBaseOutputPin::Deliver
_TEXT	ENDS
PUBLIC	?DeliverEndOfStream@CBaseOutputPin@@UAEJXZ	; CBaseOutputPin::DeliverEndOfStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeliverEndOfStream@CBaseOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeliverEndOfStream@CBaseOutputPin@@UAEJXZ PROC		; CBaseOutputPin::DeliverEndOfStream, COMDAT
; _this$ = ecx
; Line 2619
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2621
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@DeliverEnd
; Line 2622
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN2@DeliverEnd
$LN1@DeliverEnd:
; Line 2624
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeliverEnd:
; Line 2625
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeliverEndOfStream@CBaseOutputPin@@UAEJXZ ENDP		; CBaseOutputPin::DeliverEndOfStream
_TEXT	ENDS
PUBLIC	?Active@CBaseOutputPin@@UAEJXZ			; CBaseOutputPin::Active
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Active@CBaseOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Active@CBaseOutputPin@@UAEJXZ PROC			; CBaseOutputPin::Active, COMDAT
; _this$ = ecx
; Line 2633
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2634
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+160], 0
	jne	SHORT $LN1@Active
; Line 2635
	mov	eax, -2147220982			; 8004020aH
	jmp	SHORT $LN2@Active
$LN1@Active:
; Line 2637
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Active:
; Line 2638
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Active@CBaseOutputPin@@UAEJXZ ENDP			; CBaseOutputPin::Active
_TEXT	ENDS
PUBLIC	?Inactive@CBaseOutputPin@@UAEJXZ		; CBaseOutputPin::Inactive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Inactive@CBaseOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Inactive@CBaseOutputPin@@UAEJXZ PROC			; CBaseOutputPin::Inactive, COMDAT
; _this$ = ecx
; Line 2646
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2647
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0
; Line 2648
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+160], 0
	jne	SHORT $LN1@Inactive
; Line 2649
	mov	eax, -2147220982			; 8004020aH
	jmp	SHORT $LN2@Inactive
$LN1@Inactive:
; Line 2651
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Inactive:
; Line 2652
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Inactive@CBaseOutputPin@@UAEJXZ ENDP			; CBaseOutputPin::Inactive
_TEXT	ENDS
PUBLIC	?EndOfStream@CBaseOutputPin@@UAGJXZ		; CBaseOutputPin::EndOfStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?EndOfStream@CBaseOutputPin@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?EndOfStream@CBaseOutputPin@@UAGJXZ PROC		; CBaseOutputPin::EndOfStream, COMDAT
; Line 2658
	push	ebp
	mov	ebp, esp
; Line 2659
	mov	eax, -2147418113			; 8000ffffH
; Line 2660
	pop	ebp
	ret	4
?EndOfStream@CBaseOutputPin@@UAGJXZ ENDP		; CBaseOutputPin::EndOfStream
_TEXT	ENDS
PUBLIC	?BeginFlush@CBaseOutputPin@@UAGJXZ		; CBaseOutputPin::BeginFlush
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BeginFlush@CBaseOutputPin@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?BeginFlush@CBaseOutputPin@@UAGJXZ PROC			; CBaseOutputPin::BeginFlush, COMDAT
; Line 2666
	push	ebp
	mov	ebp, esp
; Line 2667
	mov	eax, -2147418113			; 8000ffffH
; Line 2668
	pop	ebp
	ret	4
?BeginFlush@CBaseOutputPin@@UAGJXZ ENDP			; CBaseOutputPin::BeginFlush
_TEXT	ENDS
PUBLIC	?EndFlush@CBaseOutputPin@@UAGJXZ		; CBaseOutputPin::EndFlush
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?EndFlush@CBaseOutputPin@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?EndFlush@CBaseOutputPin@@UAGJXZ PROC			; CBaseOutputPin::EndFlush, COMDAT
; Line 2673
	push	ebp
	mov	ebp, esp
; Line 2674
	mov	eax, -2147418113			; 8000ffffH
; Line 2675
	pop	ebp
	ret	4
?EndFlush@CBaseOutputPin@@UAGJXZ ENDP			; CBaseOutputPin::EndFlush
_TEXT	ENDS
PUBLIC	?DeliverBeginFlush@CBaseOutputPin@@UAEJXZ	; CBaseOutputPin::DeliverBeginFlush
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeliverBeginFlush@CBaseOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeliverBeginFlush@CBaseOutputPin@@UAEJXZ PROC		; CBaseOutputPin::DeliverBeginFlush, COMDAT
; _this$ = ecx
; Line 2680
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2682
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@DeliverBeg
; Line 2683
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN2@DeliverBeg
$LN1@DeliverBeg:
; Line 2685
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeliverBeg:
; Line 2686
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeliverBeginFlush@CBaseOutputPin@@UAEJXZ ENDP		; CBaseOutputPin::DeliverBeginFlush
_TEXT	ENDS
PUBLIC	?DeliverEndFlush@CBaseOutputPin@@UAEJXZ		; CBaseOutputPin::DeliverEndFlush
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeliverEndFlush@CBaseOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeliverEndFlush@CBaseOutputPin@@UAEJXZ PROC		; CBaseOutputPin::DeliverEndFlush, COMDAT
; _this$ = ecx
; Line 2691
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2693
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@DeliverEnd@2
; Line 2694
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN2@DeliverEnd@2
$LN1@DeliverEnd@2:
; Line 2696
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+64]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeliverEnd@2:
; Line 2697
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeliverEndFlush@CBaseOutputPin@@UAEJXZ ENDP		; CBaseOutputPin::DeliverEndFlush
_TEXT	ENDS
PUBLIC	?DeliverNewSegment@CBaseOutputPin@@UAEJ_J0N@Z	; CBaseOutputPin::DeliverNewSegment
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeliverNewSegment@CBaseOutputPin@@UAEJ_J0N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tStart$ = 8						; size = 8
_tStop$ = 16						; size = 8
_dRate$ = 24						; size = 8
?DeliverNewSegment@CBaseOutputPin@@UAEJ_J0N@Z PROC	; CBaseOutputPin::DeliverNewSegment, COMDAT
; _this$ = ecx
; Line 2704
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2705
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@DeliverNew
; Line 2706
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN2@DeliverNew
$LN1@DeliverNew:
; Line 2708
	mov	esi, esp
	sub	esp, 8
	fld	QWORD PTR _dRate$[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _tStop$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _tStop$[ebp]
	push	edx
	mov	eax, DWORD PTR _tStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _tStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeliverNew:
; Line 2709
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?DeliverNewSegment@CBaseOutputPin@@UAEJ_J0N@Z ENDP	; CBaseOutputPin::DeliverNewSegment
_TEXT	ENDS
PUBLIC	??0IMemInputPin@@QAE@XZ				; IMemInputPin::IMemInputPin
PUBLIC	??0CBaseInputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ; CBaseInputPin::CBaseInputPin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBaseInputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObjectName$ = 8					; size = 4
_pFilter$ = 12						; size = 4
_pLock$ = 16						; size = 4
_phr$ = 20						; size = 4
_pPinName$ = 24						; size = 4
??0CBaseInputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z PROC ; CBaseInputPin::CBaseInputPin, COMDAT
; _this$ = ecx
; Line 2730
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	eax, DWORD PTR _pPinName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _phr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLock$[ebp]
	push	edx
	mov	eax, DWORD PTR _pFilter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObjectName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBasePin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z ; CBasePin::CBasePin
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0IMemInputPin@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+164], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+168], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+169], 0
; Line 2731
	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2732
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0CBaseInputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ENDP ; CBaseInputPin::CBaseInputPin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IMemInputPin@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IMemInputPin@@QAE@XZ PROC				; IMemInputPin::IMemInputPin, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IMemInputPin@@QAE@XZ ENDP				; IMemInputPin::IMemInputPin
_TEXT	ENDS
PUBLIC	??0CBaseInputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ; CBaseInputPin::CBaseInputPin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBaseInputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObjectName$ = 8					; size = 4
_pFilter$ = 12						; size = 4
_pLock$ = 16						; size = 4
_phr$ = 20						; size = 4
_pPinName$ = 24						; size = 4
??0CBaseInputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z PROC ; CBaseInputPin::CBaseInputPin, COMDAT
; _this$ = ecx
; Line 2744
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	eax, DWORD PTR _pPinName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _phr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLock$[ebp]
	push	edx
	mov	eax, DWORD PTR _pFilter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObjectName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBasePin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_WW4_PinDirection@@@Z ; CBasePin::CBasePin
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0IMemInputPin@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+164], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+168], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+169], 0
; Line 2745
	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2746
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0CBaseInputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ENDP ; CBaseInputPin::CBaseInputPin
_TEXT	ENDS
PUBLIC	??1CBaseInputPin@@UAE@XZ			; CBaseInputPin::~CBaseInputPin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBaseInputPin@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseInputPin@@UAE@XZ$0
__ehfuncinfo$??1CBaseInputPin@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBaseInputPin@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseInputPin@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseInputPin@@UAE@XZ PROC				; CBaseInputPin::~CBaseInputPin, COMDAT
; _this$ = ecx
; Line 2752
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseInputPin@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2753
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	SHORT $LN2@CBaseInput
; Line 2754
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2755
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+164], 0
$LN2@CBaseInput:
; Line 2757
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBasePin@@UAE@XZ			; CBasePin::~CBasePin
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseInputPin@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBasePin@@UAE@XZ			; CBasePin::~CBasePin
__ehhandler$??1CBaseInputPin@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseInputPin@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseInputPin@@UAE@XZ ENDP				; CBaseInputPin::~CBaseInputPin
PUBLIC	?NonDelegatingQueryInterface@CBaseInputPin@@UAGJABU_GUID@@PAPAX@Z ; CBaseInputPin::NonDelegatingQueryInterface
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingQueryInterface@CBaseInputPin@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv77 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CBaseInputPin@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseInputPin::NonDelegatingQueryInterface, COMDAT
; Line 2763
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2766
	push	OFFSET _IID_IMemInputPin
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@NonDelegat@7
; Line 2767
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN5@NonDelegat@7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN6@NonDelegat@7
$LN5@NonDelegat@7:
	mov	DWORD PTR tv77[ebp], 0
$LN6@NonDelegat@7:
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN3@NonDelegat@7
; Line 2768
	jmp	SHORT $LN3@NonDelegat@7
$LN2@NonDelegat@7:
; Line 2769
	mov	ecx, DWORD PTR _ppv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?NonDelegatingQueryInterface@CBasePin@@UAGJABU_GUID@@PAPAX@Z ; CBasePin::NonDelegatingQueryInterface
$LN3@NonDelegat@7:
; Line 2771
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CBaseInputPin@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseInputPin::NonDelegatingQueryInterface
_TEXT	ENDS
PUBLIC	?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z ; CBaseInputPin::GetAllocator
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z$0
__ehfuncinfo$?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z
_TEXT	SEGMENT
$T86286 = -36						; size = 4
$T86285 = -32						; size = 4
_hr$83100 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ppAllocator$ = 12					; size = 4
?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z PROC ; CBaseInputPin::GetAllocator, COMDAT
; Line 2788
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2789
	cmp	DWORD PTR _ppAllocator$[ebp], 0
	jne	SHORT $LN6@GetAllocat
	mov	eax, -2147467261			; 80004003H
	jmp	$LN7@GetAllocat
$LN6@GetAllocat:
; Line 2790
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppAllocator$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@GetAllocat
	push	2790					; 00000ae6H
	push	OFFSET $SG83091
	push	OFFSET $SG83092
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@GetAllocat:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppAllocator$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@GetAllocat
	push	2790					; 00000ae6H
	push	OFFSET $SG83096
	push	OFFSET $SG83097
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@GetAllocat:
; Line 2791
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-124]
	push	eax
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2793
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN3@GetAllocat
; Line 2794
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	_CreateMemoryAllocator@4
	mov	DWORD PTR _hr$83100[ebp], eax
; Line 2795
	cmp	DWORD PTR _hr$83100[ebp], 0
	jge	SHORT $LN3@GetAllocat
; Line 2796
	mov	eax, DWORD PTR _hr$83100[ebp]
	mov	DWORD PTR $T86285[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86285[ebp]
	jmp	SHORT $LN7@GetAllocat
$LN3@GetAllocat:
; Line 2799
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN1@GetAllocat
	push	2799					; 00000aefH
	push	OFFSET $SG83105
	push	OFFSET $SG83106
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetAllocat:
; Line 2800
	mov	edx, DWORD PTR _ppAllocator$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
; Line 2801
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2802
	mov	DWORD PTR $T86286[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86286[ebp]
$LN7@GetAllocat:
; Line 2803
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetAllocat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@GetAllocat:
	DD	1
	DD	$LN12@GetAllocat
$LN12@GetAllocat:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@GetAllocat
$LN10@GetAllocat:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetAllocator@CBaseInputPin@@UAGJPAPAUIMemAllocator@@@Z ENDP ; CBaseInputPin::GetAllocator
PUBLIC	?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z ; CBaseInputPin::NotifyAllocator
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z$0
__ehfuncinfo$?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z
_TEXT	SEGMENT
$T86299 = -32						; size = 4
_pOldAllocator$ = -28					; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pAllocator$ = 12					; size = 4
_bReadOnly$ = 16					; size = 4
?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z PROC ; CBaseInputPin::NotifyAllocator, COMDAT
; Line 2815
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2816
	cmp	DWORD PTR _pAllocator$[ebp], 0
	jne	SHORT $LN3@NotifyAllo
	mov	eax, -2147467261			; 80004003H
	jmp	$LN4@NotifyAllo
$LN3@NotifyAllo:
; Line 2817
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pAllocator$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@NotifyAllo
	push	2817					; 00000b01H
	push	OFFSET $SG83118
	push	OFFSET $SG83119
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@NotifyAllo:
; Line 2818
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-124]
	push	edx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2820
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pOldAllocator$[ebp], ecx
; Line 2821
	mov	edx, DWORD PTR _pAllocator$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pAllocator$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2822
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pAllocator$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 2824
	cmp	DWORD PTR _pOldAllocator$[ebp], 0
	je	SHORT $LN1@NotifyAllo
; Line 2825
	mov	edx, DWORD PTR _pOldAllocator$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pOldAllocator$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@NotifyAllo:
; Line 2831
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bReadOnly$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 2832
	mov	DWORD PTR $T86299[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86299[ebp]
$LN4@NotifyAllo:
; Line 2833
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@NotifyAllo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN10@NotifyAllo:
	DD	1
	DD	$LN9@NotifyAllo
$LN9@NotifyAllo:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@NotifyAllo
$LN7@NotifyAllo:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NotifyAllocator@CBaseInputPin@@UAGJPAUIMemAllocator@@H@Z ENDP ; CBaseInputPin::NotifyAllocator
PUBLIC	?BreakConnect@CBaseInputPin@@UAEJXZ		; CBaseInputPin::BreakConnect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BreakConnect@CBaseInputPin@@UAEJXZ
_TEXT	SEGMENT
_hr$83129 = -8						; size = 4
_this$ = -4						; size = 4
?BreakConnect@CBaseInputPin@@UAEJXZ PROC		; CBaseInputPin::BreakConnect, COMDAT
; _this$ = ecx
; Line 2838
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2840
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	SHORT $LN2@BreakConne@2
; Line 2844
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$83129[ebp], eax
; Line 2845
	cmp	DWORD PTR _hr$83129[ebp], 0
	jge	SHORT $LN1@BreakConne@2
; Line 2846
	mov	eax, DWORD PTR _hr$83129[ebp]
	jmp	SHORT $LN3@BreakConne@2
$LN1@BreakConne@2:
; Line 2849
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2850
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+164], 0
$LN2@BreakConne@2:
; Line 2853
	xor	eax, eax
$LN3@BreakConne@2:
; Line 2854
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BreakConnect@CBaseInputPin@@UAEJXZ ENDP		; CBaseInputPin::BreakConnect
_TEXT	ENDS
PUBLIC	?Receive@CBaseInputPin@@UAGJPAUIMediaSample@@@Z	; CBaseInputPin::Receive
EXTRN	_IID_IMediaSample2:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Receive@CBaseInputPin@@UAGJPAUIMediaSample@@@Z
_TEXT	SEGMENT
_pSample2$ = -12					; size = 4
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_pSample$ = 12						; size = 4
?Receive@CBaseInputPin@@UAGJPAUIMediaSample@@@Z PROC	; CBaseInputPin::Receive, COMDAT
; Line 2869
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2870
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN14@Receive
	mov	eax, -2147467261			; 80004003H
	jmp	$LN15@Receive
$LN14@Receive:
; Line 2871
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN13@Receive
	push	2871					; 00000b37H
	push	OFFSET $SG83142
	push	OFFSET $SG83143
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN13@Receive:
; Line 2872
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN12@Receive
	push	2872					; 00000b38H
	push	OFFSET $SG83145
	push	OFFSET $SG83146
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN12@Receive:
; Line 2874
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 160				; 000000a0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-160]
	mov	esi, esp
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2875
	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN11@Receive
; Line 2876
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN15@Receive
$LN11@Receive:
; Line 2883
	mov	esi, esp
	lea	eax, DWORD PTR _pSample2$[ebp]
	push	eax
	push	OFFSET _IID_IMediaSample2
	mov	ecx, DWORD PTR _pSample$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN10@Receive
; Line 2884
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	esi, esp
	push	edx
	push	48					; 00000030H
	mov	eax, DWORD PTR _pSample2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pSample2$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2885
	mov	ecx, DWORD PTR _pSample2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pSample2$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2886
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@Receive
; Line 2887
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN15@Receive
$LN9@Receive:
; Line 2889
	jmp	$LN8@Receive
$LN10@Receive:
; Line 2891
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 48			; 00000030H
; Line 2892
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 2893
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
; Line 2894
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 2895
	mov	eax, DWORD PTR _pSample$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pSample$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN7@Receive
; Line 2896
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	or	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN7@Receive:
; Line 2898
	mov	ecx, DWORD PTR _pSample$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+36]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@Receive
; Line 2899
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN6@Receive:
; Line 2901
	mov	edx, DWORD PTR _pSample$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pSample$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@Receive
; Line 2902
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN5@Receive:
; Line 2905
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _pSample$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pSample$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN4@Receive
; Line 2907
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 272				; 00000110H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN4@Receive:
; Line 2909
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pSample$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+52]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@Receive
; Line 2910
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN3@Receive:
; Line 2912
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _pSample$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pSample$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2913
	mov	ecx, DWORD PTR _pSample$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+44]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 2914
	mov	eax, DWORD PTR _pSample$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pSample$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN8@Receive:
; Line 2919
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 8
	jne	SHORT $LN2@Receive
; Line 2920
	xor	eax, eax
	jmp	SHORT $LN15@Receive
$LN2@Receive:
; Line 2926
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 160				; 000000a0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-160]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2928
	cmp	DWORD PTR _hr$[ebp], 0
	jne	SHORT $LN1@Receive
; Line 2929
	xor	eax, eax
	jmp	SHORT $LN15@Receive
$LN1@Receive:
; Line 2934
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx-120], 1
; Line 2935
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 144				; 00000090H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-144]
	mov	esi, esp
	push	edx
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2936
	push	0
	push	-2147220950				; 8004022aH
	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-116]
	call	?NotifyEvent@CBaseFilter@@QAEJJJJ@Z	; CBaseFilter::NotifyEvent
; Line 2937
	mov	eax, -2147220992			; 80040200H
$LN15@Receive:
; Line 2938
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@Receive
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN19@Receive:
	DD	1
	DD	$LN18@Receive
$LN18@Receive:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN17@Receive
$LN17@Receive:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
?Receive@CBaseInputPin@@UAGJPAUIMediaSample@@@Z ENDP	; CBaseInputPin::Receive
_TEXT	ENDS
PUBLIC	?ReceiveMultiple@CBaseInputPin@@UAGJPAPAUIMediaSample@@JPAJ@Z ; CBaseInputPin::ReceiveMultiple
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReceiveMultiple@CBaseInputPin@@UAGJPAPAUIMediaSample@@JPAJ@Z
_TEXT	SEGMENT
tv75 = -8						; size = 4
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_pSamples$ = 12						; size = 4
_nSamples$ = 16						; size = 4
_nSamplesProcessed$ = 20				; size = 4
?ReceiveMultiple@CBaseInputPin@@UAGJPAPAUIMediaSample@@JPAJ@Z PROC ; CBaseInputPin::ReceiveMultiple, COMDAT
; Line 2947
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2948
	cmp	DWORD PTR _pSamples$[ebp], 0
	jne	SHORT $LN5@ReceiveMul
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@ReceiveMul
$LN5@ReceiveMul:
; Line 2949
	mov	eax, DWORD PTR _nSamples$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pSamples$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@ReceiveMul
	push	2949					; 00000b85H
	push	OFFSET $SG83184
	push	OFFSET $SG83185
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@ReceiveMul:
; Line 2951
	mov	DWORD PTR _hr$[ebp], 0
; Line 2952
	mov	edx, DWORD PTR _nSamplesProcessed$[ebp]
	mov	DWORD PTR [edx], 0
$LN3@ReceiveMul:
; Line 2953
	mov	eax, DWORD PTR _nSamples$[ebp]
	mov	ecx, DWORD PTR _nSamples$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _nSamples$[ebp], ecx
	test	eax, eax
	jle	SHORT $LN8@ReceiveMul
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN9@ReceiveMul
$LN8@ReceiveMul:
	mov	DWORD PTR tv75[ebp], 0
$LN9@ReceiveMul:
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN2@ReceiveMul
; Line 2954
	mov	edx, DWORD PTR _nSamplesProcessed$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pSamples$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2957
	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN1@ReceiveMul
; Line 2958
	jmp	SHORT $LN2@ReceiveMul
$LN1@ReceiveMul:
; Line 2960
	mov	ecx, DWORD PTR _nSamplesProcessed$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _nSamplesProcessed$[ebp]
	mov	DWORD PTR [eax], edx
; Line 2961
	jmp	SHORT $LN3@ReceiveMul
$LN2@ReceiveMul:
; Line 2962
	mov	eax, DWORD PTR _hr$[ebp]
$LN6@ReceiveMul:
; Line 2963
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ReceiveMultiple@CBaseInputPin@@UAGJPAPAUIMediaSample@@JPAJ@Z ENDP ; CBaseInputPin::ReceiveMultiple
_TEXT	ENDS
PUBLIC	?ReceiveCanBlock@CBaseInputPin@@UAGJXZ		; CBaseInputPin::ReceiveCanBlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReceiveCanBlock@CBaseInputPin@@UAGJXZ
_TEXT	SEGMENT
_pInputPin$83214 = -52					; size = 4
_pConnected$83208 = -40					; size = 4
_hr$83204 = -32						; size = 4
_pd$83203 = -24						; size = 4
_pPin$83202 = -16					; size = 4
_c$83198 = -12						; size = 4
_cOutputPins$ = -8					; size = 4
_cPins$ = -4						; size = 4
_this$ = 8						; size = 4
?ReceiveCanBlock@CBaseInputPin@@UAGJXZ PROC		; CBaseInputPin::ReceiveCanBlock, COMDAT
; Line 2968
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2972
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-116]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cPins$[ebp], eax
; Line 2973
	mov	DWORD PTR _cOutputPins$[ebp], 0
; Line 2974
	mov	DWORD PTR _c$83198[ebp], 0
	jmp	SHORT $LN10@ReceiveCan
$LN9@ReceiveCan:
	mov	ecx, DWORD PTR _c$83198[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$83198[ebp], ecx
$LN10@ReceiveCan:
	mov	edx, DWORD PTR _c$83198[ebp]
	cmp	edx, DWORD PTR _cPins$[ebp]
	jge	$LN8@ReceiveCan
; Line 2975
	mov	esi, esp
	mov	eax, DWORD PTR _c$83198[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-116]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pPin$83202[ebp], eax
; Line 2977
	mov	esi, esp
	lea	ecx, DWORD PTR _pd$83203[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPin$83202[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _pPin$83202[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	edx
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$83204[ebp], eax
; Line 2978
	cmp	DWORD PTR _hr$83204[ebp], 0
	jge	SHORT $LN7@ReceiveCan
; Line 2979
	mov	eax, DWORD PTR _hr$83204[ebp]
	jmp	$LN11@ReceiveCan
$LN7@ReceiveCan:
; Line 2982
	cmp	DWORD PTR _pd$83203[ebp], 1
	jne	$LN6@ReceiveCan
; Line 2985
	mov	esi, esp
	lea	eax, DWORD PTR _pConnected$83208[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPin$83202[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pPin$83202[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	ecx
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$83204[ebp], eax
; Line 2986
	cmp	DWORD PTR _hr$83204[ebp], 0
	jl	$LN6@ReceiveCan
; Line 2987
	cmp	DWORD PTR _pConnected$83208[ebp], 0
	jne	SHORT $LN4@ReceiveCan
	push	2987					; 00000babH
	push	OFFSET $SG83212
	push	OFFSET $SG83213
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@ReceiveCan:
; Line 2988
	mov	edx, DWORD PTR _cOutputPins$[ebp]
	add	edx, 1
	mov	DWORD PTR _cOutputPins$[ebp], edx
; Line 2992
	mov	esi, esp
	lea	eax, DWORD PTR _pInputPin$83214[ebp]
	push	eax
	push	OFFSET _IID_IMemInputPin
	mov	ecx, DWORD PTR _pConnected$83208[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pConnected$83208[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$83204[ebp], eax
; Line 2993
	mov	edx, DWORD PTR _pConnected$83208[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pConnected$83208[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2994
	cmp	DWORD PTR _hr$83204[ebp], 0
	jl	SHORT $LN3@ReceiveCan
; Line 2995
	mov	eax, DWORD PTR _pInputPin$83214[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pInputPin$83214[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$83204[ebp], eax
; Line 2996
	mov	ecx, DWORD PTR _pInputPin$83214[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pInputPin$83214[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2997
	cmp	DWORD PTR _hr$83204[ebp], 1
	je	SHORT $LN2@ReceiveCan
; Line 2998
	xor	eax, eax
	jmp	SHORT $LN11@ReceiveCan
$LN2@ReceiveCan:
; Line 3000
	jmp	SHORT $LN6@ReceiveCan
$LN3@ReceiveCan:
; Line 3002
	xor	eax, eax
	jmp	SHORT $LN11@ReceiveCan
$LN6@ReceiveCan:
; Line 3006
	jmp	$LN9@ReceiveCan
$LN8@ReceiveCan:
; Line 3007
	xor	eax, eax
	cmp	DWORD PTR _cOutputPins$[ebp], 0
	setne	al
$LN11@ReceiveCan:
; Line 3008
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ReceiveCan
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN17@ReceiveCan:
	DD	3
	DD	$LN16@ReceiveCan
$LN16@ReceiveCan:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@ReceiveCan
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN14@ReceiveCan
	DD	-52					; ffffffccH
	DD	4
	DD	$LN15@ReceiveCan
$LN15@ReceiveCan:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN14@ReceiveCan:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN13@ReceiveCan:
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	0
?ReceiveCanBlock@CBaseInputPin@@UAGJXZ ENDP		; CBaseInputPin::ReceiveCanBlock
_TEXT	ENDS
PUBLIC	?BeginFlush@CBaseInputPin@@UAGJXZ		; CBaseInputPin::BeginFlush
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BeginFlush@CBaseInputPin@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BeginFlush@CBaseInputPin@@UAGJXZ$0
__ehfuncinfo$?BeginFlush@CBaseInputPin@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BeginFlush@CBaseInputPin@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?BeginFlush@CBaseInputPin@@UAGJXZ
_TEXT	SEGMENT
$T86330 = -28						; size = 4
_lck$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?BeginFlush@CBaseInputPin@@UAGJXZ PROC			; CBaseInputPin::BeginFlush, COMDAT
; Line 3016
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BeginFlush@CBaseInputPin@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 3019
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3023
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+153]
	test	eax, eax
	je	SHORT $LN1@BeginFlush
	push	3023					; 00000bcfH
	push	OFFSET $SG83231
	push	OFFSET $SG83232
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@BeginFlush:
; Line 3026
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+153], 1
; Line 3030
	mov	DWORD PTR $T86330[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86330[ebp]
; Line 3031
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@BeginFlush
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN8@BeginFlush:
	DD	1
	DD	$LN7@BeginFlush
$LN7@BeginFlush:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@BeginFlush
$LN5@BeginFlush:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BeginFlush@CBaseInputPin@@UAGJXZ$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?BeginFlush@CBaseInputPin@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BeginFlush@CBaseInputPin@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?BeginFlush@CBaseInputPin@@UAGJXZ ENDP			; CBaseInputPin::BeginFlush
PUBLIC	?EndFlush@CBaseInputPin@@UAGJXZ			; CBaseInputPin::EndFlush
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EndFlush@CBaseInputPin@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EndFlush@CBaseInputPin@@UAGJXZ$0
__ehfuncinfo$?EndFlush@CBaseInputPin@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EndFlush@CBaseInputPin@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?EndFlush@CBaseInputPin@@UAGJXZ
_TEXT	SEGMENT
$T86343 = -28						; size = 4
_lck$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?EndFlush@CBaseInputPin@@UAGJXZ PROC			; CBaseInputPin::EndFlush, COMDAT
; Line 3040
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EndFlush@CBaseInputPin@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 3043
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3046
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+153]
	test	eax, eax
	jne	SHORT $LN1@EndFlush
	push	3046					; 00000be6H
	push	OFFSET $SG83241
	push	OFFSET $SG83242
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@EndFlush:
; Line 3053
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+153], 0
; Line 3056
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+24], 0
; Line 3058
	mov	DWORD PTR $T86343[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86343[ebp]
; Line 3059
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@EndFlush
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@EndFlush:
	DD	1
	DD	$LN7@EndFlush
$LN7@EndFlush:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@EndFlush
$LN5@EndFlush:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EndFlush@CBaseInputPin@@UAGJXZ$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?EndFlush@CBaseInputPin@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EndFlush@CBaseInputPin@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EndFlush@CBaseInputPin@@UAGJXZ ENDP			; CBaseInputPin::EndFlush
PUBLIC	?Notify@CBaseInputPin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z ; CBaseInputPin::Notify
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Notify@CBaseInputPin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pSender$ = 12						; size = 4
_q$ = 16						; size = 24
?Notify@CBaseInputPin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z PROC ; CBaseInputPin::Notify, COMDAT
; Line 3064
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3066
	cmp	DWORD PTR _pSender$[ebp], 0
	jne	SHORT $LN2@Notify@2
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN3@Notify@2
$LN2@Notify@2:
; Line 3067
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pSender$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN1@Notify@2
	push	3067					; 00000bfbH
	push	OFFSET $SG83255
	push	OFFSET $SG83256
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@Notify@2:
; Line 3068
	push	3068					; 00000bfcH
	push	OFFSET $SG83257
	push	OFFSET $SG83258
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
; Line 3069
	xor	eax, eax
$LN3@Notify@2:
; Line 3070
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Notify@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
	npad	1
$LN7@Notify@2:
	DD	1
	DD	$LN6@Notify@2
$LN6@Notify@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@Notify@2
$LN5@Notify@2:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?Notify@CBaseInputPin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z ENDP ; CBaseInputPin::Notify
_TEXT	ENDS
PUBLIC	?Inactive@CBaseInputPin@@UAEJXZ			; CBaseInputPin::Inactive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Inactive@CBaseInputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Inactive@CBaseInputPin@@UAEJXZ PROC			; CBaseInputPin::Inactive, COMDAT
; _this$ = ecx
; Line 3077
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 3078
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0
; Line 3079
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	jne	SHORT $LN1@Inactive@2
; Line 3080
	mov	eax, -2147220982			; 8004020aH
	jmp	SHORT $LN2@Inactive@2
$LN1@Inactive@2:
; Line 3083
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+169], 0
; Line 3085
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Inactive@2:
; Line 3086
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Inactive@CBaseInputPin@@UAEJXZ ENDP			; CBaseInputPin::Inactive
_TEXT	ENDS
PUBLIC	?GetAllocatorRequirements@CBaseInputPin@@UAGJPAU_AllocatorProperties@@@Z ; CBaseInputPin::GetAllocatorRequirements
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetAllocatorRequirements@CBaseInputPin@@UAGJPAU_AllocatorProperties@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pProps$ = 12						; size = 4
?GetAllocatorRequirements@CBaseInputPin@@UAGJPAU_AllocatorProperties@@@Z PROC ; CBaseInputPin::GetAllocatorRequirements, COMDAT
; Line 3093
	push	ebp
	mov	ebp, esp
; Line 3095
	mov	eax, -2147467263			; 80004001H
; Line 3096
	pop	ebp
	ret	8
?GetAllocatorRequirements@CBaseInputPin@@UAGJPAU_AllocatorProperties@@@Z ENDP ; CBaseInputPin::GetAllocatorRequirements
_TEXT	ENDS
PUBLIC	?CheckStreaming@CBaseInputPin@@UAEJXZ		; CBaseInputPin::CheckStreaming
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckStreaming@CBaseInputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckStreaming@CBaseInputPin@@UAEJXZ PROC		; CBaseInputPin::CheckStreaming, COMDAT
; _this$ = ecx
; Line 3102
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 3104
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@CheckStrea
	push	3104					; 00000c20H
	push	OFFSET $SG83274
	push	OFFSET $SG83275
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CheckStrea:
; Line 3107
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsStopped@CBasePin@@QAEHXZ		; CBasePin::IsStopped
	test	eax, eax
	je	SHORT $LN3@CheckStrea
; Line 3108
	mov	eax, -2147220953			; 80040227H
	jmp	SHORT $LN5@CheckStrea
$LN3@CheckStrea:
; Line 3110
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+169]
	test	ecx, ecx
	je	SHORT $LN2@CheckStrea
; Line 3111
	mov	eax, 1
	jmp	SHORT $LN5@CheckStrea
$LN2@CheckStrea:
; Line 3113
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+40]
	test	eax, eax
	je	SHORT $LN1@CheckStrea
; Line 3114
	mov	eax, -2147220981			; 8004020bH
	jmp	SHORT $LN5@CheckStrea
$LN1@CheckStrea:
; Line 3116
	xor	eax, eax
$LN5@CheckStrea:
; Line 3117
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckStreaming@CBaseInputPin@@UAEJXZ ENDP		; CBaseInputPin::CheckStreaming
_TEXT	ENDS
PUBLIC	?PassNotify@CBaseInputPin@@QAEJAAUtagQuality@@@Z ; CBaseInputPin::PassNotify
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PassNotify@CBaseInputPin@@QAEJAAUtagQuality@@@Z
_TEXT	SEGMENT
tv169 = -36						; size = 4
tv170 = -32						; size = 4
tv95 = -28						; size = 4
tv128 = -24						; size = 4
_pIQC$83291 = -16					; size = 4
_hr$83290 = -8						; size = 4
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?PassNotify@CBaseInputPin@@QAEJAAUtagQuality@@@Z PROC	; CBaseInputPin::PassNotify, COMDAT
; _this$ = ecx
; Line 3125
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 3129
	push	OFFSET $SG83287
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 3130
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN4@PassNotify
; Line 3131
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR tv128[ebp], edx
	cmp	DWORD PTR tv128[ebp], 0
	je	SHORT $LN7@PassNotify
	mov	eax, DWORD PTR tv128[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN8@PassNotify
$LN7@PassNotify:
	mov	DWORD PTR tv95[ebp], 0
$LN8@PassNotify:
	mov	esi, esp
	mov	ecx, DWORD PTR _q$[ebp]
	sub	esp, 24					; 00000018H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
	mov	edx, DWORD PTR tv95[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN5@PassNotify
; Line 3132
	jmp	$LN5@PassNotify
$LN4@PassNotify:
; Line 3137
	mov	DWORD PTR _hr$83290[ebp], -2147220970	; 80040216H
; Line 3138
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	$LN2@PassNotify
; Line 3139
	mov	esi, esp
	lea	ecx, DWORD PTR _pIQC$83291[ebp]
	push	ecx
	push	OFFSET _IID_IQualityControl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3141
	cmp	DWORD PTR _pIQC$83291[ebp], 0
	je	$LN2@PassNotify
; Line 3142
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR tv170[ebp], eax
	cmp	DWORD PTR tv170[ebp], 0
	je	SHORT $LN9@PassNotify
	mov	ecx, DWORD PTR tv170[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv169[ebp], ecx
	jmp	SHORT $LN10@PassNotify
$LN9@PassNotify:
	mov	DWORD PTR tv169[ebp], 0
$LN10@PassNotify:
	mov	esi, esp
	mov	edx, DWORD PTR _q$[ebp]
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR tv169[ebp]
	push	eax
	mov	ecx, DWORD PTR _pIQC$83291[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pIQC$83291[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$83290[ebp], eax
; Line 3143
	mov	edx, DWORD PTR _pIQC$83291[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pIQC$83291[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@PassNotify:
; Line 3146
	mov	eax, DWORD PTR _hr$83290[ebp]
$LN5@PassNotify:
; Line 3149
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@PassNotify
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN13@PassNotify:
	DD	1
	DD	$LN12@PassNotify
$LN12@PassNotify:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN11@PassNotify
$LN11@PassNotify:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	81					; 00000051H
	DB	67					; 00000043H
	DB	0
?PassNotify@CBaseInputPin@@QAEJAAUtagQuality@@@Z ENDP	; CBaseInputPin::PassNotify
_TEXT	ENDS
PUBLIC	??_7CMediaSample@@6B@				; CMediaSample::`vftable'
PUBLIC	??0IMediaSample2@@QAE@XZ			; IMediaSample2::IMediaSample2
PUBLIC	??0CMediaSample@@QAE@PA_WPAVCBaseAllocator@@PAJPAEJ@Z ; CMediaSample::CMediaSample
PUBLIC	??_R4CMediaSample@@6B@				; CMediaSample::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMediaSample@@@8			; CMediaSample `RTTI Type Descriptor'
PUBLIC	??_R3CMediaSample@@8				; CMediaSample::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMediaSample@@8				; CMediaSample::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMediaSample@@8			; CMediaSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IMediaSample2@@8			; IMediaSample2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIMediaSample2@@@8			; IMediaSample2 `RTTI Type Descriptor'
PUBLIC	??_R3IMediaSample2@@8				; IMediaSample2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMediaSample2@@8				; IMediaSample2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IMediaSample@@8			; IMediaSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIMediaSample@@@8			; IMediaSample `RTTI Type Descriptor'
PUBLIC	??_R3IMediaSample@@8				; IMediaSample::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMediaSample@@8				; IMediaSample::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CMediaSample@@UAGJABU_GUID@@PAPAX@Z ; CMediaSample::QueryInterface
PUBLIC	?AddRef@CMediaSample@@UAGKXZ			; CMediaSample::AddRef
PUBLIC	?Release@CMediaSample@@UAGKXZ			; CMediaSample::Release
PUBLIC	?GetPointer@CMediaSample@@UAGJPAPAE@Z		; CMediaSample::GetPointer
PUBLIC	?GetSize@CMediaSample@@UAGJXZ			; CMediaSample::GetSize
PUBLIC	?GetTime@CMediaSample@@UAGJPA_J0@Z		; CMediaSample::GetTime
PUBLIC	?SetTime@CMediaSample@@UAGJPA_J0@Z		; CMediaSample::SetTime
PUBLIC	?IsSyncPoint@CMediaSample@@UAGJXZ		; CMediaSample::IsSyncPoint
PUBLIC	?SetSyncPoint@CMediaSample@@UAGJH@Z		; CMediaSample::SetSyncPoint
PUBLIC	?IsPreroll@CMediaSample@@UAGJXZ			; CMediaSample::IsPreroll
PUBLIC	?SetPreroll@CMediaSample@@UAGJH@Z		; CMediaSample::SetPreroll
PUBLIC	?GetActualDataLength@CMediaSample@@UAGJXZ	; CMediaSample::GetActualDataLength
PUBLIC	?SetActualDataLength@CMediaSample@@UAGJJ@Z	; CMediaSample::SetActualDataLength
PUBLIC	?GetMediaType@CMediaSample@@UAGJPAPAU_AMMediaType@@@Z ; CMediaSample::GetMediaType
PUBLIC	?SetMediaType@CMediaSample@@UAGJPAU_AMMediaType@@@Z ; CMediaSample::SetMediaType
PUBLIC	?IsDiscontinuity@CMediaSample@@UAGJXZ		; CMediaSample::IsDiscontinuity
PUBLIC	?SetDiscontinuity@CMediaSample@@UAGJH@Z		; CMediaSample::SetDiscontinuity
PUBLIC	?GetMediaTime@CMediaSample@@UAGJPA_J0@Z		; CMediaSample::GetMediaTime
PUBLIC	?SetMediaTime@CMediaSample@@UAGJPA_J0@Z		; CMediaSample::SetMediaTime
PUBLIC	?GetProperties@CMediaSample@@UAGJKPAE@Z		; CMediaSample::GetProperties
PUBLIC	?SetProperties@CMediaSample@@UAGJKPBE@Z		; CMediaSample::SetProperties
EXTRN	??_ECMediaSample@@UAEPAXI@Z:PROC		; CMediaSample::`vector deleting destructor'
;	COMDAT ??_R2IMediaSample@@8
rdata$r	SEGMENT
??_R2IMediaSample@@8 DD FLAT:??_R1A@?0A@EA@IMediaSample@@8 ; IMediaSample::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IMediaSample@@8
rdata$r	SEGMENT
??_R3IMediaSample@@8 DD 00H				; IMediaSample::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMediaSample@@@8
_DATA	SEGMENT
??_R0?AUIMediaSample@@@8 DD FLAT:??_7type_info@@6B@	; IMediaSample `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMediaSample@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IMediaSample@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMediaSample@@8 DD FLAT:??_R0?AUIMediaSample@@@8 ; IMediaSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_R2IMediaSample2@@8
rdata$r	SEGMENT
??_R2IMediaSample2@@8 DD FLAT:??_R1A@?0A@EA@IMediaSample2@@8 ; IMediaSample2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IMediaSample@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IMediaSample2@@8
rdata$r	SEGMENT
??_R3IMediaSample2@@8 DD 00H				; IMediaSample2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IMediaSample2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMediaSample2@@@8
_DATA	SEGMENT
??_R0?AUIMediaSample2@@@8 DD FLAT:??_7type_info@@6B@	; IMediaSample2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMediaSample2@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IMediaSample2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMediaSample2@@8 DD FLAT:??_R0?AUIMediaSample2@@@8 ; IMediaSample2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMediaSample2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMediaSample@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMediaSample@@8 DD FLAT:??_R0?AVCMediaSample@@@8 ; CMediaSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_R2CMediaSample@@8
rdata$r	SEGMENT
??_R2CMediaSample@@8 DD FLAT:??_R1A@?0A@EA@CMediaSample@@8 ; CMediaSample::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IMediaSample2@@8
	DD	FLAT:??_R1A@?0A@EA@IMediaSample@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CMediaSample@@8
rdata$r	SEGMENT
??_R3CMediaSample@@8 DD 00H				; CMediaSample::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMediaSample@@@8
_DATA	SEGMENT
??_R0?AVCMediaSample@@@8 DD FLAT:??_7type_info@@6B@	; CMediaSample `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMediaSample@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMediaSample@@6B@
rdata$r	SEGMENT
??_R4CMediaSample@@6B@ DD 00H				; CMediaSample::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMediaSample@@@8
	DD	FLAT:??_R3CMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_7CMediaSample@@6B@
CONST	SEGMENT
??_7CMediaSample@@6B@ DD FLAT:??_R4CMediaSample@@6B@	; CMediaSample::`vftable'
	DD	FLAT:?QueryInterface@CMediaSample@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMediaSample@@UAGKXZ
	DD	FLAT:?Release@CMediaSample@@UAGKXZ
	DD	FLAT:?GetPointer@CMediaSample@@UAGJPAPAE@Z
	DD	FLAT:?GetSize@CMediaSample@@UAGJXZ
	DD	FLAT:?GetTime@CMediaSample@@UAGJPA_J0@Z
	DD	FLAT:?SetTime@CMediaSample@@UAGJPA_J0@Z
	DD	FLAT:?IsSyncPoint@CMediaSample@@UAGJXZ
	DD	FLAT:?SetSyncPoint@CMediaSample@@UAGJH@Z
	DD	FLAT:?IsPreroll@CMediaSample@@UAGJXZ
	DD	FLAT:?SetPreroll@CMediaSample@@UAGJH@Z
	DD	FLAT:?GetActualDataLength@CMediaSample@@UAGJXZ
	DD	FLAT:?SetActualDataLength@CMediaSample@@UAGJJ@Z
	DD	FLAT:?GetMediaType@CMediaSample@@UAGJPAPAU_AMMediaType@@@Z
	DD	FLAT:?SetMediaType@CMediaSample@@UAGJPAU_AMMediaType@@@Z
	DD	FLAT:?IsDiscontinuity@CMediaSample@@UAGJXZ
	DD	FLAT:?SetDiscontinuity@CMediaSample@@UAGJH@Z
	DD	FLAT:?GetMediaTime@CMediaSample@@UAGJPA_J0@Z
	DD	FLAT:?SetMediaTime@CMediaSample@@UAGJPA_J0@Z
	DD	FLAT:?GetProperties@CMediaSample@@UAGJKPAE@Z
	DD	FLAT:?SetProperties@CMediaSample@@UAGJKPBE@Z
	DD	FLAT:??_ECMediaSample@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CMediaSample@@QAE@PA_WPAVCBaseAllocator@@PAJPAEJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pName$ = 8						; size = 4
_pAllocator$ = 12					; size = 4
_phr$ = 16						; size = 4
_pBuffer$ = 20						; size = 4
_length$ = 24						; size = 4
??0CMediaSample@@QAE@PA_WPAVCBaseAllocator@@PAJPAEJ@Z PROC ; CMediaSample::CMediaSample, COMDAT
; _this$ = ecx
; Line 3183
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IMediaSample2@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMediaSample@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pAllocator$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0
; Line 3188
	cmp	DWORD PTR _pAllocator$[ebp], 0
	jne	SHORT $LN2@CMediaSamp
	push	3188					; 00000c74H
	push	OFFSET $SG83305
	push	OFFSET $SG83306
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CMediaSamp:
; Line 3189
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0CMediaSample@@QAE@PA_WPAVCBaseAllocator@@PAJPAEJ@Z ENDP ; CMediaSample::CMediaSample
_TEXT	ENDS
PUBLIC	??1CMediaSample@@UAE@XZ				; CMediaSample::~CMediaSample
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMediaSample@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMediaSample@@UAEPAXI@Z PROC			; CMediaSample::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMediaSample@@UAE@XZ			; CMediaSample::~CMediaSample
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMediaSample@@UAEPAXI@Z ENDP			; CMediaSample::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0IMediaSample@@QAE@XZ				; IMediaSample::IMediaSample
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IMediaSample2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IMediaSample2@@QAE@XZ PROC				; IMediaSample2::IMediaSample2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IMediaSample@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IMediaSample2@@QAE@XZ ENDP				; IMediaSample2::IMediaSample2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IMediaSample@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IMediaSample@@QAE@XZ PROC				; IMediaSample::IMediaSample, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IMediaSample@@QAE@XZ ENDP				; IMediaSample::IMediaSample
_TEXT	ENDS
PUBLIC	??0CMediaSample@@QAE@PADPAVCBaseAllocator@@PAJPAEJ@Z ; CMediaSample::CMediaSample
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMediaSample@@QAE@PADPAVCBaseAllocator@@PAJPAEJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pName$ = 8						; size = 4
_pAllocator$ = 12					; size = 4
_phr$ = 16						; size = 4
_pBuffer$ = 20						; size = 4
_length$ = 24						; size = 4
??0CMediaSample@@QAE@PADPAVCBaseAllocator@@PAJPAEJ@Z PROC ; CMediaSample::CMediaSample, COMDAT
; _this$ = ecx
; Line 3206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IMediaSample2@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMediaSample@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pAllocator$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0
; Line 3211
	cmp	DWORD PTR _pAllocator$[ebp], 0
	jne	SHORT $LN2@CMediaSamp@2
	push	3211					; 00000c8bH
	push	OFFSET $SG83324
	push	OFFSET $SG83325
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CMediaSamp@2:
; Line 3212
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0CMediaSample@@QAE@PADPAVCBaseAllocator@@PAJPAEJ@Z ENDP ; CMediaSample::CMediaSample
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CMediaSample@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMediaSample@@UAE@XZ PROC				; CMediaSample::~CMediaSample, COMDAT
; _this$ = ecx
; Line 3218
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMediaSample@@6B@
; Line 3220
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN2@CMediaSamp@3
; Line 3221
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	call	?DeleteMediaType@@YGXPAU_AMMediaType@@@Z ; DeleteMediaType
$LN2@CMediaSamp@3:
; Line 3223
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMediaSample@@UAE@XZ ENDP				; CMediaSample::~CMediaSample
_TEXT	ENDS
EXTRN	_IID_IMediaSample:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CMediaSample@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CMediaSample@@UAGJABU_GUID@@PAPAX@Z PROC ; CMediaSample::QueryInterface, COMDAT
; Line 3229
	push	ebp
	mov	ebp, esp
; Line 3232
	push	OFFSET _IID_IMediaSample
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	jne	SHORT $LN2@QueryInter@3
	push	OFFSET _IID_IMediaSample2
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	jne	SHORT $LN2@QueryInter@3
	push	OFFSET _IID_IUnknown
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN3@QueryInter@3
$LN2@QueryInter@3:
; Line 3233
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_GetInterface@8
	jmp	SHORT $LN4@QueryInter@3
; Line 3234
	jmp	SHORT $LN4@QueryInter@3
$LN3@QueryInter@3:
; Line 3235
	mov	eax, -2147467262			; 80004002H
$LN4@QueryInter@3:
; Line 3237
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMediaSample@@UAGJABU_GUID@@PAPAX@Z ENDP ; CMediaSample::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMediaSample@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?AddRef@CMediaSample@@UAGKXZ PROC			; CMediaSample::AddRef, COMDAT
; Line 3241
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3242
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3243
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?AddRef@CMediaSample@@UAGKXZ ENDP			; CMediaSample::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CMediaSample@@UAGKXZ
_TEXT	SEGMENT
_lRef$ = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMediaSample@@UAGKXZ PROC			; CMediaSample::Release, COMDAT
; Line 3265
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3268
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 1
	jne	SHORT $LN6@Release@3
; Line 3269
	mov	DWORD PTR _lRef$[ebp], 0
; Line 3270
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0
; Line 3271
	jmp	SHORT $LN5@Release@3
$LN6@Release@3:
; Line 3272
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 68					; 00000044H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__InterlockedDecrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRef$[ebp], eax
$LN5@Release@3:
; Line 3274
	cmp	DWORD PTR _lRef$[ebp], 0
	jge	SHORT $LN4@Release@3
	push	3274					; 00000ccaH
	push	OFFSET $SG83350
	push	OFFSET $SG83351
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@Release@3:
; Line 3277
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	push	OFFSET $SG83352
	push	3
	push	4
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 3280
	cmp	DWORD PTR _lRef$[ebp], 0
	jne	$LN3@Release@3
; Line 3282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 8
	je	SHORT $LN2@Release@3
; Line 3283
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Release@3:
; Line 3285
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN1@Release@3
	push	3285					; 00000cd5H
	push	OFFSET $SG83356
	push	OFFSET $SG83357
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Release@3:
; Line 3286
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 3287
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 3288
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 3292
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Release@3:
; Line 3294
	mov	eax, DWORD PTR _lRef$[ebp]
; Line 3295
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMediaSample@@UAGKXZ ENDP			; CMediaSample::Release
_TEXT	ENDS
PUBLIC	?SetPointer@CMediaSample@@QAEJPAEJ@Z		; CMediaSample::SetPointer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetPointer@CMediaSample@@QAEJPAEJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
_cBytes$ = 12						; size = 4
?SetPointer@CMediaSample@@QAEJPAEJ@Z PROC		; CMediaSample::SetPointer, COMDAT
; _this$ = ecx
; Line 3304
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 3305
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 3306
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cBytes$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 3307
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cBytes$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 3309
	xor	eax, eax
; Line 3310
	mov	esp, ebp
	pop	ebp
	ret	8
?SetPointer@CMediaSample@@QAEJPAEJ@Z ENDP		; CMediaSample::SetPointer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPointer@CMediaSample@@UAGJPAPAE@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ppBuffer$ = 12						; size = 4
?GetPointer@CMediaSample@@UAGJPAPAE@Z PROC		; CMediaSample::GetPointer, COMDAT
; Line 3317
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3318
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@GetPointer
	push	3318					; 00000cf6H
	push	OFFSET $SG83372
	push	OFFSET $SG83373
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@GetPointer:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetPointer
	push	3318					; 00000cf6H
	push	OFFSET $SG83377
	push	OFFSET $SG83378
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetPointer:
; Line 3322
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN1@GetPointer
	push	3322					; 00000cfaH
	push	OFFSET $SG83380
	push	OFFSET $SG83381
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetPointer:
; Line 3324
	mov	eax, DWORD PTR _ppBuffer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
; Line 3325
	xor	eax, eax
; Line 3326
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetPointer@CMediaSample@@UAGJPAPAE@Z ENDP		; CMediaSample::GetPointer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@CMediaSample@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetSize@CMediaSample@@UAGJXZ PROC			; CMediaSample::GetSize, COMDAT
; Line 3332
	push	ebp
	mov	ebp, esp
; Line 3333
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 3334
	pop	ebp
	ret	4
?GetSize@CMediaSample@@UAGJXZ ENDP			; CMediaSample::GetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetTime@CMediaSample@@UAGJPA_J0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pTimeStart$ = 12					; size = 4
_pTimeEnd$ = 16						; size = 4
?GetTime@CMediaSample@@UAGJPA_J0@Z PROC			; CMediaSample::GetTime, COMDAT
; Line 3343
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3344
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _pTimeStart$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN7@GetTime
	push	3344					; 00000d10H
	push	OFFSET $SG83394
	push	OFFSET $SG83395
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN7@GetTime:
	mov	esi, esp
	push	8
	mov	ecx, DWORD PTR _pTimeStart$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@GetTime
	push	3344					; 00000d10H
	push	OFFSET $SG83399
	push	OFFSET $SG83400
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN6@GetTime:
; Line 3345
	mov	esi, esp
	push	8
	mov	edx, DWORD PTR _pTimeEnd$[ebp]
	push	edx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@GetTime
	push	3345					; 00000d11H
	push	OFFSET $SG83404
	push	OFFSET $SG83405
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@GetTime:
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _pTimeEnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@GetTime
	push	3345					; 00000d11H
	push	OFFSET $SG83409
	push	OFFSET $SG83410
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@GetTime:
; Line 3347
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 256				; 00000100H
	jne	SHORT $LN3@GetTime
; Line 3348
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 16					; 00000010H
	jne	SHORT $LN2@GetTime
; Line 3349
	mov	eax, -2147220919			; 80040249H
	jmp	SHORT $LN8@GetTime
; Line 3350
	jmp	SHORT $LN3@GetTime
$LN2@GetTime:
; Line 3351
	mov	edx, DWORD PTR _pTimeStart$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+4], eax
; Line 3354
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR [ecx+36]
	adc	eax, 0
	mov	ecx, DWORD PTR _pTimeEnd$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
; Line 3355
	mov	eax, 262768				; 00040270H
	jmp	SHORT $LN8@GetTime
$LN3@GetTime:
; Line 3359
	mov	edx, DWORD PTR _pTimeStart$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+4], eax
; Line 3360
	mov	ecx, DWORD PTR _pTimeEnd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+4], edx
; Line 3361
	xor	eax, eax
$LN8@GetTime:
; Line 3362
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetTime@CMediaSample@@UAGJPA_J0@Z ENDP			; CMediaSample::GetTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetTime@CMediaSample@@UAGJPA_J0@Z
_TEXT	SEGMENT
tv161 = -8						; size = 4
tv160 = -4						; size = 4
_this$ = 8						; size = 4
_pTimeStart$ = 12					; size = 4
_pTimeEnd$ = 16						; size = 4
?SetTime@CMediaSample@@UAGJPA_J0@Z PROC			; CMediaSample::SetTime, COMDAT
; Line 3372
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3373
	cmp	DWORD PTR _pTimeStart$[ebp], 0
	jne	SHORT $LN8@SetTime
; Line 3374
	cmp	DWORD PTR _pTimeEnd$[ebp], 0
	je	SHORT $LN7@SetTime
	push	3374					; 00000d2eH
	push	OFFSET $SG83423
	push	OFFSET $SG83424
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@SetTime:
; Line 3375
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -273				; fffffeefH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3376
	jmp	$LN6@SetTime
$LN8@SetTime:
; Line 3377
	cmp	DWORD PTR _pTimeEnd$[ebp], 0
	jne	SHORT $LN5@SetTime
; Line 3378
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTimeStart$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+36], ecx
; Line 3379
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 3380
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, -257				; fffffeffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 3381
	jmp	$LN6@SetTime
$LN5@SetTime:
; Line 3382
	mov	esi, esp
	push	8
	mov	edx, DWORD PTR _pTimeStart$[ebp]
	push	edx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@SetTime
	push	3382					; 00000d36H
	push	OFFSET $SG83431
	push	OFFSET $SG83432
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@SetTime:
; Line 3383
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _pTimeEnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@SetTime
	push	3383					; 00000d37H
	push	OFFSET $SG83436
	push	OFFSET $SG83437
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@SetTime:
; Line 3384
	mov	ecx, DWORD PTR _pTimeEnd$[ebp]
	mov	edx, DWORD PTR _pTimeStart$[ebp]
	mov	DWORD PTR tv160[ebp], ecx
	mov	DWORD PTR tv161[ebp], edx
	mov	eax, DWORD PTR tv160[ebp]
	mov	ecx, DWORD PTR tv161[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jg	SHORT $LN1@SetTime
	jl	SHORT $LN11@SetTime
	mov	eax, DWORD PTR tv160[ebp]
	mov	ecx, DWORD PTR tv161[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN1@SetTime
$LN11@SetTime:
	push	3384					; 00000d38H
	push	OFFSET $SG83439
	push	OFFSET $SG83440
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetTime:
; Line 3386
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTimeStart$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+36], ecx
; Line 3387
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pTimeEnd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+44], eax
; Line 3388
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	or	edx, 272				; 00000110H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN6@SetTime:
; Line 3391
	xor	eax, eax
; Line 3392
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTime@CMediaSample@@UAGJPA_J0@Z ENDP			; CMediaSample::SetTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMediaTime@CMediaSample@@UAGJPA_J0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pTimeStart$ = 12					; size = 4
_pTimeEnd$ = 16						; size = 4
?GetMediaTime@CMediaSample@@UAGJPA_J0@Z PROC		; CMediaSample::GetMediaTime, COMDAT
; Line 3401
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3402
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _pTimeStart$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@GetMediaTi
	push	3402					; 00000d4aH
	push	OFFSET $SG83449
	push	OFFSET $SG83450
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@GetMediaTi:
	mov	esi, esp
	push	8
	mov	ecx, DWORD PTR _pTimeStart$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@GetMediaTi
	push	3402					; 00000d4aH
	push	OFFSET $SG83454
	push	OFFSET $SG83455
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@GetMediaTi:
; Line 3403
	mov	esi, esp
	push	8
	mov	edx, DWORD PTR _pTimeEnd$[ebp]
	push	edx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@GetMediaTi
	push	3403					; 00000d4bH
	push	OFFSET $SG83459
	push	OFFSET $SG83460
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@GetMediaTi:
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _pTimeEnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetMediaTi
	push	3403					; 00000d4bH
	push	OFFSET $SG83464
	push	OFFSET $SG83465
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetMediaTi:
; Line 3405
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 32					; 00000020H
	jne	SHORT $LN1@GetMediaTi
; Line 3406
	mov	eax, -2147220911			; 80040251H
	jmp	SHORT $LN6@GetMediaTi
$LN1@GetMediaTi:
; Line 3409
	mov	eax, DWORD PTR _pTimeStart$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+4], ecx
; Line 3410
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+48]
	adc	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _pTimeEnd$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 3411
	xor	eax, eax
$LN6@GetMediaTi:
; Line 3412
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetMediaTime@CMediaSample@@UAGJPA_J0@Z ENDP		; CMediaSample::GetMediaTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetMediaTime@CMediaSample@@UAGJPA_J0@Z
_TEXT	SEGMENT
tv143 = -8						; size = 4
tv142 = -4						; size = 4
_this$ = 8						; size = 4
_pTimeStart$ = 12					; size = 4
_pTimeEnd$ = 16						; size = 4
?SetMediaTime@CMediaSample@@UAGJPA_J0@Z PROC		; CMediaSample::SetMediaTime, COMDAT
; Line 3421
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3422
	cmp	DWORD PTR _pTimeStart$[ebp], 0
	jne	SHORT $LN6@SetMediaTi
; Line 3423
	cmp	DWORD PTR _pTimeEnd$[ebp], 0
	je	SHORT $LN5@SetMediaTi
	push	3423					; 00000d5fH
	push	OFFSET $SG83475
	push	OFFSET $SG83476
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@SetMediaTi:
; Line 3424
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -33				; ffffffdfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3425
	jmp	$LN4@SetMediaTi
$LN6@SetMediaTi:
; Line 3426
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _pTimeStart$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN3@SetMediaTi
	push	3426					; 00000d62H
	push	OFFSET $SG83481
	push	OFFSET $SG83482
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN3@SetMediaTi:
; Line 3427
	mov	esi, esp
	push	8
	mov	ecx, DWORD PTR _pTimeEnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@SetMediaTi
	push	3427					; 00000d63H
	push	OFFSET $SG83486
	push	OFFSET $SG83487
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@SetMediaTi:
; Line 3428
	mov	edx, DWORD PTR _pTimeEnd$[ebp]
	mov	eax, DWORD PTR _pTimeStart$[ebp]
	mov	DWORD PTR tv142[ebp], edx
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	edx, DWORD PTR tv143[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jg	SHORT $LN1@SetMediaTi
	jl	SHORT $LN9@SetMediaTi
	mov	ecx, DWORD PTR tv142[ebp]
	mov	edx, DWORD PTR tv143[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN1@SetMediaTi
$LN9@SetMediaTi:
	push	3428					; 00000d64H
	push	OFFSET $SG83489
	push	OFFSET $SG83490
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetMediaTi:
; Line 3430
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pTimeStart$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+48], eax
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+52], edx
; Line 3431
	mov	eax, DWORD PTR _pTimeEnd$[ebp]
	mov	ecx, DWORD PTR _pTimeStart$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	sbb	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 3432
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	or	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@SetMediaTi:
; Line 3434
	xor	eax, eax
; Line 3435
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetMediaTime@CMediaSample@@UAGJPA_J0@Z ENDP		; CMediaSample::SetMediaTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsSyncPoint@CMediaSample@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsSyncPoint@CMediaSample@@UAGJXZ PROC			; CMediaSample::IsSyncPoint, COMDAT
; Line 3440
	push	ebp
	mov	ebp, esp
; Line 3441
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN2@IsSyncPoin
; Line 3442
	xor	eax, eax
	jmp	SHORT $LN3@IsSyncPoin
; Line 3443
	jmp	SHORT $LN3@IsSyncPoin
$LN2@IsSyncPoin:
; Line 3444
	mov	eax, 1
$LN3@IsSyncPoin:
; Line 3446
	pop	ebp
	ret	4
?IsSyncPoint@CMediaSample@@UAGJXZ ENDP			; CMediaSample::IsSyncPoint
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSyncPoint@CMediaSample@@UAGJH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bIsSyncPoint$ = 12					; size = 4
?SetSyncPoint@CMediaSample@@UAGJH@Z PROC		; CMediaSample::SetSyncPoint, COMDAT
; Line 3451
	push	ebp
	mov	ebp, esp
; Line 3452
	cmp	DWORD PTR _bIsSyncPoint$[ebp], 0
	je	SHORT $LN2@SetSyncPoi
; Line 3453
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3454
	jmp	SHORT $LN1@SetSyncPoi
$LN2@SetSyncPoi:
; Line 3455
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN1@SetSyncPoi:
; Line 3457
	xor	eax, eax
; Line 3458
	pop	ebp
	ret	8
?SetSyncPoint@CMediaSample@@UAGJH@Z ENDP		; CMediaSample::SetSyncPoint
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsDiscontinuity@CMediaSample@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsDiscontinuity@CMediaSample@@UAGJXZ PROC		; CMediaSample::IsDiscontinuity, COMDAT
; Line 3465
	push	ebp
	mov	ebp, esp
; Line 3466
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4
	je	SHORT $LN2@IsDisconti
; Line 3467
	xor	eax, eax
	jmp	SHORT $LN3@IsDisconti
; Line 3468
	jmp	SHORT $LN3@IsDisconti
$LN2@IsDisconti:
; Line 3469
	mov	eax, 1
$LN3@IsDisconti:
; Line 3471
	pop	ebp
	ret	4
?IsDiscontinuity@CMediaSample@@UAGJXZ ENDP		; CMediaSample::IsDiscontinuity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetDiscontinuity@CMediaSample@@UAGJH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bDiscont$ = 12						; size = 4
?SetDiscontinuity@CMediaSample@@UAGJH@Z PROC		; CMediaSample::SetDiscontinuity, COMDAT
; Line 3477
	push	ebp
	mov	ebp, esp
; Line 3479
	cmp	DWORD PTR _bDiscont$[ebp], 0
	je	SHORT $LN2@SetDiscont
; Line 3480
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3481
	jmp	SHORT $LN1@SetDiscont
$LN2@SetDiscont:
; Line 3482
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN1@SetDiscont:
; Line 3484
	xor	eax, eax
; Line 3485
	pop	ebp
	ret	8
?SetDiscontinuity@CMediaSample@@UAGJH@Z ENDP		; CMediaSample::SetDiscontinuity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsPreroll@CMediaSample@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsPreroll@CMediaSample@@UAGJXZ PROC			; CMediaSample::IsPreroll, COMDAT
; Line 3489
	push	ebp
	mov	ebp, esp
; Line 3490
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN2@IsPreroll
; Line 3491
	xor	eax, eax
	jmp	SHORT $LN3@IsPreroll
; Line 3492
	jmp	SHORT $LN3@IsPreroll
$LN2@IsPreroll:
; Line 3493
	mov	eax, 1
$LN3@IsPreroll:
; Line 3495
	pop	ebp
	ret	4
?IsPreroll@CMediaSample@@UAGJXZ ENDP			; CMediaSample::IsPreroll
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetPreroll@CMediaSample@@UAGJH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bIsPreroll$ = 12					; size = 4
?SetPreroll@CMediaSample@@UAGJH@Z PROC			; CMediaSample::SetPreroll, COMDAT
; Line 3500
	push	ebp
	mov	ebp, esp
; Line 3501
	cmp	DWORD PTR _bIsPreroll$[ebp], 0
	je	SHORT $LN2@SetPreroll
; Line 3502
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3503
	jmp	SHORT $LN1@SetPreroll
$LN2@SetPreroll:
; Line 3504
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN1@SetPreroll:
; Line 3506
	xor	eax, eax
; Line 3507
	pop	ebp
	ret	8
?SetPreroll@CMediaSample@@UAGJH@Z ENDP			; CMediaSample::SetPreroll
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetActualDataLength@CMediaSample@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetActualDataLength@CMediaSample@@UAGJXZ PROC		; CMediaSample::GetActualDataLength, COMDAT
; Line 3511
	push	ebp
	mov	ebp, esp
; Line 3512
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
; Line 3513
	pop	ebp
	ret	4
?GetActualDataLength@CMediaSample@@UAGJXZ ENDP		; CMediaSample::GetActualDataLength
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetActualDataLength@CMediaSample@@UAGJJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lActual$ = 12						; size = 4
?SetActualDataLength@CMediaSample@@UAGJJ@Z PROC		; CMediaSample::SetActualDataLength, COMDAT
; Line 3518
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3519
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lActual$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jle	SHORT $LN2@SetActualD
; Line 3520
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _lActual$[ebp], eax
	jle	SHORT $LN1@SetActualD
	push	3520					; 00000dc0H
	push	OFFSET $SG83545
	push	OFFSET $SG83546
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetActualD:
; Line 3521
	mov	eax, -2147220979			; 8004020dH
	jmp	SHORT $LN3@SetActualD
$LN2@SetActualD:
; Line 3523
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lActual$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 3524
	xor	eax, eax
$LN3@SetActualD:
; Line 3525
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?SetActualDataLength@CMediaSample@@UAGJJ@Z ENDP		; CMediaSample::SetActualDataLength
_TEXT	ENDS
EXTRN	?CreateMediaType@@YGPAU_AMMediaType@@PBU1@@Z:PROC ; CreateMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetMediaType@CMediaSample@@UAGJPAPAU_AMMediaType@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ppMediaType$ = 12					; size = 4
?GetMediaType@CMediaSample@@UAGJPAPAU_AMMediaType@@@Z PROC ; CMediaSample::GetMediaType, COMDAT
; Line 3532
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3533
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _ppMediaType$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN7@GetMediaTy
	push	3533					; 00000dcdH
	push	OFFSET $SG83555
	push	OFFSET $SG83556
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN7@GetMediaTy:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _ppMediaType$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@GetMediaTy
	push	3533					; 00000dcdH
	push	OFFSET $SG83560
	push	OFFSET $SG83561
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN6@GetMediaTy:
; Line 3534
	cmp	DWORD PTR _ppMediaType$[ebp], 0
	jne	SHORT $LN5@GetMediaTy
	push	3534					; 00000dceH
	push	OFFSET $SG83563
	push	OFFSET $SG83564
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@GetMediaTy:
; Line 3538
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 8
	jne	SHORT $LN4@GetMediaTy
; Line 3539
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN3@GetMediaTy
	push	3539					; 00000dd3H
	push	OFFSET $SG83567
	push	OFFSET $SG83568
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@GetMediaTy:
; Line 3540
	mov	edx, DWORD PTR _ppMediaType$[ebp]
	mov	DWORD PTR [edx], 0
; Line 3541
	mov	eax, 1
	jmp	SHORT $LN8@GetMediaTy
$LN4@GetMediaTy:
; Line 3544
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN2@GetMediaTy
	push	3544					; 00000dd8H
	push	OFFSET $SG83571
	push	OFFSET $SG83572
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@GetMediaTy:
; Line 3548
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	call	?CreateMediaType@@YGPAU_AMMediaType@@PBU1@@Z ; CreateMediaType
	mov	ecx, DWORD PTR _ppMediaType$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 3549
	mov	edx, DWORD PTR _ppMediaType$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@GetMediaTy
; Line 3550
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@GetMediaTy
$LN1@GetMediaTy:
; Line 3552
	xor	eax, eax
$LN8@GetMediaTy:
; Line 3553
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetMediaType@CMediaSample@@UAGJPAPAU_AMMediaType@@@Z ENDP ; CMediaSample::GetMediaType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetMediaType@CMediaSample@@UAGJPAU_AMMediaType@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pMediaType$ = 12					; size = 4
?SetMediaType@CMediaSample@@UAGJPAU_AMMediaType@@@Z PROC ; CMediaSample::SetMediaType, COMDAT
; Line 3560
	push	ebp
	mov	ebp, esp
	push	esi
; Line 3563
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN5@SetMediaTy@2
; Line 3564
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	call	?DeleteMediaType@@YGXPAU_AMMediaType@@@Z ; DeleteMediaType
; Line 3565
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN5@SetMediaTy@2:
; Line 3570
	cmp	DWORD PTR _pMediaType$[ebp], 0
	jne	SHORT $LN4@SetMediaTy@2
; Line 3571
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, -9					; fffffff7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 3572
	xor	eax, eax
	jmp	$LN6@SetMediaTy@2
$LN4@SetMediaTy@2:
; Line 3575
	cmp	DWORD PTR _pMediaType$[ebp], 0
	jne	SHORT $LN3@SetMediaTy@2
	push	3575					; 00000df7H
	push	OFFSET $SG83582
	push	OFFSET $SG83583
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@SetMediaTy@2:
; Line 3576
	mov	esi, esp
	push	72					; 00000048H
	mov	ecx, DWORD PTR _pMediaType$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@SetMediaTy@2
	push	3576					; 00000df8H
	push	OFFSET $SG83587
	push	OFFSET $SG83588
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@SetMediaTy@2:
; Line 3580
	mov	edx, DWORD PTR _pMediaType$[ebp]
	push	edx
	call	?CreateMediaType@@YGPAU_AMMediaType@@PBU1@@Z ; CreateMediaType
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax
; Line 3581
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], 0
	jne	SHORT $LN1@SetMediaTy@2
; Line 3582
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -9					; fffffff7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3583
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN6@SetMediaTy@2
$LN1@SetMediaTy@2:
; Line 3586
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 3587
	xor	eax, eax
$LN6@SetMediaTy@2:
; Line 3588
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?SetMediaType@CMediaSample@@UAGJPAU_AMMediaType@@@Z ENDP ; CMediaSample::SetMediaType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetProperties@CMediaSample@@UAGJKPAE@Z
_TEXT	SEGMENT
tv67 = -60						; size = 4
_Props$83599 = -52					; size = 48
_this$ = 8						; size = 4
_cbProperties$ = 12					; size = 4
_pbProperties$ = 16					; size = 4
?GetProperties@CMediaSample@@UAGJKPAE@Z PROC		; CMediaSample::GetProperties, COMDAT
; Line 3595
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3596
	cmp	DWORD PTR _cbProperties$[ebp], 0
	je	$LN4@GetPropert
; Line 3597
	cmp	DWORD PTR _pbProperties$[ebp], 0
	jne	SHORT $LN3@GetPropert
	mov	eax, -2147467261			; 80004003H
	jmp	$LN5@GetPropert
$LN3@GetPropert:
; Line 3600
	cmp	DWORD PTR _cbProperties$[ebp], 48	; 00000030H
	jae	SHORT $LN7@GetPropert
	mov	eax, DWORD PTR _cbProperties$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN8@GetPropert
$LN7@GetPropert:
	mov	DWORD PTR tv67[ebp], 48			; 00000030H
$LN8@GetPropert:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _Props$83599[ebp], ecx
; Line 3601
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, -33				; ffffffdfH
	mov	DWORD PTR _Props$83599[ebp+8], eax
; Line 3602
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _Props$83599[ebp+4], edx
; Line 3603
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _Props$83599[ebp+40], ecx
; Line 3604
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _Props$83599[ebp+44], eax
; Line 3605
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _Props$83599[ebp+12], edx
; Line 3606
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _Props$83599[ebp+16], ecx
	mov	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _Props$83599[ebp+20], edx
; Line 3607
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _Props$83599[ebp+24], ecx
	mov	edx, DWORD PTR [eax+44]
	mov	DWORD PTR _Props$83599[ebp+28], edx
; Line 3608
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _Props$83599[ebp+32], ecx
; Line 3609
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 8
	je	SHORT $LN2@GetPropert
; Line 3610
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _Props$83599[ebp+36], edx
; Line 3611
	jmp	SHORT $LN1@GetPropert
$LN2@GetPropert:
; Line 3612
	mov	DWORD PTR _Props$83599[ebp+36], 0
$LN1@GetPropert:
; Line 3614
	mov	eax, DWORD PTR _Props$83599[ebp]
	push	eax
	lea	ecx, DWORD PTR _Props$83599[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbProperties$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@GetPropert:
; Line 3616
	xor	eax, eax
$LN5@GetPropert:
; Line 3617
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetPropert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN11@GetPropert:
	DD	1
	DD	$LN10@GetPropert
$LN10@GetPropert:
	DD	-52					; ffffffccH
	DD	48					; 00000030H
	DD	$LN9@GetPropert
$LN9@GetPropert:
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
?GetProperties@CMediaSample@@UAGJKPAE@Z ENDP		; CMediaSample::GetProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetProperties@CMediaSample@@UAGJKPBE@Z
_TEXT	SEGMENT
_pProps$83617 = -8					; size = 4
_pMediaType$ = -4					; size = 4
_this$ = 8						; size = 4
_cbProperties$ = 12					; size = 4
_pbProperties$ = 16					; size = 4
?SetProperties@CMediaSample@@UAGJKPBE@Z PROC		; CMediaSample::SetProperties, COMDAT
; Line 3626
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3629
	mov	DWORD PTR _pMediaType$[ebp], 0
; Line 3631
	cmp	DWORD PTR _cbProperties$[ebp], 4
	jb	$LN30@SetPropert
; Line 3632
	cmp	DWORD PTR _pbProperties$[ebp], 0
	jne	SHORT $LN29@SetPropert
	mov	eax, -2147467261			; 80004003H
	jmp	$LN31@SetPropert
$LN29@SetPropert:
; Line 3634
	mov	eax, DWORD PTR _pbProperties$[ebp]
	mov	DWORD PTR _pProps$83617[ebp], eax
; Line 3637
	mov	ecx, DWORD PTR _pProps$83617[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _cbProperties$[ebp]
	jae	SHORT $LN28@SetPropert
; Line 3638
	mov	eax, DWORD PTR _pProps$83617[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cbProperties$[ebp], ecx
$LN28@SetPropert:
; Line 3642
	cmp	DWORD PTR _cbProperties$[ebp], 48	; 00000030H
	ja	SHORT $LN26@SetPropert
	mov	edx, DWORD PTR _pProps$83617[ebp]
	cmp	DWORD PTR [edx], 48			; 00000030H
	jbe	SHORT $LN27@SetPropert
$LN26@SetPropert:
; Line 3643
	mov	eax, -2147024809			; 80070057H
	jmp	$LN31@SetPropert
$LN27@SetPropert:
; Line 3646
	cmp	DWORD PTR _cbProperties$[ebp], 12	; 0000000cH
	jb	SHORT $LN25@SetPropert
; Line 3649
	mov	eax, DWORD PTR _pProps$83617[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -480				; fffffe20H
	je	SHORT $LN24@SetPropert
; Line 3650
	mov	eax, -2147024809			; 80070057H
	jmp	$LN31@SetPropert
$LN24@SetPropert:
; Line 3657
	mov	edx, DWORD PTR _pProps$83617[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 16					; 00000010H
	je	SHORT $LN25@SetPropert
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 16					; 00000010H
	jne	SHORT $LN25@SetPropert
	cmp	DWORD PTR _cbProperties$[ebp], 32	; 00000020H
	jae	SHORT $LN25@SetPropert
; Line 3658
	mov	eax, -2147024809			; 80070057H
	jmp	$LN31@SetPropert
$LN25@SetPropert:
; Line 3662
	cmp	DWORD PTR _cbProperties$[ebp], 44	; 0000002cH
	jb	SHORT $LN22@SetPropert
; Line 3665
	mov	eax, DWORD PTR _pProps$83617[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN22@SetPropert
	mov	ecx, DWORD PTR _pProps$83617[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	cmp	eax, DWORD PTR [edx+12]
	je	SHORT $LN22@SetPropert
; Line 3666
	mov	eax, -2147024809			; 80070057H
	jmp	$LN31@SetPropert
$LN22@SetPropert:
; Line 3669
	cmp	DWORD PTR _cbProperties$[ebp], 48	; 00000030H
	jb	SHORT $LN20@SetPropert
; Line 3672
	mov	ecx, DWORD PTR _pProps$83617[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN20@SetPropert
	mov	edx, DWORD PTR _pProps$83617[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	cmp	ecx, DWORD PTR [eax+20]
	je	SHORT $LN20@SetPropert
; Line 3673
	mov	eax, -2147024809			; 80070057H
	jmp	$LN31@SetPropert
$LN20@SetPropert:
; Line 3677
	cmp	DWORD PTR _cbProperties$[ebp], 48	; 00000030H
	jb	SHORT $LN18@SetPropert
	cmp	DWORD PTR _cbProperties$[ebp], 16	; 00000010H
	jb	SHORT $LN18@SetPropert
; Line 3680
	mov	edx, DWORD PTR _pProps$83617[ebp]
	mov	eax, DWORD PTR _pProps$83617[ebp]
	mov	ecx, DWORD PTR [edx+44]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN18@SetPropert
; Line 3681
	mov	eax, -2147024809			; 80070057H
	jmp	$LN31@SetPropert
$LN18@SetPropert:
; Line 3685
	cmp	DWORD PTR _cbProperties$[ebp], 40	; 00000028H
	jb	SHORT $LN16@SetPropert
; Line 3688
	mov	edx, DWORD PTR _pProps$83617[ebp]
	mov	eax, DWORD PTR [edx+8]
	and	eax, 8
	je	SHORT $LN16@SetPropert
; Line 3689
	mov	ecx, DWORD PTR _pProps$83617[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN14@SetPropert
	mov	eax, -2147467261			; 80004003H
	jmp	$LN31@SetPropert
$LN14@SetPropert:
; Line 3690
	mov	edx, DWORD PTR _pProps$83617[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	?CreateMediaType@@YGPAU_AMMediaType@@PBU1@@Z ; CreateMediaType
	mov	DWORD PTR _pMediaType$[ebp], eax
; Line 3691
	cmp	DWORD PTR _pMediaType$[ebp], 0
	jne	SHORT $LN16@SetPropert
; Line 3692
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN31@SetPropert
$LN16@SetPropert:
; Line 3698
	cmp	DWORD PTR _cbProperties$[ebp], 36	; 00000024H
	jb	SHORT $LN12@SetPropert
; Line 3699
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pProps$83617[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+64], eax
$LN12@SetPropert:
; Line 3701
	cmp	DWORD PTR _cbProperties$[ebp], 12	; 0000000cH
	jb	SHORT $LN11@SetPropert
; Line 3704
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 32					; 00000020H
	mov	eax, DWORD PTR _pProps$83617[ebp]
	or	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 3705
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pProps$83617[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 3706
	jmp	SHORT $LN10@SetPropert
$LN11@SetPropert:
; Line 3707
	cmp	DWORD PTR _cbProperties$[ebp], 8
	jb	SHORT $LN10@SetPropert
; Line 3708
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pProps$83617[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
$LN10@SetPropert:
; Line 3712
	cmp	DWORD PTR _cbProperties$[ebp], 16	; 00000010H
	jb	SHORT $LN8@SetPropert
; Line 3714
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pProps$83617[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+16], ecx
$LN8@SetPropert:
; Line 3717
	cmp	DWORD PTR _cbProperties$[ebp], 32	; 00000020H
	jb	SHORT $LN7@SetPropert
; Line 3720
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pProps$83617[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+40], ecx
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+44], eax
$LN7@SetPropert:
; Line 3722
	cmp	DWORD PTR _cbProperties$[ebp], 24	; 00000018H
	jb	SHORT $LN6@SetPropert
; Line 3725
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pProps$83617[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+32], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+36], edx
$LN6@SetPropert:
; Line 3728
	cmp	DWORD PTR _cbProperties$[ebp], 40	; 00000028H
	jb	SHORT $LN5@SetPropert
; Line 3730
	mov	eax, DWORD PTR _pProps$83617[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	je	SHORT $LN5@SetPropert
; Line 3731
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN3@SetPropert
; Line 3732
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	?DeleteMediaType@@YGXPAU_AMMediaType@@@Z ; DeleteMediaType
$LN3@SetPropert:
; Line 3734
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pMediaType$[ebp]
	mov	DWORD PTR [edx+60], eax
$LN5@SetPropert:
; Line 3743
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN2@SetPropert
; Line 3744
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	or	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 3745
	jmp	SHORT $LN30@SetPropert
$LN2@SetPropert:
; Line 3746
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, -9					; fffffff7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN30@SetPropert:
; Line 3750
	xor	eax, eax
$LN31@SetPropert:
; Line 3751
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetProperties@CMediaSample@@UAGJKPBE@Z ENDP		; CMediaSample::SetProperties
_TEXT	ENDS
PUBLIC	??1CBaseOutputPin@@UAE@XZ			; CBaseOutputPin::~CBaseOutputPin
PUBLIC	?Initialize@CDynamicOutputPin@@AAEJXZ		; CDynamicOutputPin::Initialize
PUBLIC	??_7CDynamicOutputPin@@6B@			; CDynamicOutputPin::`vftable'
PUBLIC	??_7CDynamicOutputPin@@6BIQualityControl@@@	; CDynamicOutputPin::`vftable'
PUBLIC	??_7CDynamicOutputPin@@6BIPin@@@		; CDynamicOutputPin::`vftable'
PUBLIC	??_7CDynamicOutputPin@@6BCUnknown@@@		; CDynamicOutputPin::`vftable'
PUBLIC	??0IPinFlowControl@@QAE@XZ			; IPinFlowControl::IPinFlowControl
PUBLIC	??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ; CDynamicOutputPin::CDynamicOutputPin
PUBLIC	??_R4CDynamicOutputPin@@6BCUnknown@@@		; CDynamicOutputPin::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDynamicOutputPin@@@8			; CDynamicOutputPin `RTTI Type Descriptor'
PUBLIC	??_R3CDynamicOutputPin@@8			; CDynamicOutputPin::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDynamicOutputPin@@8			; CDynamicOutputPin::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDynamicOutputPin@@8		; CDynamicOutputPin::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBaseOutputPin@@8			; CBaseOutputPin::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBaseOutputPin@@@8			; CBaseOutputPin `RTTI Type Descriptor'
PUBLIC	??_R3CBaseOutputPin@@8				; CBaseOutputPin::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseOutputPin@@8				; CBaseOutputPin::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBasePin@@8			; CBasePin::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBasePin@@@8				; CBasePin `RTTI Type Descriptor'
PUBLIC	??_R3CBasePin@@8				; CBasePin::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBasePin@@8				; CBasePin::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CUnknown@@8			; CUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCUnknown@@@8				; CUnknown `RTTI Type Descriptor'
PUBLIC	??_R3CUnknown@@8				; CUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUnknown@@8				; CUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INonDelegatingUnknown@@8		; INonDelegatingUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUINonDelegatingUnknown@@@8		; INonDelegatingUnknown `RTTI Type Descriptor'
PUBLIC	??_R3INonDelegatingUnknown@@8			; INonDelegatingUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INonDelegatingUnknown@@8			; INonDelegatingUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCBaseObject@@@8				; CBaseObject `RTTI Type Descriptor'
PUBLIC	??_R3CBaseObject@@8				; CBaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseObject@@8				; CBaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@IPin@@8				; IPin::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AUIPin@@@8				; IPin `RTTI Type Descriptor'
PUBLIC	??_R3IPin@@8					; IPin::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IPin@@8					; IPin::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IPin@@8				; IPin::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
PUBLIC	??_R1BE@?0A@EA@IQualityControl@@8		; IQualityControl::`RTTI Base Class Descriptor at (20,-1,0,64)'
PUBLIC	??_R0?AUIQualityControl@@@8			; IQualityControl `RTTI Type Descriptor'
PUBLIC	??_R3IQualityControl@@8				; IQualityControl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IQualityControl@@8				; IQualityControl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IQualityControl@@8		; IQualityControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BE@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (20,-1,0,66)'
PUBLIC	??_R1KI@?0A@EA@IPinFlowControl@@8		; IPinFlowControl::`RTTI Base Class Descriptor at (168,-1,0,64)'
PUBLIC	??_R0?AUIPinFlowControl@@@8			; IPinFlowControl `RTTI Type Descriptor'
PUBLIC	??_R3IPinFlowControl@@8				; IPinFlowControl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IPinFlowControl@@8				; IPinFlowControl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IPinFlowControl@@8		; IPinFlowControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1KI@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (168,-1,0,66)'
PUBLIC	?NonDelegatingQueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z ; CDynamicOutputPin::NonDelegatingQueryInterface
PUBLIC	?Active@CDynamicOutputPin@@UAEJXZ		; CDynamicOutputPin::Active
PUBLIC	?Inactive@CDynamicOutputPin@@UAEJXZ		; CDynamicOutputPin::Inactive
PUBLIC	?CompleteConnect@CDynamicOutputPin@@UAEJPAUIPin@@@Z ; CDynamicOutputPin::CompleteConnect
PUBLIC	?Deliver@CDynamicOutputPin@@UAEJPAUIMediaSample@@@Z ; CDynamicOutputPin::Deliver
PUBLIC	?DeliverEndOfStream@CDynamicOutputPin@@UAEJXZ	; CDynamicOutputPin::DeliverEndOfStream
PUBLIC	?DeliverBeginFlush@CDynamicOutputPin@@UAEJXZ	; CDynamicOutputPin::DeliverBeginFlush
PUBLIC	?DeliverEndFlush@CDynamicOutputPin@@UAEJXZ	; CDynamicOutputPin::DeliverEndFlush
PUBLIC	?DeliverNewSegment@CDynamicOutputPin@@UAEJ_J0N@Z ; CDynamicOutputPin::DeliverNewSegment
PUBLIC	?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ	; CDynamicOutputPin::StartUsingOutputPin
PUBLIC	?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ	; CDynamicOutputPin::StopUsingOutputPin
PUBLIC	?StreamingThreadUsingOutputPin@CDynamicOutputPin@@UAE_NXZ ; CDynamicOutputPin::StreamingThreadUsingOutputPin
PUBLIC	??_R4CDynamicOutputPin@@6BIPin@@@		; CDynamicOutputPin::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z ; CDynamicOutputPin::QueryInterface
PUBLIC	?AddRef@CDynamicOutputPin@@UAGKXZ		; CDynamicOutputPin::AddRef
PUBLIC	?Release@CDynamicOutputPin@@UAGKXZ		; CDynamicOutputPin::Release
PUBLIC	?Disconnect@CDynamicOutputPin@@UAGJXZ		; CDynamicOutputPin::Disconnect
PUBLIC	?QueryInternalConnections@CBasePin@@UAGJPAPAUIPin@@PAK@Z ; CBasePin::QueryInternalConnections
PUBLIC	??_R4CDynamicOutputPin@@6BIQualityControl@@@	; CDynamicOutputPin::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CDynamicOutputPin@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:CDynamicOutputPin::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CDynamicOutputPin@@W3AGKXZ		; [thunk]:CDynamicOutputPin::AddRef`adjustor{4}'
PUBLIC	?Release@CDynamicOutputPin@@W3AGKXZ		; [thunk]:CDynamicOutputPin::Release`adjustor{4}'
PUBLIC	??_R4CDynamicOutputPin@@6B@			; CDynamicOutputPin::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CDynamicOutputPin@@WJI@AGJABU_GUID@@PAPAX@Z ; [thunk]:CDynamicOutputPin::QueryInterface`adjustor{152}'
PUBLIC	?AddRef@CDynamicOutputPin@@WJI@AGKXZ		; [thunk]:CDynamicOutputPin::AddRef`adjustor{152}'
PUBLIC	?Release@CDynamicOutputPin@@WJI@AGKXZ		; [thunk]:CDynamicOutputPin::Release`adjustor{152}'
PUBLIC	?Block@CDynamicOutputPin@@UAGJKPAX@Z		; CDynamicOutputPin::Block
EXTRN	??1CCritSec@@QAE@XZ:PROC			; CCritSec::~CCritSec
EXTRN	??0CCritSec@@QAE@XZ:PROC			; CCritSec::CCritSec
EXTRN	??_ECDynamicOutputPin@@UAEPAXI@Z:PROC		; CDynamicOutputPin::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R4CDynamicOutputPin@@6B@
rdata$r	SEGMENT
??_R4CDynamicOutputPin@@6B@ DD 00H			; CDynamicOutputPin::`RTTI Complete Object Locator'
	DD	0a8H
	DD	00H
	DD	FLAT:??_R0?AVCDynamicOutputPin@@@8
	DD	FLAT:??_R3CDynamicOutputPin@@8
rdata$r	ENDS
;	COMDAT ??_R4CDynamicOutputPin@@6BIQualityControl@@@
rdata$r	SEGMENT
??_R4CDynamicOutputPin@@6BIQualityControl@@@ DD 00H	; CDynamicOutputPin::`RTTI Complete Object Locator'
	DD	014H
	DD	00H
	DD	FLAT:??_R0?AVCDynamicOutputPin@@@8
	DD	FLAT:??_R3CDynamicOutputPin@@8
rdata$r	ENDS
;	COMDAT ??_R4CDynamicOutputPin@@6BIPin@@@
rdata$r	SEGMENT
??_R4CDynamicOutputPin@@6BIPin@@@ DD 00H		; CDynamicOutputPin::`RTTI Complete Object Locator'
	DD	010H
	DD	00H
	DD	FLAT:??_R0?AVCDynamicOutputPin@@@8
	DD	FLAT:??_R3CDynamicOutputPin@@8
rdata$r	ENDS
;	COMDAT ??_R1KI@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1KI@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (168,-1,0,66)'
	DD	00H
	DD	0a8H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IPinFlowControl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IPinFlowControl@@8 DD FLAT:??_R0?AUIPinFlowControl@@@8 ; IPinFlowControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IPinFlowControl@@8
rdata$r	ENDS
;	COMDAT ??_R2IPinFlowControl@@8
rdata$r	SEGMENT
??_R2IPinFlowControl@@8 DD FLAT:??_R1A@?0A@EA@IPinFlowControl@@8 ; IPinFlowControl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IPinFlowControl@@8
rdata$r	SEGMENT
??_R3IPinFlowControl@@8 DD 00H				; IPinFlowControl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IPinFlowControl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIPinFlowControl@@@8
_DATA	SEGMENT
??_R0?AUIPinFlowControl@@@8 DD FLAT:??_7type_info@@6B@	; IPinFlowControl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIPinFlowControl@@', 00H
_DATA	ENDS
;	COMDAT ??_R1KI@?0A@EA@IPinFlowControl@@8
rdata$r	SEGMENT
??_R1KI@?0A@EA@IPinFlowControl@@8 DD FLAT:??_R0?AUIPinFlowControl@@@8 ; IPinFlowControl::`RTTI Base Class Descriptor at (168,-1,0,64)'
	DD	01H
	DD	0a8H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IPinFlowControl@@8
rdata$r	ENDS
;	COMDAT ??_R1BE@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1BE@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (20,-1,0,66)'
	DD	00H
	DD	014H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IQualityControl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IQualityControl@@8 DD FLAT:??_R0?AUIQualityControl@@@8 ; IQualityControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IQualityControl@@8
rdata$r	ENDS
;	COMDAT ??_R2IQualityControl@@8
rdata$r	SEGMENT
??_R2IQualityControl@@8 DD FLAT:??_R1A@?0A@EA@IQualityControl@@8 ; IQualityControl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IQualityControl@@8
rdata$r	SEGMENT
??_R3IQualityControl@@8 DD 00H				; IQualityControl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IQualityControl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIQualityControl@@@8
_DATA	SEGMENT
??_R0?AUIQualityControl@@@8 DD FLAT:??_7type_info@@6B@	; IQualityControl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIQualityControl@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BE@?0A@EA@IQualityControl@@8
rdata$r	SEGMENT
??_R1BE@?0A@EA@IQualityControl@@8 DD FLAT:??_R0?AUIQualityControl@@@8 ; IQualityControl::`RTTI Base Class Descriptor at (20,-1,0,64)'
	DD	01H
	DD	014H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IQualityControl@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1BA@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IPin@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IPin@@8 DD FLAT:??_R0?AUIPin@@@8		; IPin::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IPin@@8
rdata$r	ENDS
;	COMDAT ??_R2IPin@@8
rdata$r	SEGMENT
??_R2IPin@@8 DD	FLAT:??_R1A@?0A@EA@IPin@@8		; IPin::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IPin@@8
rdata$r	SEGMENT
??_R3IPin@@8 DD	00H					; IPin::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IPin@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIPin@@@8
_DATA	SEGMENT
??_R0?AUIPin@@@8 DD FLAT:??_7type_info@@6B@		; IPin `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIPin@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@IPin@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IPin@@8 DD FLAT:??_R0?AUIPin@@@8		; IPin::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	01H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IPin@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseObject@@8
rdata$r	SEGMENT
??_R2CBaseObject@@8 DD FLAT:??_R1A@?0A@EA@CBaseObject@@8 ; CBaseObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseObject@@8
rdata$r	SEGMENT
??_R3CBaseObject@@8 DD 00H				; CBaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseObject@@@8
_DATA	SEGMENT
??_R0?AVCBaseObject@@@8 DD FLAT:??_7type_info@@6B@	; CBaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R13?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R2INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R2INonDelegatingUnknown@@8 DD FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8 ; INonDelegatingUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R3INonDelegatingUnknown@@8 DD 00H			; INonDelegatingUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUINonDelegatingUnknown@@@8
_DATA	SEGMENT
??_R0?AUINonDelegatingUnknown@@@8 DD FLAT:??_7type_info@@6B@ ; INonDelegatingUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUINonDelegatingUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INonDelegatingUnknown@@8 DD FLAT:??_R0?AUINonDelegatingUnknown@@@8 ; INonDelegatingUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2CUnknown@@8
rdata$r	SEGMENT
??_R2CUnknown@@8 DD FLAT:??_R1A@?0A@EA@CUnknown@@8	; CUnknown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CUnknown@@8
rdata$r	SEGMENT
??_R3CUnknown@@8 DD 00H					; CUnknown::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCUnknown@@@8
_DATA	SEGMENT
??_R0?AVCUnknown@@@8 DD FLAT:??_7type_info@@6B@		; CUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUnknown@@8 DD FLAT:??_R0?AVCUnknown@@@8	; CUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2CBasePin@@8
rdata$r	SEGMENT
??_R2CBasePin@@8 DD FLAT:??_R1A@?0A@EA@CBasePin@@8	; CBasePin::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CUnknown@@8
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BA@?0A@EA@IPin@@8
	DD	FLAT:??_R1BA@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@IQualityControl@@8
	DD	FLAT:??_R1BE@?0A@EC@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CBasePin@@8
rdata$r	SEGMENT
??_R3CBasePin@@8 DD 00H					; CBasePin::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2CBasePin@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBasePin@@@8
_DATA	SEGMENT
??_R0?AVCBasePin@@@8 DD FLAT:??_7type_info@@6B@		; CBasePin `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBasePin@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBasePin@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBasePin@@8 DD FLAT:??_R0?AVCBasePin@@@8	; CBasePin::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBasePin@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseOutputPin@@8
rdata$r	SEGMENT
??_R2CBaseOutputPin@@8 DD FLAT:??_R1A@?0A@EA@CBaseOutputPin@@8 ; CBaseOutputPin::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBasePin@@8
	DD	FLAT:??_R1A@?0A@EA@CUnknown@@8
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BA@?0A@EA@IPin@@8
	DD	FLAT:??_R1BA@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@IQualityControl@@8
	DD	FLAT:??_R1BE@?0A@EC@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseOutputPin@@8
rdata$r	SEGMENT
??_R3CBaseOutputPin@@8 DD 00H				; CBaseOutputPin::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2CBaseOutputPin@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseOutputPin@@@8
_DATA	SEGMENT
??_R0?AVCBaseOutputPin@@@8 DD FLAT:??_7type_info@@6B@	; CBaseOutputPin `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseOutputPin@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseOutputPin@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseOutputPin@@8 DD FLAT:??_R0?AVCBaseOutputPin@@@8 ; CBaseOutputPin::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseOutputPin@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDynamicOutputPin@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDynamicOutputPin@@8 DD FLAT:??_R0?AVCDynamicOutputPin@@@8 ; CDynamicOutputPin::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDynamicOutputPin@@8
rdata$r	ENDS
;	COMDAT ??_R2CDynamicOutputPin@@8
rdata$r	SEGMENT
??_R2CDynamicOutputPin@@8 DD FLAT:??_R1A@?0A@EA@CDynamicOutputPin@@8 ; CDynamicOutputPin::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseOutputPin@@8
	DD	FLAT:??_R1A@?0A@EA@CBasePin@@8
	DD	FLAT:??_R1A@?0A@EA@CUnknown@@8
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BA@?0A@EA@IPin@@8
	DD	FLAT:??_R1BA@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@IQualityControl@@8
	DD	FLAT:??_R1BE@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1KI@?0A@EA@IPinFlowControl@@8
	DD	FLAT:??_R1KI@?0A@EC@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CDynamicOutputPin@@8
rdata$r	SEGMENT
??_R3CDynamicOutputPin@@8 DD 00H			; CDynamicOutputPin::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0cH
	DD	FLAT:??_R2CDynamicOutputPin@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDynamicOutputPin@@@8
_DATA	SEGMENT
??_R0?AVCDynamicOutputPin@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicOutputPin `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDynamicOutputPin@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDynamicOutputPin@@6BCUnknown@@@
rdata$r	SEGMENT
??_R4CDynamicOutputPin@@6BCUnknown@@@ DD 00H		; CDynamicOutputPin::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDynamicOutputPin@@@8
	DD	FLAT:??_R3CDynamicOutputPin@@8
rdata$r	ENDS
;	COMDAT ??_7CDynamicOutputPin@@6B@
CONST	SEGMENT
??_7CDynamicOutputPin@@6B@ DD FLAT:??_R4CDynamicOutputPin@@6B@ ; CDynamicOutputPin::`vftable'
	DD	FLAT:?QueryInterface@CDynamicOutputPin@@WJI@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDynamicOutputPin@@WJI@AGKXZ
	DD	FLAT:?Release@CDynamicOutputPin@@WJI@AGKXZ
	DD	FLAT:?Block@CDynamicOutputPin@@UAGJKPAX@Z
CONST	ENDS
;	COMDAT ??_7CDynamicOutputPin@@6BIQualityControl@@@
CONST	SEGMENT
??_7CDynamicOutputPin@@6BIQualityControl@@@ DD FLAT:??_R4CDynamicOutputPin@@6BIQualityControl@@@ ; CDynamicOutputPin::`vftable'
	DD	FLAT:?QueryInterface@CDynamicOutputPin@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDynamicOutputPin@@W3AGKXZ
	DD	FLAT:?Release@CDynamicOutputPin@@W3AGKXZ
	DD	FLAT:?Notify@CBasePin@@UAGJPAUIBaseFilter@@UtagQuality@@@Z
	DD	FLAT:?SetSink@CBasePin@@UAGJPAUIQualityControl@@@Z
CONST	ENDS
;	COMDAT ??_7CDynamicOutputPin@@6BIPin@@@
CONST	SEGMENT
??_7CDynamicOutputPin@@6BIPin@@@ DD FLAT:??_R4CDynamicOutputPin@@6BIPin@@@ ; CDynamicOutputPin::`vftable'
	DD	FLAT:?QueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDynamicOutputPin@@UAGKXZ
	DD	FLAT:?Release@CDynamicOutputPin@@UAGKXZ
	DD	FLAT:?Connect@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
	DD	FLAT:?ReceiveConnection@CBasePin@@UAGJPAUIPin@@PBU_AMMediaType@@@Z
	DD	FLAT:?Disconnect@CDynamicOutputPin@@UAGJXZ
	DD	FLAT:?ConnectedTo@CBasePin@@UAGJPAPAUIPin@@@Z
	DD	FLAT:?ConnectionMediaType@CBasePin@@UAGJPAU_AMMediaType@@@Z
	DD	FLAT:?QueryPinInfo@CBasePin@@UAGJPAU_PinInfo@@@Z
	DD	FLAT:?QueryDirection@CBasePin@@UAGJPAW4_PinDirection@@@Z
	DD	FLAT:?QueryId@CBasePin@@UAGJPAPA_W@Z
	DD	FLAT:?QueryAccept@CBasePin@@UAGJPBU_AMMediaType@@@Z
	DD	FLAT:?EnumMediaTypes@CBasePin@@UAGJPAPAUIEnumMediaTypes@@@Z
	DD	FLAT:?QueryInternalConnections@CBasePin@@UAGJPAPAUIPin@@PAK@Z
	DD	FLAT:?EndOfStream@CBaseOutputPin@@UAGJXZ
	DD	FLAT:?BeginFlush@CBaseOutputPin@@UAGJXZ
	DD	FLAT:?EndFlush@CBaseOutputPin@@UAGJXZ
	DD	FLAT:?NewSegment@CBasePin@@UAGJ_J0N@Z
CONST	ENDS
;	COMDAT ??_7CDynamicOutputPin@@6BCUnknown@@@
CONST	SEGMENT
??_7CDynamicOutputPin@@6BCUnknown@@@ DD FLAT:??_R4CDynamicOutputPin@@6BCUnknown@@@ ; CDynamicOutputPin::`vftable'
	DD	FLAT:?NonDelegatingQueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?NonDelegatingAddRef@CBasePin@@UAGKXZ
	DD	FLAT:?NonDelegatingRelease@CBasePin@@UAGKXZ
	DD	FLAT:??_ECDynamicOutputPin@@UAEPAXI@Z
	DD	FLAT:?GetMediaTypeVersion@CBasePin@@UAEJXZ
	DD	FLAT:?Active@CDynamicOutputPin@@UAEJXZ
	DD	FLAT:?Inactive@CDynamicOutputPin@@UAEJXZ
	DD	FLAT:?Run@CBasePin@@UAEJ_J@Z
	DD	FLAT:__purecall
	DD	FLAT:?SetMediaType@CBasePin@@UAEJPBVCMediaType@@@Z
	DD	FLAT:?CheckConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z
	DD	FLAT:?BreakConnect@CBaseOutputPin@@UAEJXZ
	DD	FLAT:?CompleteConnect@CDynamicOutputPin@@UAEJPAUIPin@@@Z
	DD	FLAT:?GetMediaType@CBasePin@@UAEJHPAVCMediaType@@@Z
	DD	FLAT:?DecideAllocator@CBaseOutputPin@@UAEJPAUIMemInputPin@@PAPAUIMemAllocator@@@Z
	DD	FLAT:__purecall
	DD	FLAT:?GetDeliveryBuffer@CBaseOutputPin@@UAEJPAPAUIMediaSample@@PA_J1K@Z
	DD	FLAT:?Deliver@CDynamicOutputPin@@UAEJPAUIMediaSample@@@Z
	DD	FLAT:?InitAllocator@CBaseOutputPin@@UAEJPAPAUIMemAllocator@@@Z
	DD	FLAT:?DeliverEndOfStream@CDynamicOutputPin@@UAEJXZ
	DD	FLAT:?DeliverBeginFlush@CDynamicOutputPin@@UAEJXZ
	DD	FLAT:?DeliverEndFlush@CDynamicOutputPin@@UAEJXZ
	DD	FLAT:?DeliverNewSegment@CDynamicOutputPin@@UAEJ_J0N@Z
	DD	FLAT:?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ
	DD	FLAT:?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ
	DD	FLAT:?StreamingThreadUsingOutputPin@CDynamicOutputPin@@UAE_NXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$1
__ehfuncinfo$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pObjectName$ = 8					; size = 4
_pFilter$ = 12						; size = 4
_pLock$ = 16						; size = 4
_phr$ = 20						; size = 4
_pName$ = 24						; size = 4
??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z PROC ; CDynamicOutputPin::CDynamicOutputPin, COMDAT
; _this$ = ecx
; Line 3790
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _phr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLock$[ebp]
	push	edx
	mov	eax, DWORD PTR _pFilter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObjectName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ; CBaseOutputPin::CBaseOutputPin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??0IPinFlowControl@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CDynamicOutputPin@@6BCUnknown@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], OFFSET ??_7CDynamicOutputPin@@6BIPin@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], OFFSET ??_7CDynamicOutputPin@@6BIQualityControl@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+168], OFFSET ??_7CDynamicOutputPin@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+208], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+220], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+224], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+236], 0
; Line 3791
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@CDynamicOutputPin@@AAEJXZ	; CDynamicOutputPin::Initialize
	mov	DWORD PTR _hr$[ebp], eax
; Line 3792
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CDynamicOu
; Line 3793
	mov	edx, DWORD PTR _phr$[ebp]
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CDynamicOu:
; Line 3796
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseOutputPin@@UAE@XZ
__unwindfunclet$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDynamicOutputPin@@QAE@PA_WPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ENDP ; CDynamicOutputPin::CDynamicOutputPin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInternalConnections@CBasePin@@UAGJPAPAUIPin@@PAK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_apPin$ = 12						; size = 4
_nPin$ = 16						; size = 4
?QueryInternalConnections@CBasePin@@UAGJPAPAUIPin@@PAK@Z PROC ; CBasePin::QueryInternalConnections, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 472
	push	ebp
	mov	ebp, esp
	mov	eax, -2147467263			; 80004001H
	pop	ebp
	ret	12					; 0000000cH
?QueryInternalConnections@CBasePin@@UAGJPAPAUIPin@@PAK@Z ENDP ; CBasePin::QueryInternalConnections
_TEXT	ENDS
PUBLIC	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ		; CUnknown::GetOwner
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z PROC ; CDynamicOutputPin::QueryInterface, COMDAT
; Line 972
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z ENDP ; CDynamicOutputPin::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ PROC		; CUnknown::GetOwner, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\combase.h
; Line 224
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 226
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ ENDP		; CUnknown::GetOwner
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDynamicOutputPin@@UAGKXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CDynamicOutputPin@@UAGKXZ PROC			; CDynamicOutputPin::AddRef, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 972
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CDynamicOutputPin@@UAGKXZ ENDP			; CDynamicOutputPin::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CDynamicOutputPin@@UAGKXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CDynamicOutputPin@@UAGKXZ PROC			; CDynamicOutputPin::Release, COMDAT
; Line 972
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CDynamicOutputPin@@UAGKXZ ENDP			; CDynamicOutputPin::Release
_TEXT	ENDS
PUBLIC	??_C@_1EA@BACEJBIB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAi?$AAn?$AAg?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAU?$AAs?$AAi?$AAn?$AAg?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAP?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ ; `string'
;	COMDAT ??_C@_1EA@BACEJBIB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAi?$AAn?$AAg?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAU?$AAs?$AAi?$AAn?$AAg?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAP?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@BACEJBIB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAi?$AAn?$AAg?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAU?$AAs?$AAi?$AAn?$AAg?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAP?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'S'
	DB	00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, 'U', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'P'
	DB	00H, 'i', 00H, 'n', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
CONST	SEGMENT
??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'D', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'P', 00H, 'o', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'e', 00H
	DB	's', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Deliver@CDynamicOutputPin@@UAEJPAUIMediaSample@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSample$ = 8						; size = 4
?Deliver@CDynamicOutputPin@@UAEJPAUIMediaSample@@@Z PROC ; CDynamicOutputPin::Deliver, COMDAT
; _this$ = ecx
; Line 1124
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1127
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@Deliver@2
	push	1127					; 00000467H
	push	OFFSET ??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1EA@BACEJBIB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAi?$AAn?$AAg?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAU?$AAs?$AAi?$AAn?$AAg?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAP?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Deliver@2:
; Line 1129
	mov	edx, DWORD PTR _pSample$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Deliver@CBaseOutputPin@@UAEJPAUIMediaSample@@@Z ; CBaseOutputPin::Deliver
; Line 1130
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Deliver@CDynamicOutputPin@@UAEJPAUIMediaSample@@@Z ENDP ; CDynamicOutputPin::Deliver
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeliverEndOfStream@CDynamicOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeliverEndOfStream@CDynamicOutputPin@@UAEJXZ PROC	; CDynamicOutputPin::DeliverEndOfStream, COMDAT
; _this$ = ecx
; Line 1133
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1136
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@DeliverEnd@3
	push	1136					; 00000470H
	push	OFFSET ??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1EA@BACEJBIB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAi?$AAn?$AAg?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAU?$AAs?$AAi?$AAn?$AAg?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAP?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DeliverEnd@3:
; Line 1138
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeliverEndOfStream@CBaseOutputPin@@UAEJXZ ; CBaseOutputPin::DeliverEndOfStream
; Line 1139
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeliverEndOfStream@CDynamicOutputPin@@UAEJXZ ENDP	; CDynamicOutputPin::DeliverEndOfStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeliverNewSegment@CDynamicOutputPin@@UAEJ_J0N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tStart$ = 8						; size = 8
_tStop$ = 16						; size = 8
_dRate$ = 24						; size = 8
?DeliverNewSegment@CDynamicOutputPin@@UAEJ_J0N@Z PROC	; CDynamicOutputPin::DeliverNewSegment, COMDAT
; _this$ = ecx
; Line 1142
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1145
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@DeliverNew@2
	push	1145					; 00000479H
	push	OFFSET ??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1EA@BACEJBIB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAi?$AAn?$AAg?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAU?$AAs?$AAi?$AAn?$AAg?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAP?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DeliverNew@2:
; Line 1147
	sub	esp, 8
	fld	QWORD PTR _dRate$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _tStop$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _tStop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _tStart$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeliverNewSegment@CBaseOutputPin@@UAEJ_J0N@Z ; CBaseOutputPin::DeliverNewSegment
; Line 1148
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?DeliverNewSegment@CDynamicOutputPin@@UAEJ_J0N@Z ENDP	; CDynamicOutputPin::DeliverNewSegment
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CBaseOutputPin@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseOutputPin@@UAE@XZ PROC				; CBaseOutputPin::~CBaseOutputPin, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBasePin@@UAE@XZ			; CBasePin::~CBasePin
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseOutputPin@@UAE@XZ ENDP				; CBaseOutputPin::~CBaseOutputPin
_TEXT	ENDS
PUBLIC	??1CDynamicOutputPin@@UAE@XZ			; CDynamicOutputPin::~CDynamicOutputPin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDynamicOutputPin@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDynamicOutputPin@@UAEPAXI@Z PROC			; CDynamicOutputPin::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDynamicOutputPin@@UAE@XZ		; CDynamicOutputPin::~CDynamicOutputPin
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDynamicOutputPin@@UAEPAXI@Z ENDP			; CDynamicOutputPin::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IPinFlowControl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IPinFlowControl@@QAE@XZ PROC				; IPinFlowControl::IPinFlowControl, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IPinFlowControl@@QAE@XZ ENDP				; IPinFlowControl::IPinFlowControl
_TEXT	ENDS
PUBLIC	??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ; CDynamicOutputPin::CDynamicOutputPin
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$1
__ehfuncinfo$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pObjectName$ = 8					; size = 4
_pFilter$ = 12						; size = 4
_pLock$ = 16						; size = 4
_phr$ = 20						; size = 4
_pName$ = 24						; size = 4
??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z PROC ; CDynamicOutputPin::CDynamicOutputPin, COMDAT
; _this$ = ecx
; Line 3814
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _phr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLock$[ebp]
	push	edx
	mov	eax, DWORD PTR _pFilter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pObjectName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ; CBaseOutputPin::CBaseOutputPin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??0IPinFlowControl@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CDynamicOutputPin@@6BCUnknown@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], OFFSET ??_7CDynamicOutputPin@@6BIPin@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], OFFSET ??_7CDynamicOutputPin@@6BIQualityControl@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+168], OFFSET ??_7CDynamicOutputPin@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+208], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+220], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+224], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+236], 0
; Line 3815
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@CDynamicOutputPin@@AAEJXZ	; CDynamicOutputPin::Initialize
	mov	DWORD PTR _hr$[ebp], eax
; Line 3816
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CDynamicOu@2
; Line 3817
	mov	edx, DWORD PTR _phr$[ebp]
	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CDynamicOu@2:
; Line 3820
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseOutputPin@@UAE@XZ
__unwindfunclet$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDynamicOutputPin@@QAE@PADPAVCBaseFilter@@PAVCCritSec@@PAJPB_W@Z ENDP ; CDynamicOutputPin::CDynamicOutputPin
EXTRN	__imp__CloseHandle@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDynamicOutputPin@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDynamicOutputPin@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDynamicOutputPin@@UAE@XZ$1
__ehfuncinfo$??1CDynamicOutputPin@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CDynamicOutputPin@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDynamicOutputPin@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDynamicOutputPin@@UAE@XZ PROC			; CDynamicOutputPin::~CDynamicOutputPin, COMDAT
; _this$ = ecx
; Line 3824
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDynamicOutputPin@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDynamicOutputPin@@6BCUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET ??_7CDynamicOutputPin@@6BIPin@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], OFFSET ??_7CDynamicOutputPin@@6BIQualityControl@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+168], OFFSET ??_7CDynamicOutputPin@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 3825
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+208], 0
	je	SHORT $LN4@CDynamicOu@3
; Line 3828
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@CDynamicOu@3
	push	3828					; 00000ef4H
	push	OFFSET $SG83745
	push	OFFSET $SG83746
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CDynamicOu@3:
; Line 3831
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	je	SHORT $LN5@CDynamicOu@3
; Line 3834
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@CDynamicOu@3
	push	3834					; 00000efaH
	push	OFFSET $SG83749
	push	OFFSET $SG83750
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@CDynamicOu@3:
; Line 3836
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseOutputPin@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDynamicOutputPin@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseOutputPin@@UAE@XZ
__unwindfunclet$??1CDynamicOutputPin@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??1CDynamicOutputPin@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDynamicOutputPin@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDynamicOutputPin@@UAE@XZ ENDP			; CDynamicOutputPin::~CDynamicOutputPin
PUBLIC	?SetReconnectWhenActive@CBasePin@@QAEX_N@Z	; CBasePin::SetReconnectWhenActive
EXTRN	?AmGetLastErrorToHResult@@YGJXZ:PROC		; AmGetLastErrorToHResult
EXTRN	__imp__CreateEventW@16:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Initialize@CDynamicOutputPin@@AAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Initialize@CDynamicOutputPin@@AAEJXZ PROC		; CDynamicOutputPin::Initialize, COMDAT
; _this$ = ecx
; Line 3839
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 3843
	mov	esi, esp
	push	0
	push	1
	push	1
	push	0
	call	DWORD PTR __imp__CreateEventW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+208], eax
; Line 3846
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+208], 0
	jne	SHORT $LN1@Initialize
; Line 3847
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	jmp	SHORT $LN2@Initialize
$LN1@Initialize:
; Line 3851
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetReconnectWhenActive@CBasePin@@QAEX_N@Z ; CBasePin::SetReconnectWhenActive
; Line 3853
	xor	eax, eax
$LN2@Initialize:
; Line 3854
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Initialize@CDynamicOutputPin@@AAEJXZ ENDP		; CDynamicOutputPin::Initialize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetReconnectWhenActive@CBasePin@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bCanReconnect$ = 8					; size = 1
?SetReconnectWhenActive@CBasePin@@QAEX_N@Z PROC		; CBasePin::SetReconnectWhenActive, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 555
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 556
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bCanReconnect$[ebp]
	mov	BYTE PTR [eax+41], cl
; Line 557
	mov	esp, ebp
	pop	ebp
	ret	4
?SetReconnectWhenActive@CBasePin@@QAEX_N@Z ENDP		; CBasePin::SetReconnectWhenActive
_TEXT	ENDS
EXTRN	_IID_IPinFlowControl:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingQueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv77 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z PROC ; CDynamicOutputPin::NonDelegatingQueryInterface, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 3857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3858
	push	OFFSET _IID_IPinFlowControl
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@NonDelegat@8
; Line 3859
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN5@NonDelegat@8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN6@NonDelegat@8
$LN5@NonDelegat@8:
	mov	DWORD PTR tv77[ebp], 0
$LN6@NonDelegat@8:
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN3@NonDelegat@8
; Line 3860
	jmp	SHORT $LN3@NonDelegat@8
$LN2@NonDelegat@8:
; Line 3861
	mov	ecx, DWORD PTR _ppv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?NonDelegatingQueryInterface@CBasePin@@UAGJABU_GUID@@PAPAX@Z ; CBasePin::NonDelegatingQueryInterface
$LN3@NonDelegat@8:
; Line 3863
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z ENDP ; CDynamicOutputPin::NonDelegatingQueryInterface
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Disconnect@CDynamicOutputPin@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Disconnect@CDynamicOutputPin@@UAGJXZ$0
__ehfuncinfo$?Disconnect@CDynamicOutputPin@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Disconnect@CDynamicOutputPin@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Disconnect@CDynamicOutputPin@@UAGJXZ
_TEXT	SEGMENT
$T86501 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?Disconnect@CDynamicOutputPin@@UAGJXZ PROC		; CDynamicOutputPin::Disconnect, COMDAT
; Line 3866
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Disconnect@CDynamicOutputPin@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 3867
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3868
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 16					; 00000010H
	push	edx
	call	?DisconnectInternal@CBasePin@@IAGJXZ	; CBasePin::DisconnectInternal
	mov	DWORD PTR $T86501[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86501[ebp]
; Line 3869
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Disconnect@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN7@Disconnect@3:
	DD	1
	DD	$LN6@Disconnect@3
$LN6@Disconnect@3:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Disconnect@3
$LN4@Disconnect@3:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Disconnect@CDynamicOutputPin@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Disconnect@CDynamicOutputPin@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Disconnect@CDynamicOutputPin@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Disconnect@CDynamicOutputPin@@UAGJXZ ENDP		; CDynamicOutputPin::Disconnect
PUBLIC	?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ	; CDynamicOutputPin::UnblockOutputPin
PUBLIC	?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z ; CDynamicOutputPin::AsynchronousBlockOutputPin
PUBLIC	?SynchronousBlockOutputPin@CDynamicOutputPin@@IAEJXZ ; CDynamicOutputPin::SynchronousBlockOutputPin
PUBLIC	?AssertValid@CDynamicOutputPin@@AAEXXZ		; CDynamicOutputPin::AssertValid
EXTRN	__imp__ResetEvent@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Block@CDynamicOutputPin@@UAGJKPAX@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_VALID_FLAGS$ = -4					; size = 4
_this$ = 8						; size = 4
_dwBlockFlags$ = 12					; size = 4
_hEvent$ = 16						; size = 4
?Block@CDynamicOutputPin@@UAGJKPAX@Z PROC		; CDynamicOutputPin::Block, COMDAT
; Line 3872
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 3873
	mov	DWORD PTR _VALID_FLAGS$[ebp], 1
; Line 3876
	mov	eax, DWORD PTR _dwBlockFlags$[ebp]
	and	eax, -2					; fffffffeH
	je	SHORT $LN10@Block
; Line 3877
	mov	eax, -2147024809			; 80070057H
	jmp	$LN11@Block
$LN10@Block:
; Line 3881
	mov	ecx, DWORD PTR _dwBlockFlags$[ebp]
	and	ecx, 1
	je	SHORT $LN9@Block
	cmp	DWORD PTR _hEvent$[ebp], 0
	je	SHORT $LN9@Block
; Line 3882
	mov	esi, esp
	mov	edx, DWORD PTR _hEvent$[ebp]
	push	edx
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN9@Block
; Line 3883
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	jmp	$LN11@Block
$LN9@Block:
; Line 3888
	cmp	DWORD PTR _dwBlockFlags$[ebp], 0
	jne	SHORT $LN7@Block
; Line 3892
	cmp	DWORD PTR _hEvent$[ebp], 0
	je	SHORT $LN7@Block
; Line 3893
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN11@Block
$LN7@Block:
; Line 3898
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 168				; 000000a8H
	call	?AssertValid@CDynamicOutputPin@@AAEXXZ	; CDynamicOutputPin::AssertValid
; Line 3903
	mov	eax, DWORD PTR _dwBlockFlags$[ebp]
	and	eax, 1
	je	SHORT $LN5@Block
; Line 3906
	cmp	DWORD PTR _hEvent$[ebp], 0
	jne	SHORT $LN4@Block
; Line 3907
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 168				; 000000a8H
	call	?SynchronousBlockOutputPin@CDynamicOutputPin@@IAEJXZ ; CDynamicOutputPin::SynchronousBlockOutputPin
	mov	DWORD PTR _hr$[ebp], eax
; Line 3908
	jmp	SHORT $LN3@Block
$LN4@Block:
; Line 3909
	mov	ecx, DWORD PTR _hEvent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 168				; 000000a8H
	call	?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z ; CDynamicOutputPin::AsynchronousBlockOutputPin
	mov	DWORD PTR _hr$[ebp], eax
$LN3@Block:
; Line 3911
	jmp	SHORT $LN2@Block
$LN5@Block:
; Line 3912
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 168				; 000000a8H
	call	?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ ; CDynamicOutputPin::UnblockOutputPin
	mov	DWORD PTR _hr$[ebp], eax
$LN2@Block:
; Line 3916
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 168				; 000000a8H
	call	?AssertValid@CDynamicOutputPin@@AAEXXZ	; CDynamicOutputPin::AssertValid
; Line 3919
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Block
; Line 3920
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN11@Block
$LN1@Block:
; Line 3923
	xor	eax, eax
$LN11@Block:
; Line 3924
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Block@CDynamicOutputPin@@UAGJKPAX@Z ENDP		; CDynamicOutputPin::Block
_TEXT	ENDS
PUBLIC	?WaitEvent@CDynamicOutputPin@@KGJPAX@Z		; CDynamicOutputPin::WaitEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SynchronousBlockOutputPin@CDynamicOutputPin@@IAEJXZ
_TEXT	SEGMENT
_hr$ = -12						; size = 4
_hNotifyCallerPinBlockedEvent$ = -8			; size = 4
_this$ = -4						; size = 4
?SynchronousBlockOutputPin@CDynamicOutputPin@@IAEJXZ PROC ; CDynamicOutputPin::SynchronousBlockOutputPin, COMDAT
; _this$ = ecx
; Line 3927
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 3931
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hNotifyCallerPinBlockedEvent$[ebp], eax
; Line 3934
	cmp	DWORD PTR _hNotifyCallerPinBlockedEvent$[ebp], 0
	jne	SHORT $LN5@Synchronou
; Line 3935
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	jmp	$LN6@Synchronou
$LN5@Synchronou:
; Line 3938
	mov	eax, DWORD PTR _hNotifyCallerPinBlockedEvent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z ; CDynamicOutputPin::AsynchronousBlockOutputPin
	mov	DWORD PTR _hr$[ebp], eax
; Line 3939
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Synchronou
; Line 3942
	mov	esi, esp
	mov	ecx, DWORD PTR _hNotifyCallerPinBlockedEvent$[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@Synchronou
	push	3942					; 00000f66H
	push	OFFSET $SG83802
	push	OFFSET $SG83803
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@Synchronou:
; Line 3944
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@Synchronou
$LN4@Synchronou:
; Line 3947
	mov	edx, DWORD PTR _hNotifyCallerPinBlockedEvent$[ebp]
	push	edx
	call	?WaitEvent@CDynamicOutputPin@@KGJPAX@Z	; CDynamicOutputPin::WaitEvent
	mov	DWORD PTR _hr$[ebp], eax
; Line 3951
	mov	esi, esp
	mov	eax, DWORD PTR _hNotifyCallerPinBlockedEvent$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@Synchronou
	push	3951					; 00000f6fH
	push	OFFSET $SG83805
	push	OFFSET $SG83806
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Synchronou:
; Line 3953
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Synchronou
; Line 3954
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@Synchronou
$LN1@Synchronou:
; Line 3957
	xor	eax, eax
$LN6@Synchronou:
; Line 3958
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SynchronousBlockOutputPin@CDynamicOutputPin@@IAEJXZ ENDP ; CDynamicOutputPin::SynchronousBlockOutputPin
_TEXT	ENDS
PUBLIC	?BlockOutputPin@CDynamicOutputPin@@IAEXXZ	; CDynamicOutputPin::BlockOutputPin
EXTRN	__imp__DuplicateHandle@28:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z$0
__ehfuncinfo$?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z
_TEXT	SEGMENT
$T86521 = -48						; size = 4
$T86520 = -44						; size = 4
$T86519 = -40						; size = 4
$T86518 = -36						; size = 4
_fSuccess$ = -32					; size = 4
_alBlockStateLock$ = -24				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hNotifyCallerPinBlockedEvent$ = 8			; size = 4
?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z PROC ; CDynamicOutputPin::AsynchronousBlockOutputPin, COMDAT
; _this$ = ecx
; Line 3961
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 3965
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3967
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+216], 0
	je	SHORT $LN5@Asynchrono
; Line 3968
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+220], eax
	jne	SHORT $LN4@Asynchrono
; Line 3969
	mov	DWORD PTR $T86518[ebp], -2147220845	; 80040293H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86518[ebp]
	jmp	$LN6@Asynchrono
; Line 3970
	jmp	SHORT $LN5@Asynchrono
$LN4@Asynchrono:
; Line 3971
	mov	DWORD PTR $T86519[ebp], -2147220844	; 80040294H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86519[ebp]
	jmp	$LN6@Asynchrono
$LN5@Asynchrono:
; Line 3981
	mov	esi, esp
	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 212				; 000000d4H
	push	eax
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentProcess@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _hNotifyCallerPinBlockedEvent$[ebp]
	push	ecx
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentProcess@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__DuplicateHandle@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fSuccess$[ebp], eax
; Line 3982
	cmp	DWORD PTR _fSuccess$[ebp], 0
	jne	SHORT $LN2@Asynchrono
; Line 3983
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	mov	DWORD PTR $T86520[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86520[ebp]
	jmp	SHORT $LN6@Asynchrono
$LN2@Asynchrono:
; Line 3986
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 1
; Line 3987
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], eax
; Line 3994
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+100]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Asynchrono
; Line 3997
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BlockOutputPin@CDynamicOutputPin@@IAEXXZ ; CDynamicOutputPin::BlockOutputPin
$LN1@Asynchrono:
; Line 4000
	mov	DWORD PTR $T86521[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86521[ebp]
$LN6@Asynchrono:
; Line 4001
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Asynchrono
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN12@Asynchrono:
	DD	1
	DD	$LN11@Asynchrono
$LN11@Asynchrono:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@Asynchrono
$LN9@Asynchrono:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z$0:
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AsynchronousBlockOutputPin@CDynamicOutputPin@@IAEJPAX@Z ENDP ; CDynamicOutputPin::AsynchronousBlockOutputPin
EXTRN	__imp__SetEvent@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BlockOutputPin@CDynamicOutputPin@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BlockOutputPin@CDynamicOutputPin@@IAEXXZ PROC		; CDynamicOutputPin::BlockOutputPin, COMDAT
; _this$ = ecx
; Line 4004
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4007
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	call	?CritCheckIn@@YGHPAVCCritSec@@@Z	; CritCheckIn
	test	eax, eax
	jne	SHORT $LN5@BlockOutpu
	push	4007					; 00000fa7H
	push	OFFSET $SG83833
	push	OFFSET $SG83834
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@BlockOutpu:
; Line 4011
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@BlockOutpu
	push	4011					; 00000fabH
	push	OFFSET $SG83836
	push	OFFSET $SG83837
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@BlockOutpu:
; Line 4015
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	push	eax
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@BlockOutpu
	push	4015					; 00000fafH
	push	OFFSET $SG83839
	push	OFFSET $SG83840
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@BlockOutpu:
; Line 4019
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	push	edx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@BlockOutpu
	push	4019					; 00000fb3H
	push	OFFSET $SG83842
	push	OFFSET $SG83843
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@BlockOutpu:
; Line 4020
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@BlockOutpu
	push	4020					; 00000fb4H
	push	OFFSET $SG83845
	push	OFFSET $SG83846
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@BlockOutpu:
; Line 4022
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 2
; Line 4023
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+212], 0
; Line 4024
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BlockOutputPin@CDynamicOutputPin@@IAEXXZ ENDP		; CDynamicOutputPin::BlockOutputPin
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ$0
__ehfuncinfo$?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ
_TEXT	SEGMENT
$T86537 = -36						; size = 4
$T86536 = -32						; size = 4
_alBlockStateLock$ = -24				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ PROC	; CDynamicOutputPin::UnblockOutputPin, COMDAT
; _this$ = ecx
; Line 4027
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4031
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4033
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+216], 0
	jne	SHORT $LN5@UnblockOut@2
; Line 4034
	mov	DWORD PTR $T86536[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86536[ebp]
	jmp	$LN6@UnblockOut@2
$LN5@UnblockOut@2:
; Line 4039
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@UnblockOut@2
	push	4039					; 00000fc7H
	push	OFFSET $SG83856
	push	OFFSET $SG83857
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@UnblockOut@2:
; Line 4042
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	je	SHORT $LN3@UnblockOut@2
; Line 4045
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@UnblockOut@2
	push	4045					; 00000fcdH
	push	OFFSET $SG83860
	push	OFFSET $SG83861
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@UnblockOut@2:
; Line 4046
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@UnblockOut@2
	push	4046					; 00000fceH
	push	OFFSET $SG83863
	push	OFFSET $SG83864
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@UnblockOut@2:
; Line 4049
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+216], 0
; Line 4050
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], 0
; Line 4051
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+212], 0
; Line 4053
	mov	DWORD PTR $T86537[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86537[ebp]
$LN6@UnblockOut@2:
; Line 4054
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@UnblockOut@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@UnblockOut@2:
	DD	1
	DD	$LN11@UnblockOut@2
$LN11@UnblockOut@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@UnblockOut@2
$LN9@UnblockOut@2:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ$0:
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?UnblockOutputPin@CDynamicOutputPin@@IAEJXZ ENDP	; CDynamicOutputPin::UnblockOutputPin
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	?CritCheckOut@@YGHPAVCCritSec@@@Z:PROC		; CritCheckOut
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ$0
__ehfuncinfo$?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ
_TEXT	SEGMENT
tv130 = -80						; size = 4
$T86553 = -76						; size = 4
$T86552 = -72						; size = 4
$T86551 = -68						; size = 4
$T86550 = -64						; size = 4
_dwReturnValue$83888 = -60				; size = 4
_dwNumWaitEvents$83886 = -56				; size = 4
_ahWaitEvents$83885 = -48				; size = 8
_STOP$83883 = -36					; size = 4
_UNBLOCK$83881 = -32					; size = 4
_alBlockStateLock$ = -24				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ PROC	; CDynamicOutputPin::StartUsingOutputPin, COMDAT
; _this$ = ecx
; Line 4057
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4060
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	call	?CritCheckOut@@YGHPAVCCritSec@@@Z	; CritCheckOut
	test	eax, eax
	jne	SHORT $LN10@StartUsing
	push	4060					; 00000fdcH
	push	OFFSET $SG83872
	push	OFFSET $SG83873
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN10@StartUsing:
; Line 4062
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	push	ecx
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4065
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssertValid@CDynamicOutputPin@@AAEXXZ	; CDynamicOutputPin::AssertValid
$LN9@StartUsing:
; Line 4069
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+216], 2
	jne	$LN8@StartUsing
; Line 4070
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
; Line 4074
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	call	?CritCheckOut@@YGHPAVCCritSec@@@Z	; CritCheckOut
	test	eax, eax
	jne	SHORT $LN7@StartUsing
	push	4074					; 00000feaH
	push	OFFSET $SG83879
	push	OFFSET $SG83880
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@StartUsing:
; Line 4080
	mov	DWORD PTR _UNBLOCK$83881[ebp], 0
; Line 4081
	mov	DWORD PTR _STOP$83883[ebp], 1
; Line 4083
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	mov	DWORD PTR _ahWaitEvents$83885[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _ahWaitEvents$83885[ebp+4], ecx
; Line 4084
	mov	DWORD PTR _dwNumWaitEvents$83886[ebp], 2
; Line 4086
	mov	esi, esp
	push	-1
	push	0
	lea	edx, DWORD PTR _ahWaitEvents$83885[ebp]
	push	edx
	mov	eax, DWORD PTR _dwNumWaitEvents$83886[ebp]
	push	eax
	call	DWORD PTR __imp__WaitForMultipleObjects@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwReturnValue$83888[ebp], eax
; Line 4088
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 4091
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssertValid@CDynamicOutputPin@@AAEXXZ	; CDynamicOutputPin::AssertValid
; Line 4094
	mov	ecx, DWORD PTR _dwReturnValue$83888[ebp]
	mov	DWORD PTR tv130[ebp], ecx
	cmp	DWORD PTR tv130[ebp], 0
	je	SHORT $LN4@StartUsing
	cmp	DWORD PTR tv130[ebp], 1
	je	SHORT $LN3@StartUsing
	cmp	DWORD PTR tv130[ebp], -1
	je	SHORT $LN2@StartUsing
	jmp	SHORT $LN1@StartUsing
$LN4@StartUsing:
; Line 4096
	jmp	SHORT $LN5@StartUsing
$LN3@StartUsing:
; Line 4099
	mov	DWORD PTR $T86550[ebp], -2147220957	; 80040223H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86550[ebp]
	jmp	$LN11@StartUsing
$LN2@StartUsing:
; Line 4102
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	mov	DWORD PTR $T86551[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86551[ebp]
	jmp	SHORT $LN11@StartUsing
$LN1@StartUsing:
; Line 4105
	push	4105					; 00001009H
	push	OFFSET $SG83901
	push	OFFSET $SG83902
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
; Line 4106
	mov	DWORD PTR $T86552[ebp], -2147418113	; 8000ffffH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86552[ebp]
	jmp	SHORT $LN11@StartUsing
$LN5@StartUsing:
; Line 4108
	jmp	$LN9@StartUsing
$LN8@StartUsing:
; Line 4110
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+224], eax
; Line 4113
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssertValid@CDynamicOutputPin@@AAEXXZ	; CDynamicOutputPin::AssertValid
; Line 4116
	mov	DWORD PTR $T86553[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86553[ebp]
$LN11@StartUsing:
; Line 4117
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@StartUsing
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@StartUsing:
	DD	2
	DD	$LN17@StartUsing
$LN17@StartUsing:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@StartUsing
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN15@StartUsing
$LN15@StartUsing:
	DB	97					; 00000061H
	DB	104					; 00000068H
	DB	87					; 00000057H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN14@StartUsing:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ$0:
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?StartUsingOutputPin@CDynamicOutputPin@@UAEJXZ ENDP	; CDynamicOutputPin::StartUsingOutputPin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ$0
__ehfuncinfo$?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ
_TEXT	SEGMENT
_alBlockStateLock$ = -24				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ PROC	; CDynamicOutputPin::StopUsingOutputPin, COMDAT
; _this$ = ecx
; Line 4120
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4121
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4124
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssertValid@CDynamicOutputPin@@AAEXXZ	; CDynamicOutputPin::AssertValid
; Line 4127
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+224], edx
; Line 4129
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	jne	SHORT $LN1@StopUsingO
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+216], 0
	je	SHORT $LN1@StopUsingO
; Line 4130
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BlockOutputPin@CDynamicOutputPin@@IAEXXZ ; CDynamicOutputPin::BlockOutputPin
$LN1@StopUsingO:
; Line 4134
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssertValid@CDynamicOutputPin@@AAEXXZ	; CDynamicOutputPin::AssertValid
; Line 4136
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@StopUsingO
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@StopUsingO:
	DD	1
	DD	$LN7@StopUsingO
$LN7@StopUsingO:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@StopUsingO
$LN5@StopUsingO:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ$0:
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?StopUsingOutputPin@CDynamicOutputPin@@UAEXXZ ENDP	; CDynamicOutputPin::StopUsingOutputPin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?StreamingThreadUsingOutputPin@CDynamicOutputPin@@UAE_NXZ
_TEXT	SEGMENT
$T86579 = -17						; size = 1
_alBlockStateLock$ = -12				; size = 4
_this$ = -4						; size = 4
?StreamingThreadUsingOutputPin@CDynamicOutputPin@@UAE_NXZ PROC ; CDynamicOutputPin::StreamingThreadUsingOutputPin, COMDAT
; _this$ = ecx
; Line 4139
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4140
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
; Line 4142
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	cmp	edx, DWORD PTR [ecx+224]
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR $T86579[ebp], al
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	al, BYTE PTR $T86579[ebp]
; Line 4143
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@StreamingT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@StreamingT:
	DD	1
	DD	$LN5@StreamingT
$LN5@StreamingT:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@StreamingT
$LN4@StreamingT:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?StreamingThreadUsingOutputPin@CDynamicOutputPin@@UAE_NXZ ENDP ; CDynamicOutputPin::StreamingThreadUsingOutputPin
_TEXT	ENDS
PUBLIC	?SetConfigInfo@CDynamicOutputPin@@QAEXPAUIGraphConfig@@PAX@Z ; CDynamicOutputPin::SetConfigInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetConfigInfo@CDynamicOutputPin@@QAEXPAUIGraphConfig@@PAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pGraphConfig$ = 8					; size = 4
_hStopEvent$ = 12					; size = 4
?SetConfigInfo@CDynamicOutputPin@@QAEXPAUIGraphConfig@@PAX@Z PROC ; CDynamicOutputPin::SetConfigInfo, COMDAT
; _this$ = ecx
; Line 4146
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4150
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pGraphConfig$[ebp]
	mov	DWORD PTR [eax+232], ecx
; Line 4152
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _hStopEvent$[ebp]
	mov	DWORD PTR [edx+228], eax
; Line 4153
	mov	esp, ebp
	pop	ebp
	ret	8
?SetConfigInfo@CDynamicOutputPin@@QAEXPAUIGraphConfig@@PAX@Z ENDP ; CDynamicOutputPin::SetConfigInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Active@CDynamicOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Active@CDynamicOutputPin@@UAEJXZ PROC			; CDynamicOutputPin::Active, COMDAT
; _this$ = ecx
; Line 4156
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4158
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+228], 0
	je	SHORT $LN2@Active@2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+232], 0
	jne	SHORT $LN3@Active@2
$LN2@Active@2:
; Line 4159
	push	4159					; 0000103fH
	push	OFFSET $SG83930
	push	OFFSET $SG83931
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
; Line 4160
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN4@Active@2
$LN3@Active@2:
; Line 4167
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	push	eax
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@Active@2
	push	4167					; 00001047H
	push	OFFSET $SG83934
	push	OFFSET $SG83935
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Active@2:
; Line 4169
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Active@CBaseOutputPin@@UAEJXZ		; CBaseOutputPin::Active
$LN4@Active@2:
; Line 4170
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Active@CDynamicOutputPin@@UAEJXZ ENDP			; CDynamicOutputPin::Active
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Inactive@CDynamicOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Inactive@CDynamicOutputPin@@UAEJXZ PROC		; CDynamicOutputPin::Inactive, COMDAT
; _this$ = ecx
; Line 4173
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4178
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@Inactive@3
	push	4178					; 00001052H
	push	OFFSET $SG83941
	push	OFFSET $SG83942
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Inactive@3:
; Line 4180
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Inactive@CBaseOutputPin@@UAEJXZ	; CBaseOutputPin::Inactive
; Line 4181
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Inactive@CDynamicOutputPin@@UAEJXZ ENDP		; CDynamicOutputPin::Inactive
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeliverBeginFlush@CDynamicOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeliverBeginFlush@CDynamicOutputPin@@UAEJXZ PROC	; CDynamicOutputPin::DeliverBeginFlush, COMDAT
; _this$ = ecx
; Line 4184
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4189
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@DeliverBeg@2
	push	4189					; 0000105dH
	push	OFFSET $SG83948
	push	OFFSET $SG83949
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DeliverBeg@2:
; Line 4191
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeliverBeginFlush@CBaseOutputPin@@UAEJXZ ; CBaseOutputPin::DeliverBeginFlush
; Line 4192
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeliverBeginFlush@CDynamicOutputPin@@UAEJXZ ENDP	; CDynamicOutputPin::DeliverBeginFlush
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeliverEndFlush@CDynamicOutputPin@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeliverEndFlush@CDynamicOutputPin@@UAEJXZ PROC		; CDynamicOutputPin::DeliverEndFlush, COMDAT
; _this$ = ecx
; Line 4195
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4200
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	push	ecx
	call	DWORD PTR __imp__ResetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@DeliverEnd@4
	push	4200					; 00001068H
	push	OFFSET $SG83955
	push	OFFSET $SG83956
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DeliverEnd@4:
; Line 4202
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeliverEndFlush@CBaseOutputPin@@UAEJXZ	; CBaseOutputPin::DeliverEndFlush
; Line 4203
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeliverEndFlush@CDynamicOutputPin@@UAEJXZ ENDP		; CDynamicOutputPin::DeliverEndFlush
_TEXT	ENDS
PUBLIC	?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z ; CDynamicOutputPin::ChangeMediaType
PUBLIC	__$ArrayPad$
PUBLIC	?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z ; CDynamicOutputPin::ChangeOutputFormat
EXTRN	??0CMediaType@@QAE@ABU_AMMediaType@@PAJ@Z:PROC	; CMediaType::CMediaType
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z$0
__ehfuncinfo$?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z
_TEXT	SEGMENT
$T86599 = -116						; size = 4
$T86598 = -112						; size = 4
$T86597 = -108						; size = 4
_hr$ = -104						; size = 4
_cmt$ = -96						; size = 72
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pmt$ = 8						; size = 4
_tSegmentStart$ = 12					; size = 8
_tSegmentStop$ = 20					; size = 8
_dSegmentRate$ = 28					; size = 8
?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z PROC ; CDynamicOutputPin::ChangeOutputFormat, COMDAT
; _this$ = ecx
; Line 4215
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4218
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@ChangeOutp
	push	4218					; 0000107aH
	push	OFFSET $SG83965
	push	OFFSET $SG83966
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@ChangeOutp:
; Line 4221
	cmp	DWORD PTR _pmt$[ebp], 0
	jne	SHORT $LN3@ChangeOutp
	push	4221					; 0000107dH
	push	OFFSET $SG83968
	push	OFFSET $SG83969
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@ChangeOutp:
; Line 4223
	push	0
	mov	edx, DWORD PTR _pmt$[ebp]
	push	edx
	lea	ecx, DWORD PTR _cmt$[ebp]
	call	??0CMediaType@@QAE@ABU_AMMediaType@@PAJ@Z ; CMediaType::CMediaType
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4224
	lea	eax, DWORD PTR _cmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z ; CDynamicOutputPin::ChangeMediaType
	mov	DWORD PTR _hr$[ebp], eax
; Line 4225
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@ChangeOutp
; Line 4226
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T86597[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cmt$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	eax, DWORD PTR $T86597[ebp]
	jmp	SHORT $LN5@ChangeOutp
$LN2@ChangeOutp:
; Line 4229
	mov	esi, esp
	sub	esp, 8
	fld	QWORD PTR _dSegmentRate$[ebp]
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _tSegmentStop$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _tSegmentStop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tSegmentStart$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _tSegmentStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4230
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@ChangeOutp
; Line 4231
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T86598[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cmt$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	eax, DWORD PTR $T86598[ebp]
	jmp	SHORT $LN5@ChangeOutp
$LN1@ChangeOutp:
; Line 4234
	mov	DWORD PTR $T86599[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cmt$[ebp]
	call	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
	mov	eax, DWORD PTR $T86599[ebp]
$LN5@ChangeOutp:
; Line 4235
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ChangeOutp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN11@ChangeOutp:
	DD	1
	DD	$LN10@ChangeOutp
$LN10@ChangeOutp:
	DD	-96					; ffffffa0H
	DD	72					; 00000048H
	DD	$LN8@ChangeOutp
$LN8@ChangeOutp:
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z$0:
	lea	ecx, DWORD PTR _cmt$[ebp]
	jmp	??1CMediaType@@QAE@XZ			; CMediaType::~CMediaType
__ehhandler$?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ChangeOutputFormat@CDynamicOutputPin@@QAEJPBU_AMMediaType@@_J1N@Z ENDP ; CDynamicOutputPin::ChangeOutputFormat
PUBLIC	?DynamicReconnect@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z ; CDynamicOutputPin::DynamicReconnect
PUBLIC	??1?$QzCComPtr@UIPinConnection@@@@QAE@XZ	; QzCComPtr<IPinConnection>::~QzCComPtr<IPinConnection>
PUBLIC	?ChangeMediaTypeHelper@CDynamicOutputPin@@AAEJPBVCMediaType@@@Z ; CDynamicOutputPin::ChangeMediaTypeHelper
PUBLIC	??C?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ ; QzCComPtr<IPinConnection>::operator->
PUBLIC	??B?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ ; QzCComPtr<IPinConnection>::operator IPinConnection *
PUBLIC	??I?$QzCComPtr@UIPinConnection@@@@QAEPAPAUIPinConnection@@XZ ; QzCComPtr<IPinConnection>::operator&
PUBLIC	??0?$QzCComPtr@UIPinConnection@@@@QAE@XZ	; QzCComPtr<IPinConnection>::QzCComPtr<IPinConnection>
EXTRN	_IID_IPinConnection:BYTE
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z$0
__ehfuncinfo$?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z
_TEXT	SEGMENT
tv150 = -48						; size = 4
$T86614 = -44						; size = 4
$T86613 = -40						; size = 4
$T86612 = -36						; size = 4
_hr$84025 = -32						; size = 4
_pConnection$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pmt$ = 8						; size = 4
?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z PROC ; CDynamicOutputPin::ChangeMediaType, COMDAT
; _this$ = ecx
; Line 4238
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4241
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@ChangeMedi
	push	4241					; 00001091H
	push	OFFSET $SG83985
	push	OFFSET $SG83986
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@ChangeMedi:
; Line 4244
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsStopped@CBasePin@@QAEHXZ		; CBasePin::IsStopped
	test	eax, eax
	je	SHORT $LN5@ChangeMedi
	push	4244					; 00001094H
	push	OFFSET $SG83988
	push	OFFSET $SG83989
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@ChangeMedi:
; Line 4246
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsConnected@CBasePin@@QAEHXZ		; CBasePin::IsConnected
	test	eax, eax
	jne	SHORT $LN4@ChangeMedi
; Line 4247
	mov	eax, -2147220983			; 80040209H
	jmp	$LN7@ChangeMedi
$LN4@ChangeMedi:
; Line 4253
	lea	ecx, DWORD PTR _pConnection$[ebp]
	call	??0?$QzCComPtr@UIPinConnection@@@@QAE@XZ ; QzCComPtr<IPinConnection>::QzCComPtr<IPinConnection>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4255
	lea	ecx, DWORD PTR _pConnection$[ebp]
	call	??I?$QzCComPtr@UIPinConnection@@@@QAEPAPAUIPinConnection@@XZ ; QzCComPtr<IPinConnection>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IPinConnection
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4256
	lea	ecx, DWORD PTR _pConnection$[ebp]
	call	??B?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ ; QzCComPtr<IPinConnection>::operator IPinConnection *
	test	eax, eax
	je	SHORT $LN3@ChangeMedi
; Line 4258
	lea	ecx, DWORD PTR _pConnection$[ebp]
	call	??C?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ ; QzCComPtr<IPinConnection>::operator->
	mov	DWORD PTR tv150[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _pmt$[ebp]
	push	edx
	mov	eax, DWORD PTR tv150[ebp]
	push	eax
	mov	ecx, DWORD PTR tv150[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@ChangeMedi
; Line 4260
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMediaTypeHelper@CDynamicOutputPin@@AAEJPBVCMediaType@@@Z ; CDynamicOutputPin::ChangeMediaTypeHelper
	mov	DWORD PTR _hr$84025[ebp], eax
; Line 4261
	cmp	DWORD PTR _hr$84025[ebp], 0
	jge	SHORT $LN1@ChangeMedi
; Line 4262
	mov	edx, DWORD PTR _hr$84025[ebp]
	mov	DWORD PTR $T86612[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pConnection$[ebp]
	call	??1?$QzCComPtr@UIPinConnection@@@@QAE@XZ ; QzCComPtr<IPinConnection>::~QzCComPtr<IPinConnection>
	mov	eax, DWORD PTR $T86612[ebp]
	jmp	SHORT $LN7@ChangeMedi
$LN1@ChangeMedi:
; Line 4265
	mov	DWORD PTR $T86613[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pConnection$[ebp]
	call	??1?$QzCComPtr@UIPinConnection@@@@QAE@XZ ; QzCComPtr<IPinConnection>::~QzCComPtr<IPinConnection>
	mov	eax, DWORD PTR $T86613[ebp]
	jmp	SHORT $LN7@ChangeMedi
$LN3@ChangeMedi:
; Line 4270
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DynamicReconnect@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z ; CDynamicOutputPin::DynamicReconnect
	mov	DWORD PTR $T86614[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pConnection$[ebp]
	call	??1?$QzCComPtr@UIPinConnection@@@@QAE@XZ ; QzCComPtr<IPinConnection>::~QzCComPtr<IPinConnection>
	mov	eax, DWORD PTR $T86614[ebp]
$LN7@ChangeMedi:
; Line 4271
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@ChangeMedi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN13@ChangeMedi:
	DD	1
	DD	$LN12@ChangeMedi
$LN12@ChangeMedi:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@ChangeMedi
$LN10@ChangeMedi:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z$0:
	lea	ecx, DWORD PTR _pConnection$[ebp]
	jmp	??1?$QzCComPtr@UIPinConnection@@@@QAE@XZ ; QzCComPtr<IPinConnection>::~QzCComPtr<IPinConnection>
__ehhandler$?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ChangeMediaType@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z ENDP ; CDynamicOutputPin::ChangeMediaType
PUBLIC	__$ArrayPad$
EXTRN	?IsEqualObject@@YGHPAUIUnknown@@0@Z:PROC	; IsEqualObject
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ChangeMediaTypeHelper@CDynamicOutputPin@@AAEJPBVCMediaType@@@Z
_TEXT	SEGMENT
tv94 = -40						; size = 4
_apInputPinRequirements$84048 = -32			; size = 16
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pmt$ = 8						; size = 4
?ChangeMediaTypeHelper@CDynamicOutputPin@@AAEJPBVCMediaType@@@Z PROC ; CDynamicOutputPin::ChangeMediaTypeHelper, COMDAT
; _this$ = ecx
; Line 4274
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4277
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@ChangeMedi@2
	push	4277					; 000010b5H
	push	OFFSET $SG84037
	push	OFFSET $SG84038
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN10@ChangeMedi@2:
; Line 4279
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@ChangeMedi@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN14@ChangeMedi@2
$LN13@ChangeMedi@2:
	mov	DWORD PTR tv94[ebp], 0
$LN14@ChangeMedi@2:
	mov	esi, esp
	mov	eax, DWORD PTR _pmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv94[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4280
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@ChangeMedi@2
; Line 4281
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN11@ChangeMedi@2
$LN9@ChangeMedi@2:
; Line 4284
	mov	esi, esp
	mov	edx, DWORD PTR _pmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4285
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@ChangeMedi@2
; Line 4286
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN11@ChangeMedi@2
$LN8@ChangeMedi@2:
; Line 4290
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	$LN7@ChangeMedi@2
; Line 4293
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	?IsEqualObject@@YGHPAUIUnknown@@0@Z	; IsEqualObject
	test	eax, eax
	jne	SHORT $LN6@ChangeMedi@2
	push	4293					; 000010c5H
	push	OFFSET $SG84046
	push	OFFSET $SG84047
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@ChangeMedi@2:
; Line 4296
	mov	DWORD PTR _apInputPinRequirements$84048[ebp+8], 0
; Line 4297
	mov	DWORD PTR _apInputPinRequirements$84048[ebp+4], 0
; Line 4298
	mov	DWORD PTR _apInputPinRequirements$84048[ebp+12], 0
; Line 4299
	mov	DWORD PTR _apInputPinRequirements$84048[ebp], 0
; Line 4301
	mov	esi, esp
	lea	eax, DWORD PTR _apInputPinRequirements$84048[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4304
	cmp	DWORD PTR _apInputPinRequirements$84048[ebp+8], 0
	jne	SHORT $LN5@ChangeMedi@2
; Line 4305
	mov	DWORD PTR _apInputPinRequirements$84048[ebp+8], 1
$LN5@ChangeMedi@2:
; Line 4308
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4309
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@ChangeMedi@2
; Line 4310
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN11@ChangeMedi@2
$LN4@ChangeMedi@2:
; Line 4313
	mov	esi, esp
	lea	ecx, DWORD PTR _apInputPinRequirements$84048[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4314
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@ChangeMedi@2
; Line 4315
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN11@ChangeMedi@2
$LN3@ChangeMedi@2:
; Line 4318
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4319
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@ChangeMedi@2
; Line 4320
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN11@ChangeMedi@2
$LN2@ChangeMedi@2:
; Line 4323
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4324
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@ChangeMedi@2
; Line 4325
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN11@ChangeMedi@2
$LN7@ChangeMedi@2:
; Line 4329
	xor	eax, eax
$LN11@ChangeMedi@2:
; Line 4330
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ChangeMedi@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN17@ChangeMedi@2:
	DD	1
	DD	$LN16@ChangeMedi@2
$LN16@ChangeMedi@2:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN15@ChangeMedi@2
$LN15@ChangeMedi@2:
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?ChangeMediaTypeHelper@CDynamicOutputPin@@AAEJPBVCMediaType@@@Z ENDP ; CDynamicOutputPin::ChangeMediaTypeHelper
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DynamicReconnect@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z
_TEXT	SEGMENT
tv131 = -12						; size = 4
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pmt$ = 8						; size = 4
?DynamicReconnect@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z PROC ; CDynamicOutputPin::DynamicReconnect, COMDAT
; _this$ = ecx
; Line 4338
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4341
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@DynamicRec
	push	4341					; 000010f5H
	push	OFFSET $SG84064
	push	OFFSET $SG84065
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@DynamicRec:
; Line 4343
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+232], 0
	je	SHORT $LN1@DynamicRec
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+228], 0
	jne	SHORT $LN2@DynamicRec
$LN1@DynamicRec:
; Line 4344
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN4@DynamicRec
$LN2@DynamicRec:
; Line 4353
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN6@DynamicRec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv131[ebp], ecx
	jmp	SHORT $LN7@DynamicRec
$LN6@DynamicRec:
	mov	DWORD PTR tv131[ebp], 0
$LN7@DynamicRec:
	mov	esi, esp
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pmt$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR tv131[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4355
	mov	eax, DWORD PTR _hr$[ebp]
$LN4@DynamicRec:
; Line 4356
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DynamicReconnect@CDynamicOutputPin@@QAEJPBVCMediaType@@@Z ENDP ; CDynamicOutputPin::DynamicReconnect
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CompleteConnect@CDynamicOutputPin@@UAEJPAUIPin@@@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pReceivePin$ = 8					; size = 4
?CompleteConnect@CDynamicOutputPin@@UAEJPAUIPin@@@Z PROC ; CDynamicOutputPin::CompleteConnect, COMDAT
; _this$ = ecx
; Line 4359
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4360
	mov	eax, DWORD PTR _pReceivePin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CompleteConnect@CBaseOutputPin@@UAEJPAUIPin@@@Z ; CBaseOutputPin::CompleteConnect
	mov	DWORD PTR _hr$[ebp], eax
; Line 4361
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@CompleteCo
; Line 4362
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsStopped@CBasePin@@QAEHXZ		; CBasePin::IsStopped
	test	eax, eax
	jne	SHORT $LN3@CompleteCo
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+160], 0
	je	SHORT $LN3@CompleteCo
; Line 4363
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4364
	cmp	DWORD PTR _hr$[ebp], -2147220977	; 8004020fH
	jne	SHORT $LN3@CompleteCo
	push	4364					; 0000110cH
	push	OFFSET $SG84080
	push	OFFSET $SG84081
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CompleteCo:
; Line 4368
	mov	eax, DWORD PTR _hr$[ebp]
; Line 4369
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CompleteConnect@CDynamicOutputPin@@UAEJPAUIPin@@@Z ENDP ; CDynamicOutputPin::CompleteConnect
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AssertValid@CDynamicOutputPin@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AssertValid@CDynamicOutputPin@@AAEXXZ$0
__ehfuncinfo$?AssertValid@CDynamicOutputPin@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AssertValid@CDynamicOutputPin@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AssertValid@CDynamicOutputPin@@AAEXXZ
_TEXT	SEGMENT
_alBlockStateLock$ = -24				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AssertValid@CDynamicOutputPin@@AAEXXZ PROC		; CDynamicOutputPin::AssertValid, COMDAT
; _this$ = ecx
; Line 4373
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AssertValid@CDynamicOutputPin@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4378
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+208], 0
	jne	SHORT $LN12@AssertVali
	push	4378					; 0000111aH
	push	OFFSET $SG84087
	push	OFFSET $SG84088
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN12@AssertVali:
; Line 4382
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+228], 0
	jne	SHORT $LN11@AssertVali
	push	4382					; 0000111eH
	push	OFFSET $SG84090
	push	OFFSET $SG84091
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN11@AssertVali:
; Line 4383
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+232], 0
	jne	SHORT $LN10@AssertVali
	push	4383					; 0000111fH
	push	OFFSET $SG84093
	push	OFFSET $SG84094
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN10@AssertVali:
; Line 4387
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4390
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+216], 0
	je	SHORT $LN9@AssertVali
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+216], 1
	je	SHORT $LN9@AssertVali
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+216], 2
	je	SHORT $LN9@AssertVali
	push	4390					; 00001126H
	push	OFFSET $SG84097
	push	OFFSET $SG84098
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN9@AssertVali:
; Line 4395
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 0
	jne	SHORT $LN7@AssertVali
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+216], 1
	jne	SHORT $LN8@AssertVali
$LN7@AssertVali:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN6@AssertVali
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+216], 1
	je	SHORT $LN8@AssertVali
$LN6@AssertVali:
	push	4395					; 0000112bH
	push	OFFSET $SG84102
	push	OFFSET $SG84103
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@AssertVali:
; Line 4399
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+220], 0
	je	SHORT $LN5@AssertVali
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+216], 0
	jne	SHORT $LN5@AssertVali
	push	4399					; 0000112fH
	push	OFFSET $SG84105
	push	OFFSET $SG84106
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@AssertVali:
; Line 4405
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+224], 0
	je	SHORT $LN3@AssertVali
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+216], 2
	jne	SHORT $LN4@AssertVali
$LN3@AssertVali:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+224], 0
	jne	SHORT $LN2@AssertVali
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+216], 0
	jne	SHORT $LN4@AssertVali
$LN2@AssertVali:
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+224], 0
	jne	SHORT $LN1@AssertVali
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+216], 0
	je	SHORT $LN4@AssertVali
$LN1@AssertVali:
	push	4405					; 00001135H
	push	OFFSET $SG84111
	push	OFFSET $SG84112
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@AssertVali:
; Line 4406
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@AssertVali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@AssertVali:
	DD	1
	DD	$LN18@AssertVali
$LN18@AssertVali:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN16@AssertVali
$LN16@AssertVali:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AssertValid@CDynamicOutputPin@@AAEXXZ$0:
	lea	ecx, DWORD PTR _alBlockStateLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?AssertValid@CDynamicOutputPin@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AssertValid@CDynamicOutputPin@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AssertValid@CDynamicOutputPin@@AAEXXZ ENDP		; CDynamicOutputPin::AssertValid
EXTRN	__imp__WaitForSingleObject@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WaitEvent@CDynamicOutputPin@@KGJPAX@Z
_TEXT	SEGMENT
tv67 = -12						; size = 4
_dwReturnValue$ = -8					; size = 4
_EVENT_SIGNALED$ = -4					; size = 4
_hEvent$ = 8						; size = 4
?WaitEvent@CDynamicOutputPin@@KGJPAX@Z PROC		; CDynamicOutputPin::WaitEvent, COMDAT
; Line 4410
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4411
	mov	DWORD PTR _EVENT_SIGNALED$[ebp], 0
; Line 4413
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _hEvent$[ebp]
	push	eax
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwReturnValue$[ebp], eax
; Line 4415
	mov	ecx, DWORD PTR _dwReturnValue$[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN3@WaitEvent
	cmp	DWORD PTR tv67[ebp], -1
	je	SHORT $LN2@WaitEvent
	jmp	SHORT $LN1@WaitEvent
$LN3@WaitEvent:
; Line 4417
	xor	eax, eax
	jmp	SHORT $LN6@WaitEvent
$LN2@WaitEvent:
; Line 4420
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	jmp	SHORT $LN6@WaitEvent
$LN1@WaitEvent:
; Line 4423
	push	4423					; 00001147H
	push	OFFSET $SG84128
	push	OFFSET $SG84129
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
; Line 4424
	mov	eax, -2147418113			; 8000ffffH
$LN6@WaitEvent:
; Line 4426
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WaitEvent@CDynamicOutputPin@@KGJPAX@Z ENDP		; CDynamicOutputPin::WaitEvent
_TEXT	ENDS
PUBLIC	??0CSampleList@CBaseAllocator@@QAE@XZ		; CBaseAllocator::CSampleList::CSampleList
PUBLIC	??0IMemAllocatorCallbackTemp@@QAE@XZ		; IMemAllocatorCallbackTemp::IMemAllocatorCallbackTemp
PUBLIC	??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z	; CBaseAllocator::CBaseAllocator
EXTRN	__imp__CreateSemaphoreW@16:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z$1
__ehfuncinfo$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_phr$ = 16						; size = 4
_bEvent$ = 20						; size = 4
_fEnableReleaseCallback$ = 24				; size = 4
??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z PROC	; CBaseAllocator::CBaseAllocator, COMDAT
; _this$ = ecx
; Line 4460
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PB_WPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IMemAllocatorCallbackTemp@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CSampleList@CBaseAllocator@@QAE@XZ	; CBaseAllocator::CSampleList::CSampleList
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _fEnableReleaseCallback$[ebp]
	mov	DWORD PTR [ecx+108], edx
; Line 4462
	cmp	DWORD PTR _bEvent$[ebp], 0
	je	SHORT $LN3@CBaseAlloc
; Line 4463
	mov	esi, esp
	push	0
	push	2147483647				; 7fffffffH
	push	0
	push	0
	call	DWORD PTR __imp__CreateSemaphoreW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax
; Line 4464
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+64], 0
	jne	SHORT $LN3@CBaseAlloc
; Line 4465
	mov	eax, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [eax], -2147024882		; 8007000eH
$LN3@CBaseAlloc:
; Line 4469
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__unwindfunclet$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z ENDP	; CBaseAllocator::CBaseAllocator
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CSampleList@CBaseAllocator@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSampleList@CBaseAllocator@@QAE@XZ PROC		; CBaseAllocator::CSampleList::CSampleList, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 1356
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSampleList@CBaseAllocator@@QAE@XZ ENDP		; CBaseAllocator::CSampleList::CSampleList
_TEXT	ENDS
PUBLIC	??0IMemAllocator@@QAE@XZ			; IMemAllocator::IMemAllocator
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IMemAllocatorCallbackTemp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IMemAllocatorCallbackTemp@@QAE@XZ PROC		; IMemAllocatorCallbackTemp::IMemAllocatorCallbackTemp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IMemAllocator@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IMemAllocatorCallbackTemp@@QAE@XZ ENDP		; IMemAllocatorCallbackTemp::IMemAllocatorCallbackTemp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IMemAllocator@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IMemAllocator@@QAE@XZ PROC				; IMemAllocator::IMemAllocator, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IMemAllocator@@QAE@XZ ENDP				; IMemAllocator::IMemAllocator
_TEXT	ENDS
PUBLIC	??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z	; CBaseAllocator::CBaseAllocator
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z$1
__ehfuncinfo$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_phr$ = 16						; size = 4
_bEvent$ = 20						; size = 4
_fEnableReleaseCallback$ = 24				; size = 4
??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z PROC	; CBaseAllocator::CBaseAllocator, COMDAT
; _this$ = ecx
; Line 4490
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PBDPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IMemAllocatorCallbackTemp@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CSampleList@CBaseAllocator@@QAE@XZ	; CBaseAllocator::CSampleList::CSampleList
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _fEnableReleaseCallback$[ebp]
	mov	DWORD PTR [ecx+108], edx
; Line 4492
	cmp	DWORD PTR _bEvent$[ebp], 0
	je	SHORT $LN3@CBaseAlloc@2
; Line 4493
	mov	esi, esp
	push	0
	push	2147483647				; 7fffffffH
	push	0
	push	0
	call	DWORD PTR __imp__CreateSemaphoreW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax
; Line 4494
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+64], 0
	jne	SHORT $LN3@CBaseAlloc@2
; Line 4495
	mov	eax, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [eax], -2147024882		; 8007000eH
$LN3@CBaseAlloc@2:
; Line 4499
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__unwindfunclet$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z ENDP	; CBaseAllocator::CBaseAllocator
PUBLIC	??1CSampleList@CBaseAllocator@@QAE@XZ		; CBaseAllocator::CSampleList::~CSampleList
PUBLIC	??1CBaseAllocator@@UAE@XZ			; CBaseAllocator::~CBaseAllocator
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBaseAllocator@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseAllocator@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBaseAllocator@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CBaseAllocator@@UAE@XZ$2
__ehfuncinfo$??1CBaseAllocator@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CBaseAllocator@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseAllocator@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseAllocator@@UAE@XZ PROC				; CBaseAllocator::~CBaseAllocator, COMDAT
; _this$ = ecx
; Line 4505
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseAllocator@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 4511
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN4@CBaseAlloc@3
	push	4511					; 0000119fH
	push	OFFSET $SG84165
	push	OFFSET $SG84166
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CBaseAlloc@3:
; Line 4512
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN3@CBaseAlloc@3
; Line 4513
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@CBaseAlloc@3
	push	4513					; 000011a1H
	push	OFFSET $SG84169
	push	OFFSET $SG84170
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CBaseAlloc@3:
; Line 4515
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN5@CBaseAlloc@3
; Line 4516
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@CBaseAlloc@3:
; Line 4518
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1CSampleList@CBaseAllocator@@QAE@XZ	; CBaseAllocator::CSampleList::~CSampleList
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseAllocator@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__unwindfunclet$??1CBaseAllocator@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__unwindfunclet$??1CBaseAllocator@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CSampleList@CBaseAllocator@@QAE@XZ	; CBaseAllocator::CSampleList::~CSampleList
__ehhandler$??1CBaseAllocator@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseAllocator@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseAllocator@@UAE@XZ ENDP				; CBaseAllocator::~CBaseAllocator
PUBLIC	??_C@_1BO@HBLLLHNM@?$AAm?$AA_?$AAn?$AAO?$AAn?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BO@HBLLLHNM@?$AAm?$AA_?$AAn?$AAO?$AAn?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
CONST	SEGMENT
??_C@_1BO@HBLLLHNM@?$AAm?$AA_?$AAn?$AAO?$AAn?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'm'
	DB	00H, '_', 00H, 'n', 00H, 'O', 00H, 'n', 00H, 'L', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??1CSampleList@CBaseAllocator@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSampleList@CBaseAllocator@@QAE@XZ PROC		; CBaseAllocator::CSampleList::~CSampleList, COMDAT
; _this$ = ecx
; Line 1359
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1360
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@CSampleLis
	push	1360					; 00000550H
	push	OFFSET ??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1BO@HBLLLHNM@?$AAm?$AA_?$AAn?$AAO?$AAn?$AAL?$AAi?$AAs?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CSampleLis:
; Line 1361
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSampleList@CBaseAllocator@@QAE@XZ ENDP		; CBaseAllocator::CSampleList::~CSampleList
_TEXT	ENDS
PUBLIC	?NonDelegatingQueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z ; CBaseAllocator::NonDelegatingQueryInterface
EXTRN	_IID_IMemAllocatorCallbackTemp:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingQueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv83 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseAllocator::NonDelegatingQueryInterface, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 4525
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4529
	push	OFFSET _IID_IMemAllocator
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	jne	SHORT $LN2@NonDelegat@9
	push	OFFSET _IID_IMemAllocatorCallbackTemp
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN3@NonDelegat@9
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN3@NonDelegat@9
$LN2@NonDelegat@9:
; Line 4530
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN6@NonDelegat@9
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN7@NonDelegat@9
$LN6@NonDelegat@9:
	mov	DWORD PTR tv83[ebp], 0
$LN7@NonDelegat@9:
	mov	ecx, DWORD PTR _ppv$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv83[ebp]
	push	edx
	call	_GetInterface@8
	jmp	SHORT $LN4@NonDelegat@9
; Line 4531
	jmp	SHORT $LN4@NonDelegat@9
$LN3@NonDelegat@9:
; Line 4532
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z ; CUnknown::NonDelegatingQueryInterface
$LN4@NonDelegat@9:
; Line 4534
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseAllocator::NonDelegatingQueryInterface
_TEXT	ENDS
PUBLIC	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ	; CBaseAllocator::CSampleList::GetCount
PUBLIC	?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z ; CBaseAllocator::SetProperties
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z$0
__ehfuncinfo$?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z
_TEXT	SEGMENT
tv87 = -44						; size = 4
$T86705 = -40						; size = 4
$T86704 = -36						; size = 4
$T86703 = -32						; size = 4
$T86702 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pRequest$ = 12						; size = 4
_pActual$ = 16						; size = 4
?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z PROC ; CBaseAllocator::SetProperties, COMDAT
; Line 4546
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4547
	cmp	DWORD PTR _pRequest$[ebp], 0
	jne	SHORT $LN8@SetPropert@2
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@SetPropert@2
$LN8@SetPropert@2:
; Line 4548
	cmp	DWORD PTR _pActual$[ebp], 0
	jne	SHORT $LN7@SetPropert@2
	mov	eax, -2147467261			; 80004003H
	jmp	$LN9@SetPropert@2
$LN7@SetPropert@2:
; Line 4549
	mov	esi, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _pActual$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@SetPropert@2
	push	4549					; 000011c5H
	push	OFFSET $SG84193
	push	OFFSET $SG84194
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN6@SetPropert@2:
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _pActual$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@SetPropert@2
	push	4549					; 000011c5H
	push	OFFSET $SG84198
	push	OFFSET $SG84199
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@SetPropert@2:
; Line 4550
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 16					; 00000010H
	je	SHORT $LN11@SetPropert@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN12@SetPropert@2
$LN11@SetPropert@2:
	mov	DWORD PTR tv87[ebp], 0
$LN12@SetPropert@2:
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4552
	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _pActual$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 4554
	mov	eax, DWORD PTR _pRequest$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN4@SetPropert@2
	push	4554					; 000011caH
	push	OFFSET $SG84203
	push	OFFSET $SG84204
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@SetPropert@2:
; Line 4557
	mov	ecx, DWORD PTR _pRequest$[ebp]
	cmp	DWORD PTR [ecx+8], 1
	je	SHORT $LN3@SetPropert@2
; Line 4559
	mov	edx, DWORD PTR _pRequest$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET $SG84206
	push	2
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 4560
	mov	DWORD PTR $T86702[ebp], -2147220978	; 8004020eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86702[ebp]
	jmp	$LN9@SetPropert@2
$LN3@SetPropert@2:
; Line 4569
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	je	SHORT $LN2@SetPropert@2
; Line 4570
	mov	DWORD PTR $T86703[ebp], -2147220977	; 8004020fH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86703[ebp]
	jmp	$LN9@SetPropert@2
$LN2@SetPropert@2:
; Line 4575
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], eax
	je	SHORT $LN1@SetPropert@2
; Line 4576
	mov	DWORD PTR $T86704[ebp], -2147220976	; 80040210H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86704[ebp]
	jmp	$LN9@SetPropert@2
$LN1@SetPropert@2:
; Line 4582
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pRequest$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+64], edx
	mov	eax, DWORD PTR _pActual$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+4], edx
; Line 4583
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pRequest$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+56], edx
	mov	eax, DWORD PTR _pActual$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx
; Line 4584
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pRequest$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+68], edx
	mov	eax, DWORD PTR _pActual$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+8], edx
; Line 4585
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pRequest$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+72], edx
	mov	eax, DWORD PTR _pActual$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+12], edx
; Line 4587
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 1
; Line 4588
	mov	DWORD PTR $T86705[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86705[ebp]
$LN9@SetPropert@2:
; Line 4589
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@SetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN17@SetPropert@2:
	DD	1
	DD	$LN16@SetPropert@2
$LN16@SetPropert@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@SetPropert@2
$LN14@SetPropert@2:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z ENDP ; CBaseAllocator::SetProperties
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetCount@CSampleList@CBaseAllocator@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@CSampleList@CBaseAllocator@@QBEHXZ PROC	; CBaseAllocator::CSampleList::GetCount, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 1365
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ENDP	; CBaseAllocator::CSampleList::GetCount
_TEXT	ENDS
PUBLIC	?GetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@@Z ; CBaseAllocator::GetProperties
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@@Z
_TEXT	SEGMENT
tv86 = -20						; size = 4
$T86722 = -16						; size = 4
_cObjectLock$ = -8					; size = 4
_this$ = 8						; size = 4
_pActual$ = 12						; size = 4
?GetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@@Z PROC ; CBaseAllocator::GetProperties, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 4594
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4595
	cmp	DWORD PTR _pActual$[ebp], 0
	jne	SHORT $LN3@GetPropert@2
	mov	eax, -2147467261			; 80004003H
	jmp	$LN4@GetPropert@2
$LN3@GetPropert@2:
; Line 4596
	mov	esi, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _pActual$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN2@GetPropert@2
	push	4596					; 000011f4H
	push	OFFSET $SG84225
	push	OFFSET $SG84226
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN2@GetPropert@2:
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _pActual$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN1@GetPropert@2
	push	4596					; 000011f4H
	push	OFFSET $SG84230
	push	OFFSET $SG84231
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@GetPropert@2:
; Line 4598
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 16					; 00000010H
	je	SHORT $LN6@GetPropert@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN7@GetPropert@2
$LN6@GetPropert@2:
	mov	DWORD PTR tv86[ebp], 0
$LN7@GetPropert@2:
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
; Line 4599
	mov	edx, DWORD PTR _pActual$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [edx+4], ecx
; Line 4600
	mov	edx, DWORD PTR _pActual$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR [edx], ecx
; Line 4601
	mov	edx, DWORD PTR _pActual$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+8], ecx
; Line 4602
	mov	edx, DWORD PTR _pActual$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR [edx+12], ecx
; Line 4603
	mov	DWORD PTR $T86722[ebp], 0
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86722[ebp]
$LN4@GetPropert@2:
; Line 4604
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN11@GetPropert@2:
	DD	1
	DD	$LN10@GetPropert@2
$LN10@GetPropert@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@GetPropert@2
$LN9@GetPropert@2:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?GetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@@Z ENDP ; CBaseAllocator::GetProperties
_TEXT	ENDS
PUBLIC	?SetWaiting@CBaseAllocator@@QAEXXZ		; CBaseAllocator::SetWaiting
PUBLIC	?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ ; CBaseAllocator::CSampleList::RemoveHead
PUBLIC	?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z ; CBaseAllocator::GetBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z$0
__ehfuncinfo$?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z
_TEXT	SEGMENT
tv71 = -36						; size = 4
$T86731 = -32						; size = 4
_cObjectLock$84245 = -24				; size = 4
_pSample$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ppBuffer$ = 12						; size = 4
_pStartTime$ = 16					; size = 4
_pEndTime$ = 20						; size = 4
_dwFlags$ = 24						; size = 4
?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z PROC ; CBaseAllocator::GetBuffer, COMDAT
; Line 4616
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4622
	mov	eax, DWORD PTR _ppBuffer$[ebp]
	mov	DWORD PTR [eax], 0
$LN8@GetBuffer:
; Line 4626
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	je	SHORT $LN11@GetBuffer
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN12@GetBuffer
$LN11@GetBuffer:
	mov	DWORD PTR tv71[ebp], 0
$LN12@GetBuffer:
	mov	eax, DWORD PTR tv71[ebp]
	push	eax
	lea	ecx, DWORD PTR _cObjectLock$84245[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4629
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	jne	SHORT $LN6@GetBuffer
; Line 4630
	mov	DWORD PTR $T86731[ebp], -2147220975	; 80040211H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$84245[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86731[ebp]
	jmp	$LN9@GetBuffer
$LN6@GetBuffer:
; Line 4632
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ ; CBaseAllocator::CSampleList::RemoveHead
	mov	DWORD PTR _pSample$[ebp], eax
; Line 4633
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN5@GetBuffer
; Line 4634
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?SetWaiting@CBaseAllocator@@QAEXXZ	; CBaseAllocator::SetWaiting
$LN5@GetBuffer:
; Line 4636
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$84245[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 4640
	cmp	DWORD PTR _pSample$[ebp], 0
	je	SHORT $LN4@GetBuffer
; Line 4641
	jmp	SHORT $LN7@GetBuffer
$LN4@GetBuffer:
; Line 4643
	mov	edx, DWORD PTR _dwFlags$[ebp]
	and	edx, 4
	je	SHORT $LN3@GetBuffer
; Line 4644
	mov	eax, -2147220946			; 8004022eH
	jmp	SHORT $LN9@GetBuffer
$LN3@GetBuffer:
; Line 4646
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN2@GetBuffer
	push	4646					; 00001226H
	push	OFFSET $SG84255
	push	OFFSET $SG84256
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@GetBuffer:
; Line 4647
	mov	esi, esp
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4648
	jmp	$LN8@GetBuffer
$LN7@GetBuffer:
; Line 4656
	mov	eax, DWORD PTR _pSample$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@GetBuffer
	push	4656					; 00001230H
	push	OFFSET $SG84258
	push	OFFSET $SG84259
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetBuffer:
; Line 4657
	mov	ecx, DWORD PTR _pSample$[ebp]
	mov	DWORD PTR [ecx+68], 1
; Line 4658
	mov	edx, DWORD PTR _ppBuffer$[ebp]
	mov	eax, DWORD PTR _pSample$[ebp]
	mov	DWORD PTR [edx], eax
; Line 4661
	xor	eax, eax
$LN9@GetBuffer:
; Line 4662
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@GetBuffer
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN17@GetBuffer:
	DD	1
	DD	$LN16@GetBuffer
$LN16@GetBuffer:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@GetBuffer
$LN14@GetBuffer:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$84245[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z ENDP ; CBaseAllocator::GetBuffer
PUBLIC	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ
_TEXT	SEGMENT
_pSample$ = -8						; size = 4
_this$ = -4						; size = 4
?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ PROC ; CBaseAllocator::CSampleList::RemoveHead, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 1374
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1375
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pSample$[ebp], ecx
; Line 1376
	cmp	DWORD PTR _pSample$[ebp], 0
	je	SHORT $LN1@RemoveHead
; Line 1377
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 1378
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN1@RemoveHead:
; Line 1380
	mov	eax, DWORD PTR _pSample$[ebp]
; Line 1381
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ ENDP ; CBaseAllocator::CSampleList::RemoveHead
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z
_TEXT	SEGMENT
_pSample$ = 8						; size = 4
?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z PROC ; CBaseAllocator::NextSample, COMDAT
; Line 1348
	push	ebp
	mov	ebp, esp
; Line 1349
	mov	eax, DWORD PTR _pSample$[ebp]
	add	eax, 28					; 0000001cH
; Line 1350
	pop	ebp
	ret	4
?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ENDP ; CBaseAllocator::NextSample
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetWaiting@CBaseAllocator@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetWaiting@CBaseAllocator@@QAEXXZ PROC			; CBaseAllocator::SetWaiting, COMDAT
; _this$ = ecx
; Line 1514
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+68], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetWaiting@CBaseAllocator@@QAEXXZ ENDP			; CBaseAllocator::SetWaiting
_TEXT	ENDS
PUBLIC	?NotifySample@CBaseAllocator@@QAEXXZ		; CBaseAllocator::NotifySample
PUBLIC	?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ; CBaseAllocator::CSampleList::Add
PUBLIC	?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z ; CBaseAllocator::ReleaseBuffer
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z$0
__ehfuncinfo$?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z
_TEXT	SEGMENT
tv79 = -36						; size = 4
_l1$84275 = -32						; size = 4
_cal$84272 = -24					; size = 4
_bRelease$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pSample$ = 12						; size = 4
?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z PROC ; CBaseAllocator::ReleaseBuffer, COMDAT
; Line 4669
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4670
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN7@ReleaseBuf
	mov	eax, -2147467261			; 80004003H
	jmp	$LN8@ReleaseBuf
$LN7@ReleaseBuf:
; Line 4671
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@ReleaseBuf
	push	4671					; 0000123fH
	push	OFFSET $SG84269
	push	OFFSET $SG84270
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN6@ReleaseBuf:
; Line 4675
	mov	DWORD PTR _bRelease$[ebp], 0
; Line 4677
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	je	SHORT $LN10@ReleaseBuf
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN11@ReleaseBuf
$LN10@ReleaseBuf:
	mov	DWORD PTR tv79[ebp], 0
$LN11@ReleaseBuf:
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	lea	ecx, DWORD PTR _cal$84272[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4681
	mov	ecx, DWORD PTR _pSample$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ; CBaseAllocator::CSampleList::Add
; Line 4682
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN5@ReleaseBuf
; Line 4683
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?NotifySample@CBaseAllocator@@QAEXXZ	; CBaseAllocator::NotifySample
$LN5@ReleaseBuf:
; Line 4689
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	mov	DWORD PTR _l1$84275[ebp], eax
; Line 4690
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN4@ReleaseBuf
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _l1$84275[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jne	SHORT $LN4@ReleaseBuf
; Line 4691
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4692
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 4693
	mov	DWORD PTR _bRelease$[ebp], 1
$LN4@ReleaseBuf:
; Line 4695
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cal$84272[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 4697
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+88], 0
	je	SHORT $LN3@ReleaseBuf
; Line 4699
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	SHORT $LN2@ReleaseBuf
	push	4699					; 0000125bH
	push	OFFSET $SG84279
	push	OFFSET $SG84280
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@ReleaseBuf:
; Line 4705
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@ReleaseBuf:
; Line 4711
	cmp	DWORD PTR _bRelease$[ebp], 0
	je	SHORT $LN1@ReleaseBuf
; Line 4712
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ReleaseBuf:
; Line 4714
	xor	eax, eax
$LN8@ReleaseBuf:
; Line 4715
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@ReleaseBuf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN16@ReleaseBuf:
	DD	1
	DD	$LN15@ReleaseBuf
$LN15@ReleaseBuf:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@ReleaseBuf
$LN13@ReleaseBuf:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z$0:
	lea	ecx, DWORD PTR _cal$84272[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z ENDP ; CBaseAllocator::ReleaseBuffer
PUBLIC	??_C@_1CA@MBBAJLBI@?$AAp?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CA@MBBAJLBI@?$AAp?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
CONST	SEGMENT
??_C@_1CA@MBBAJLBI@?$AAp?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'p'
	DB	00H, 'S', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSample$ = 8						; size = 4
?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z PROC ; CBaseAllocator::CSampleList::Add, COMDAT
; _this$ = ecx
; Line 1367
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1368
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN1@Add
	push	1368					; 00000558H
	push	OFFSET ??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1CA@MBBAJLBI@?$AAp?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Add:
; Line 1369
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	call	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 1370
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSample$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1371
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1372
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ENDP ; CBaseAllocator::CSampleList::Add
_TEXT	ENDS
PUBLIC	?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z ; CBaseAllocator::SetNotify
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
xdata$x	SEGMENT
__unwindtable$?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z$0
__ehfuncinfo$?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
$T86768 = -28						; size = 4
_lck$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pNotify$ = 12						; size = 4
?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z PROC ; CBaseAllocator::SetNotify, COMDAT
; Line 4721
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4722
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	SHORT $LN3@SetNotify
	push	4722					; 00001272H
	push	OFFSET $SG84287
	push	OFFSET $SG84288
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@SetNotify:
; Line 4723
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	je	SHORT $LN6@SetNotify
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN7@SetNotify
$LN6@SetNotify:
	mov	DWORD PTR tv77[ebp], 0
$LN7@SetNotify:
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4724
	cmp	DWORD PTR _pNotify$[ebp], 0
	je	SHORT $LN2@SetNotify
; Line 4725
	mov	ecx, DWORD PTR _pNotify$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pNotify$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetNotify:
; Line 4727
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+88], 0
	je	SHORT $LN1@SetNotify
; Line 4728
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetNotify:
; Line 4730
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNotify$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 4731
	mov	DWORD PTR $T86768[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86768[ebp]
; Line 4732
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SetNotify
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@SetNotify:
	DD	1
	DD	$LN11@SetNotify
$LN11@SetNotify:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@SetNotify
$LN9@SetNotify:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z ENDP ; CBaseAllocator::SetNotify
PUBLIC	?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z		; CBaseAllocator::GetFreeCount
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z$0
__ehfuncinfo$?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
$T86783 = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_plBuffersFree$ = 12					; size = 4
?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z PROC		; CBaseAllocator::GetFreeCount, COMDAT
; Line 4738
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4739
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	SHORT $LN1@GetFreeCou
	push	4739					; 00001283H
	push	OFFSET $SG84299
	push	OFFSET $SG84300
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetFreeCou:
; Line 4740
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	je	SHORT $LN4@GetFreeCou
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN5@GetFreeCou
$LN4@GetFreeCou:
	mov	DWORD PTR tv77[ebp], 0
$LN5@GetFreeCou:
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4741
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+56]
	sub	esi, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	add	esi, eax
	mov	eax, DWORD PTR _plBuffersFree$[ebp]
	mov	DWORD PTR [eax], esi
; Line 4742
	mov	DWORD PTR $T86783[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86783[ebp]
; Line 4743
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetFreeCou
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN10@GetFreeCou:
	DD	1
	DD	$LN9@GetFreeCou
$LN9@GetFreeCou:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@GetFreeCou
$LN7@GetFreeCou:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z ENDP		; CBaseAllocator::GetFreeCount
EXTRN	__imp__ReleaseSemaphore@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NotifySample@CBaseAllocator@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NotifySample@CBaseAllocator@@QAEXXZ PROC		; CBaseAllocator::NotifySample, COMDAT
; _this$ = ecx
; Line 4747
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4748
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN3@NotifySamp
; Line 4749
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN1@NotifySamp
	push	4749					; 0000128dH
	push	OFFSET $SG84308
	push	OFFSET $SG84309
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@NotifySamp:
; Line 4750
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	DWORD PTR __imp__ReleaseSemaphore@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4751
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
$LN3@NotifySamp:
; Line 4753
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?NotifySample@CBaseAllocator@@QAEXXZ ENDP		; CBaseAllocator::NotifySample
_TEXT	ENDS
PUBLIC	?Commit@CBaseAllocator@@UAGJXZ			; CBaseAllocator::Commit
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Commit@CBaseAllocator@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Commit@CBaseAllocator@@UAGJXZ$0
__ehfuncinfo$?Commit@CBaseAllocator@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Commit@CBaseAllocator@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Commit@CBaseAllocator@@UAGJXZ
_TEXT	SEGMENT
tv71 = -48						; size = 4
$T86803 = -44						; size = 4
$T86802 = -40						; size = 4
$T86801 = -36						; size = 4
$T86800 = -32						; size = 4
_hr$ = -28						; size = 4
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?Commit@CBaseAllocator@@UAGJXZ PROC			; CBaseAllocator::Commit, COMDAT
; Line 4757
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Commit@CBaseAllocator@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4759
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 16					; 00000010H
	je	SHORT $LN6@Commit
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN7@Commit
$LN6@Commit:
	mov	DWORD PTR tv71[ebp], 0
$LN7@Commit:
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4762
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN3@Commit
; Line 4763
	mov	DWORD PTR $T86800[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86800[ebp]
	jmp	$LN4@Commit
$LN3@Commit:
; Line 4768
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 1
; Line 4771
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 0
	je	SHORT $LN2@Commit
; Line 4772
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0
; Line 4778
	mov	DWORD PTR $T86801[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86801[ebp]
	jmp	$LN4@Commit
$LN2@Commit:
; Line 4781
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	push	OFFSET $SG84318
	push	1
	push	4
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 4784
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	esi, esp
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 4785
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Commit
; Line 4786
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 4787
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T86802[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86802[ebp]
	jmp	SHORT $LN4@Commit
$LN1@Commit:
; Line 4789
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4790
	mov	DWORD PTR $T86803[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86803[ebp]
$LN4@Commit:
; Line 4791
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Commit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@Commit:
	DD	1
	DD	$LN11@Commit
$LN11@Commit:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@Commit
$LN9@Commit:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Commit@CBaseAllocator@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Commit@CBaseAllocator@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Commit@CBaseAllocator@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Commit@CBaseAllocator@@UAGJXZ ENDP			; CBaseAllocator::Commit
PUBLIC	?Decommit@CBaseAllocator@@UAGJXZ		; CBaseAllocator::Decommit
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Decommit@CBaseAllocator@@UAGJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Decommit@CBaseAllocator@@UAGJXZ$0
__ehfuncinfo$?Decommit@CBaseAllocator@@UAGJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Decommit@CBaseAllocator@@UAGJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Decommit@CBaseAllocator@@UAGJXZ
_TEXT	SEGMENT
tv71 = -36						; size = 4
$T86818 = -32						; size = 4
_cObjectLock$84328 = -24				; size = 4
_bRelease$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?Decommit@CBaseAllocator@@UAGJXZ PROC			; CBaseAllocator::Decommit, COMDAT
; Line 4796
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Decommit@CBaseAllocator@@UAGJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4797
	mov	DWORD PTR _bRelease$[ebp], 0
; Line 4800
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 16					; 00000010H
	je	SHORT $LN8@Decommit
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN9@Decommit
$LN8@Decommit:
	mov	DWORD PTR tv71[ebp], 0
$LN9@Decommit:
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	lea	ecx, DWORD PTR _cObjectLock$84328[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4801
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN5@Decommit
; Line 4802
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	jne	SHORT $LN5@Decommit
; Line 4803
	mov	DWORD PTR $T86818[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$84328[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86818[ebp]
	jmp	$LN6@Decommit
$LN5@Decommit:
; Line 4808
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0
; Line 4811
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+60]
	jge	SHORT $LN3@Decommit
; Line 4813
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], 1
; Line 4814
	jmp	SHORT $LN2@Decommit
$LN3@Decommit:
; Line 4815
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0
; Line 4820
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx-16]
	mov	esi, esp
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4821
	mov	DWORD PTR _bRelease$[ebp], 1
$LN2@Decommit:
; Line 4826
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?NotifySample@CBaseAllocator@@QAEXXZ	; CBaseAllocator::NotifySample
; Line 4827
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$84328[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 4829
	cmp	DWORD PTR _bRelease$[ebp], 0
	je	SHORT $LN1@Decommit
; Line 4830
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Decommit:
; Line 4832
	xor	eax, eax
$LN6@Decommit:
; Line 4833
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Decommit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN14@Decommit:
	DD	1
	DD	$LN13@Decommit
$LN13@Decommit:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN11@Decommit
$LN11@Decommit:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Decommit@CBaseAllocator@@UAGJXZ$0:
	lea	ecx, DWORD PTR _cObjectLock$84328[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?Decommit@CBaseAllocator@@UAGJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Decommit@CBaseAllocator@@UAGJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Decommit@CBaseAllocator@@UAGJXZ ENDP			; CBaseAllocator::Decommit
PUBLIC	?Alloc@CBaseAllocator@@MAEJXZ			; CBaseAllocator::Alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@CBaseAllocator@@MAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Alloc@CBaseAllocator@@MAEJXZ PROC			; CBaseAllocator::Alloc, COMDAT
; _this$ = ecx
; Line 4841
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4843
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jle	SHORT $LN3@Alloc
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	jle	SHORT $LN3@Alloc
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 0
	jg	SHORT $LN4@Alloc
$LN3@Alloc:
; Line 4844
	mov	eax, -2147220974			; 80040212H
	jmp	SHORT $LN5@Alloc
$LN4@Alloc:
; Line 4848
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+76]
	je	SHORT $LN2@Alloc
	push	4848					; 000012f0H
	push	OFFSET $SG84343
	push	OFFSET $SG84344
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Alloc:
; Line 4851
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+92], 0
	jne	SHORT $LN1@Alloc
; Line 4852
	mov	eax, 1
	jmp	SHORT $LN5@Alloc
$LN1@Alloc:
; Line 4855
	xor	eax, eax
$LN5@Alloc:
; Line 4856
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Alloc@CBaseAllocator@@MAEJXZ ENDP			; CBaseAllocator::Alloc
_TEXT	ENDS
PUBLIC	?Remove@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ; CBaseAllocator::CSampleList::Remove
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Remove@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z
_TEXT	SEGMENT
_pSearch$ = -8						; size = 4
_this$ = -4						; size = 4
_pSample$ = 8						; size = 4
?Remove@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z PROC ; CBaseAllocator::CSampleList::Remove, COMDAT
; _this$ = ecx
; Line 4863
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4865
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pSearch$[ebp], eax
; Line 4866
	jmp	SHORT $LN4@Remove
$LN3@Remove:
; Line 4867
	mov	ecx, DWORD PTR _pSearch$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
	mov	DWORD PTR _pSearch$[ebp], eax
$LN4@Remove:
	mov	eax, DWORD PTR _pSearch$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Remove
; Line 4868
	mov	ecx, DWORD PTR _pSearch$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _pSample$[ebp]
	jne	SHORT $LN1@Remove
; Line 4869
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	call	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
	mov	ecx, DWORD PTR _pSearch$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 4870
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	call	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
	mov	DWORD PTR [eax], 0
; Line 4871
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 4872
	jmp	SHORT $LN5@Remove
$LN1@Remove:
; Line 4874
	jmp	SHORT $LN3@Remove
$LN2@Remove:
; Line 4875
	push	4875					; 0000130bH
	push	OFFSET $SG84356
	push	OFFSET $SG84357
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN5@Remove:
; Line 4876
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ENDP ; CBaseAllocator::CSampleList::Remove
_TEXT	ENDS
PUBLIC	??0CMemAllocator@@QAE@PA_WPAUIUnknown@@PAJ@Z	; CMemAllocator::CMemAllocator
PUBLIC	?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z ; CMemAllocator::CreateInstance
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z$0
__ehfuncinfo$?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z
_TEXT	SEGMENT
tv77 = -28						; size = 4
$T86836 = -24						; size = 4
$T86835 = -20						; size = 4
_pUnkRet$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pUnk$ = 8						; size = 4
_phr$ = 12						; size = 4
?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z PROC ; CMemAllocator::CreateInstance, COMDAT
; Line 4887
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4888
	push	116					; 00000074H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T86836[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T86836[ebp], 0
	je	SHORT $LN3@CreateInst
	mov	eax, DWORD PTR _phr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUnk$[ebp]
	push	ecx
	push	OFFSET $SG84367
	mov	ecx, DWORD PTR $T86836[ebp]
	call	??0CMemAllocator@@QAE@PA_WPAUIUnknown@@PAJ@Z ; CMemAllocator::CMemAllocator
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN4@CreateInst
$LN3@CreateInst:
	mov	DWORD PTR tv77[ebp], 0
$LN4@CreateInst:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T86835[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T86835[ebp]
	mov	DWORD PTR _pUnkRet$[ebp], eax
; Line 4889
	mov	eax, DWORD PTR _pUnkRet$[ebp]
; Line 4890
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z$0:
	mov	eax, DWORD PTR $T86836[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateInstance@CMemAllocator@@SGPAVCUnknown@@PAUIUnknown@@PAJ@Z ENDP ; CMemAllocator::CreateInstance
PUBLIC	??_7CMemAllocator@@6BIMemAllocatorCallbackTemp@@@ ; CMemAllocator::`vftable'
PUBLIC	??_7CMemAllocator@@6BCUnknown@@@		; CMemAllocator::`vftable'
PUBLIC	??_R4CMemAllocator@@6BCUnknown@@@		; CMemAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMemAllocator@@@8			; CMemAllocator `RTTI Type Descriptor'
PUBLIC	??_R3CMemAllocator@@8				; CMemAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMemAllocator@@8				; CMemAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMemAllocator@@8			; CMemAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBaseAllocator@@8			; CBaseAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBaseAllocator@@@8			; CBaseAllocator `RTTI Type Descriptor'
PUBLIC	??_R3CBaseAllocator@@8				; CBaseAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseAllocator@@8				; CBaseAllocator::`RTTI Base Class Array'
PUBLIC	??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8	; IMemAllocatorCallbackTemp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AUIMemAllocatorCallbackTemp@@@8		; IMemAllocatorCallbackTemp `RTTI Type Descriptor'
PUBLIC	??_R3IMemAllocatorCallbackTemp@@8		; IMemAllocatorCallbackTemp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMemAllocatorCallbackTemp@@8		; IMemAllocatorCallbackTemp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IMemAllocatorCallbackTemp@@8	; IMemAllocatorCallbackTemp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IMemAllocator@@8			; IMemAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIMemAllocator@@@8			; IMemAllocator `RTTI Type Descriptor'
PUBLIC	??_R3IMemAllocator@@8				; IMemAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMemAllocator@@8				; IMemAllocator::`RTTI Base Class Array'
PUBLIC	??_R1BA@?0A@EA@IMemAllocator@@8			; IMemAllocator::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R1BE@?0A@EA@CCritSec@@8			; CCritSec::`RTTI Base Class Descriptor at (20,-1,0,64)'
PUBLIC	??_R0?AVCCritSec@@@8				; CCritSec `RTTI Type Descriptor'
PUBLIC	??_R3CCritSec@@8				; CCritSec::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCritSec@@8				; CCritSec::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCritSec@@8			; CCritSec::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Free@CMemAllocator@@MAEXXZ			; CMemAllocator::Free
PUBLIC	?Alloc@CMemAllocator@@MAEJXZ			; CMemAllocator::Alloc
PUBLIC	??_R4CMemAllocator@@6BIMemAllocatorCallbackTemp@@@ ; CMemAllocator::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z ; CBaseAllocator::QueryInterface
PUBLIC	?AddRef@CBaseAllocator@@UAGKXZ			; CBaseAllocator::AddRef
PUBLIC	?Release@CBaseAllocator@@UAGKXZ			; CBaseAllocator::Release
PUBLIC	?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z ; CMemAllocator::SetProperties
EXTRN	?NonDelegatingAddRef@CUnknown@@UAGKXZ:PROC	; CUnknown::NonDelegatingAddRef
EXTRN	??_ECMemAllocator@@UAEPAXI@Z:PROC		; CMemAllocator::`vector deleting destructor'
;	COMDAT ??_R4CMemAllocator@@6BIMemAllocatorCallbackTemp@@@
rdata$r	SEGMENT
??_R4CMemAllocator@@6BIMemAllocatorCallbackTemp@@@ DD 00H ; CMemAllocator::`RTTI Complete Object Locator'
	DD	010H
	DD	00H
	DD	FLAT:??_R0?AVCMemAllocator@@@8
	DD	FLAT:??_R3CMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCritSec@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCritSec@@8 DD FLAT:??_R0?AVCCritSec@@@8	; CCritSec::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R2CCritSec@@8
rdata$r	SEGMENT
??_R2CCritSec@@8 DD FLAT:??_R1A@?0A@EA@CCritSec@@8	; CCritSec::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCritSec@@8
rdata$r	SEGMENT
??_R3CCritSec@@8 DD 00H					; CCritSec::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCritSec@@@8
_DATA	SEGMENT
??_R0?AVCCritSec@@@8 DD FLAT:??_7type_info@@6B@		; CCritSec `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCritSec@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BE@?0A@EA@CCritSec@@8
rdata$r	SEGMENT
??_R1BE@?0A@EA@CCritSec@@8 DD FLAT:??_R0?AVCCritSec@@@8	; CCritSec::`RTTI Base Class Descriptor at (20,-1,0,64)'
	DD	00H
	DD	014H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@IMemAllocator@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IMemAllocator@@8 DD FLAT:??_R0?AUIMemAllocator@@@8 ; IMemAllocator::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	01H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2IMemAllocator@@8
rdata$r	SEGMENT
??_R2IMemAllocator@@8 DD FLAT:??_R1A@?0A@EA@IMemAllocator@@8 ; IMemAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IMemAllocator@@8
rdata$r	SEGMENT
??_R3IMemAllocator@@8 DD 00H				; IMemAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMemAllocator@@@8
_DATA	SEGMENT
??_R0?AUIMemAllocator@@@8 DD FLAT:??_7type_info@@6B@	; IMemAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMemAllocator@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IMemAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMemAllocator@@8 DD FLAT:??_R0?AUIMemAllocator@@@8 ; IMemAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IMemAllocatorCallbackTemp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMemAllocatorCallbackTemp@@8 DD FLAT:??_R0?AUIMemAllocatorCallbackTemp@@@8 ; IMemAllocatorCallbackTemp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMemAllocatorCallbackTemp@@8
rdata$r	ENDS
;	COMDAT ??_R2IMemAllocatorCallbackTemp@@8
rdata$r	SEGMENT
??_R2IMemAllocatorCallbackTemp@@8 DD FLAT:??_R1A@?0A@EA@IMemAllocatorCallbackTemp@@8 ; IMemAllocatorCallbackTemp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IMemAllocator@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IMemAllocatorCallbackTemp@@8
rdata$r	SEGMENT
??_R3IMemAllocatorCallbackTemp@@8 DD 00H		; IMemAllocatorCallbackTemp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IMemAllocatorCallbackTemp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMemAllocatorCallbackTemp@@@8
_DATA	SEGMENT
??_R0?AUIMemAllocatorCallbackTemp@@@8 DD FLAT:??_7type_info@@6B@ ; IMemAllocatorCallbackTemp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMemAllocatorCallbackTemp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8 DD FLAT:??_R0?AUIMemAllocatorCallbackTemp@@@8 ; IMemAllocatorCallbackTemp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	02H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMemAllocatorCallbackTemp@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseAllocator@@8
rdata$r	SEGMENT
??_R2CBaseAllocator@@8 DD FLAT:??_R1A@?0A@EA@CBaseAllocator@@8 ; CBaseAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CUnknown@@8
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8
	DD	FLAT:??_R1BA@?0A@EA@IMemAllocator@@8
	DD	FLAT:??_R1BA@?0A@EA@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseAllocator@@8
rdata$r	SEGMENT
??_R3CBaseAllocator@@8 DD 00H				; CBaseAllocator::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2CBaseAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseAllocator@@@8
_DATA	SEGMENT
??_R0?AVCBaseAllocator@@@8 DD FLAT:??_7type_info@@6B@	; CBaseAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseAllocator@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseAllocator@@8 DD FLAT:??_R0?AVCBaseAllocator@@@8 ; CBaseAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMemAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMemAllocator@@8 DD FLAT:??_R0?AVCMemAllocator@@@8 ; CMemAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2CMemAllocator@@8
rdata$r	SEGMENT
??_R2CMemAllocator@@8 DD FLAT:??_R1A@?0A@EA@CMemAllocator@@8 ; CMemAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseAllocator@@8
	DD	FLAT:??_R1A@?0A@EA@CUnknown@@8
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8
	DD	FLAT:??_R1BA@?0A@EA@IMemAllocator@@8
	DD	FLAT:??_R1BA@?0A@EA@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R3CMemAllocator@@8
rdata$r	SEGMENT
??_R3CMemAllocator@@8 DD 00H				; CMemAllocator::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2CMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMemAllocator@@@8
_DATA	SEGMENT
??_R0?AVCMemAllocator@@@8 DD FLAT:??_7type_info@@6B@	; CMemAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMemAllocator@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMemAllocator@@6BCUnknown@@@
rdata$r	SEGMENT
??_R4CMemAllocator@@6BCUnknown@@@ DD 00H		; CMemAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMemAllocator@@@8
	DD	FLAT:??_R3CMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_7CMemAllocator@@6BIMemAllocatorCallbackTemp@@@
CONST	SEGMENT
??_7CMemAllocator@@6BIMemAllocatorCallbackTemp@@@ DD FLAT:??_R4CMemAllocator@@6BIMemAllocatorCallbackTemp@@@ ; CMemAllocator::`vftable'
	DD	FLAT:?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseAllocator@@UAGKXZ
	DD	FLAT:?Release@CBaseAllocator@@UAGKXZ
	DD	FLAT:?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z
	DD	FLAT:?GetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@@Z
	DD	FLAT:?Commit@CBaseAllocator@@UAGJXZ
	DD	FLAT:?Decommit@CBaseAllocator@@UAGJXZ
	DD	FLAT:?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z
	DD	FLAT:?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z
	DD	FLAT:?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z
	DD	FLAT:?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z
CONST	ENDS
;	COMDAT ??_7CMemAllocator@@6BCUnknown@@@
CONST	SEGMENT
??_7CMemAllocator@@6BCUnknown@@@ DD FLAT:??_R4CMemAllocator@@6BCUnknown@@@ ; CMemAllocator::`vftable'
	DD	FLAT:?NonDelegatingQueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?NonDelegatingAddRef@CUnknown@@UAGKXZ
	DD	FLAT:?NonDelegatingRelease@CUnknown@@UAGKXZ
	DD	FLAT:??_ECMemAllocator@@UAEPAXI@Z
	DD	FLAT:?Free@CMemAllocator@@MAEXXZ
	DD	FLAT:?Alloc@CMemAllocator@@MAEJXZ
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CMemAllocator@@QAE@PA_WPAUIUnknown@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_phr$ = 16						; size = 4
??0CMemAllocator@@QAE@PA_WPAUIUnknown@@PAJ@Z PROC	; CMemAllocator::CMemAllocator, COMDAT
; _this$ = ecx
; Line 4898
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	1
	mov	eax, DWORD PTR _phr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUnk$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z ; CBaseAllocator::CBaseAllocator
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMemAllocator@@6BCUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET ??_7CMemAllocator@@6BIMemAllocatorCallbackTemp@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], 0
; Line 4899
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CMemAllocator@@QAE@PA_WPAUIUnknown@@PAJ@Z ENDP	; CMemAllocator::CMemAllocator
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseAllocator::QueryInterface, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 1467
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseAllocator::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseAllocator@@UAGKXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBaseAllocator@@UAGKXZ PROC			; CBaseAllocator::AddRef, COMDAT
; Line 1467
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBaseAllocator@@UAGKXZ ENDP			; CBaseAllocator::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBaseAllocator@@UAGKXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBaseAllocator@@UAGKXZ PROC			; CBaseAllocator::Release, COMDAT
; Line 1467
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBaseAllocator@@UAGKXZ ENDP			; CBaseAllocator::Release
_TEXT	ENDS
PUBLIC	??1CMemAllocator@@UAE@XZ			; CMemAllocator::~CMemAllocator
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMemAllocator@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMemAllocator@@UAEPAXI@Z PROC			; CMemAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMemAllocator@@UAE@XZ		; CMemAllocator::~CMemAllocator
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMemAllocator@@UAEPAXI@Z ENDP			; CMemAllocator::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CMemAllocator@@QAE@PADPAUIUnknown@@PAJ@Z	; CMemAllocator::CMemAllocator
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMemAllocator@@QAE@PADPAUIUnknown@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_phr$ = 16						; size = 4
??0CMemAllocator@@QAE@PADPAUIUnknown@@PAJ@Z PROC	; CMemAllocator::CMemAllocator, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.cpp
; Line 4908
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	1
	mov	eax, DWORD PTR _phr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUnk$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseAllocator@@QAE@PADPAUIUnknown@@PAJHH@Z ; CBaseAllocator::CBaseAllocator
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMemAllocator@@6BCUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET ??_7CMemAllocator@@6BIMemAllocatorCallbackTemp@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], 0
; Line 4909
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CMemAllocator@@QAE@PADPAUIUnknown@@PAJ@Z ENDP	; CMemAllocator::CMemAllocator
_TEXT	ENDS
EXTRN	__imp__GetSystemInfo@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z$0
__ehfuncinfo$?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z
_TEXT	SEGMENT
tv195 = -100						; size = 4
tv86 = -96						; size = 4
$T86867 = -92						; size = 4
$T86866 = -88						; size = 4
$T86865 = -84						; size = 4
$T86864 = -80						; size = 4
_lRemainder$ = -76					; size = 4
_lSize$ = -72						; size = 4
_SysInfo$ = -64						; size = 36
_cObjectLock$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pRequest$ = 12						; size = 4
_pActual$ = 16						; size = 4
?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z PROC ; CMemAllocator::SetProperties, COMDAT
; Line 4920
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 4921
	cmp	DWORD PTR _pActual$[ebp], 0
	jne	SHORT $LN10@SetPropert@3
	mov	eax, -2147467261			; 80004003H
	jmp	$LN11@SetPropert@3
$LN10@SetPropert@3:
; Line 4922
	mov	esi, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _pActual$[ebp]
	push	eax
	call	DWORD PTR __imp__IsBadReadPtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN9@SetPropert@3
	push	4922					; 0000133aH
	push	OFFSET $SG84394
	push	OFFSET $SG84395
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN9@SetPropert@3:
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _pActual$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsBadWritePtr@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN8@SetPropert@3
	push	4922					; 0000133aH
	push	OFFSET $SG84399
	push	OFFSET $SG84400
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN8@SetPropert@3:
; Line 4923
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 16					; 00000010H
	je	SHORT $LN13@SetPropert@3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN14@SetPropert@3
$LN13@SetPropert@3:
	mov	DWORD PTR tv86[ebp], 0
$LN14@SetPropert@3:
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4925
	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _pActual$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 4927
	mov	eax, DWORD PTR _pRequest$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN7@SetPropert@3
	push	4927					; 0000133fH
	push	OFFSET $SG84404
	push	OFFSET $SG84405
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@SetPropert@3:
; Line 4930
	mov	esi, esp
	lea	ecx, DWORD PTR _SysInfo$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetSystemInfo@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4933
	mov	edx, DWORD PTR _pRequest$[ebp]
	mov	eax, DWORD PTR [edx+8]
	neg	eax
	mov	ecx, DWORD PTR _pRequest$[ebp]
	and	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pRequest$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN6@SetPropert@3
; Line 4935
	mov	eax, DWORD PTR _pRequest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG84408
	push	1
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
$LN6@SetPropert@3:
; Line 4939
	mov	edx, DWORD PTR _pRequest$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@SetPropert@3
	mov	eax, DWORD PTR _pRequest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	and	ecx, DWORD PTR _SysInfo$[ebp+28]
	je	SHORT $LN5@SetPropert@3
$LN4@SetPropert@3:
; Line 4941
	mov	edx, DWORD PTR _SysInfo$[ebp+28]
	push	edx
	mov	eax, DWORD PTR _pRequest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG84411
	push	1
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 4942
	mov	DWORD PTR $T86864[ebp], -2147220978	; 8004020eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86864[ebp]
	jmp	$LN11@SetPropert@3
$LN5@SetPropert@3:
; Line 4951
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+80], 1
	jne	SHORT $LN3@SetPropert@3
; Line 4952
	mov	DWORD PTR $T86865[ebp], -2147220977	; 8004020fH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86865[ebp]
	jmp	$LN11@SetPropert@3
$LN3@SetPropert@3:
; Line 4957
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+60]
	jge	SHORT $LN2@SetPropert@3
; Line 4958
	mov	DWORD PTR $T86866[ebp], -2147220976	; 80040210H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86866[ebp]
	jmp	$LN11@SetPropert@3
$LN2@SetPropert@3:
; Line 4966
	mov	edx, DWORD PTR _pRequest$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _pRequest$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _lSize$[ebp], eax
; Line 4967
	mov	ecx, DWORD PTR _pRequest$[ebp]
	mov	eax, DWORD PTR _lSize$[ebp]
	cdq
	idiv	DWORD PTR [ecx+8]
	mov	DWORD PTR _lRemainder$[ebp], edx
; Line 4968
	cmp	DWORD PTR _lRemainder$[ebp], 0
	je	SHORT $LN1@SetPropert@3
; Line 4969
	mov	edx, DWORD PTR _lSize$[ebp]
	sub	edx, DWORD PTR _lRemainder$[ebp]
	mov	eax, DWORD PTR _pRequest$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _lSize$[ebp], edx
$LN1@SetPropert@3:
; Line 4971
	mov	ecx, DWORD PTR _pRequest$[ebp]
	mov	edx, DWORD PTR _lSize$[ebp]
	sub	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv195[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv195[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR _pActual$[ebp]
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 4973
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pRequest$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+56], eax
	mov	ecx, DWORD PTR _pActual$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx], eax
; Line 4974
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pRequest$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+68], eax
	mov	ecx, DWORD PTR _pActual$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+8], eax
; Line 4975
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pRequest$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+72], eax
	mov	ecx, DWORD PTR _pActual$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR [ecx+12], eax
; Line 4977
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 1
; Line 4978
	mov	DWORD PTR $T86867[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86867[ebp]
$LN11@SetPropert@3:
; Line 4979
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@SetPropert@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN20@SetPropert@3:
	DD	2
	DD	$LN19@SetPropert@3
$LN19@SetPropert@3:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN16@SetPropert@3
	DD	-64					; ffffffc0H
	DD	36					; 00000024H
	DD	$LN17@SetPropert@3
$LN17@SetPropert@3:
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN16@SetPropert@3:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetProperties@CMemAllocator@@UAGJPAU_AllocatorProperties@@0@Z ENDP ; CMemAllocator::SetProperties
PUBLIC	?ReallyFree@CMemAllocator@@IAEXXZ		; CMemAllocator::ReallyFree
EXTRN	__imp__VirtualAlloc@16:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@CMemAllocator@@MAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@CMemAllocator@@MAEJXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Alloc@CMemAllocator@@MAEJXZ$1
__ehfuncinfo$?Alloc@CMemAllocator@@MAEJXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Alloc@CMemAllocator@@MAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Alloc@CMemAllocator@@MAEJXZ
_TEXT	SEGMENT
tv238 = -92						; size = 4
tv70 = -88						; size = 4
$T86891 = -84						; size = 4
$T86890 = -80						; size = 4
$T86887 = -76						; size = 4
$T86886 = -72						; size = 4
$T86885 = -68						; size = 4
$T86884 = -64						; size = 4
$T86883 = -60						; size = 4
_pSample$ = -56						; size = 4
_pNext$ = -52						; size = 4
_lRemainder$84446 = -48					; size = 4
_lAlignedSize$ = -44					; size = 4
_hr$ = -36						; size = 4
_lck$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Alloc@CMemAllocator@@MAEJXZ PROC			; CMemAllocator::Alloc, COMDAT
; _this$ = ecx
; Line 4990
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Alloc@CMemAllocator@@MAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4991
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN18@Alloc@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN19@Alloc@2
$LN18@Alloc@2:
	mov	DWORD PTR tv70[ebp], 0
$LN19@Alloc@2:
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 4994
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Alloc@CBaseAllocator@@MAEJXZ		; CBaseAllocator::Alloc
	mov	DWORD PTR _hr$[ebp], eax
; Line 4995
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@Alloc@2
; Line 4996
	mov	edx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T86883[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86883[ebp]
	jmp	$LN16@Alloc@2
$LN15@Alloc@2:
; Line 5000
	cmp	DWORD PTR _hr$[ebp], 1
	jne	SHORT $LN14@Alloc@2
; Line 5001
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+112], 0
	jne	SHORT $LN13@Alloc@2
	push	5001					; 00001389H
	push	OFFSET $SG84436
	push	OFFSET $SG84437
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN13@Alloc@2:
; Line 5002
	mov	DWORD PTR $T86884[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86884[ebp]
	jmp	$LN16@Alloc@2
$LN14@Alloc@2:
; Line 5004
	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN12@Alloc@2
	push	5004					; 0000138cH
	push	OFFSET $SG84441
	push	OFFSET $SG84442
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN12@Alloc@2:
; Line 5007
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+112], 0
	je	SHORT $LN11@Alloc@2
; Line 5008
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallyFree@CMemAllocator@@IAEXXZ	; CMemAllocator::ReallyFree
$LN11@Alloc@2:
; Line 5012
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR _lAlignedSize$[ebp], eax
; Line 5013
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 1
	jle	SHORT $LN10@Alloc@2
; Line 5014
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _lAlignedSize$[ebp]
	cdq
	idiv	DWORD PTR [ecx+84]
	mov	DWORD PTR _lRemainder$84446[ebp], edx
; Line 5015
	cmp	DWORD PTR _lRemainder$84446[ebp], 0
	je	SHORT $LN10@Alloc@2
; Line 5016
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	sub	eax, DWORD PTR _lRemainder$84446[ebp]
	add	eax, DWORD PTR _lAlignedSize$[ebp]
	mov	DWORD PTR _lAlignedSize$[ebp], eax
$LN10@Alloc@2:
; Line 5023
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _lAlignedSize$[ebp]
	cdq
	idiv	DWORD PTR [ecx+84]
	test	edx, edx
	je	SHORT $LN8@Alloc@2
	push	5023					; 0000139fH
	push	OFFSET $SG84449
	push	OFFSET $SG84450
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@Alloc@2:
; Line 5028
	mov	esi, esp
	push	4
	push	4096					; 00001000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	imul	eax, DWORD PTR _lAlignedSize$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], eax
; Line 5030
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+112], 0
	jne	SHORT $LN7@Alloc@2
; Line 5031
	mov	DWORD PTR $T86885[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86885[ebp]
	jmp	$LN16@Alloc@2
$LN7@Alloc@2:
; Line 5034
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _pNext$[ebp], ecx
; Line 5037
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN6@Alloc@2
	push	5037					; 000013adH
	push	OFFSET $SG84458
	push	OFFSET $SG84459
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@Alloc@2:
; Line 5043
	jmp	SHORT $LN5@Alloc@2
$LN4@Alloc@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], ecx
	mov	eax, DWORD PTR _pNext$[ebp]
	add	eax, DWORD PTR _lAlignedSize$[ebp]
	mov	DWORD PTR _pNext$[ebp], eax
$LN5@Alloc@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+76]
	cmp	eax, DWORD PTR [edx+72]
	jge	$LN3@Alloc@2
; Line 5051
	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T86887[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T86887[ebp], 0
	je	SHORT $LN20@Alloc@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNext$[ebp]
	add	ecx, DWORD PTR [eax+88]
	push	ecx
	lea	edx, DWORD PTR _hr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET $SG84467
	mov	ecx, DWORD PTR $T86887[ebp]
	call	??0CMediaSample@@QAE@PA_WPAVCBaseAllocator@@PAJPAEJ@Z ; CMediaSample::CMediaSample
	mov	DWORD PTR tv238[ebp], eax
	jmp	SHORT $LN21@Alloc@2
$LN20@Alloc@2:
	mov	DWORD PTR tv238[ebp], 0
$LN21@Alloc@2:
	mov	ecx, DWORD PTR tv238[ebp]
	mov	DWORD PTR $T86886[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T86886[ebp]
	mov	DWORD PTR _pSample$[ebp], edx
; Line 5053
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@Alloc@2
	push	5053					; 000013bdH
	push	OFFSET $SG84470
	push	OFFSET $SG84471
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Alloc@2:
; Line 5054
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN1@Alloc@2
; Line 5055
	mov	DWORD PTR $T86890[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86890[ebp]
	jmp	SHORT $LN16@Alloc@2
$LN1@Alloc@2:
; Line 5059
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ; CBaseAllocator::CSampleList::Add
; Line 5060
	jmp	$LN4@Alloc@2
$LN3@Alloc@2:
; Line 5062
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
; Line 5063
	mov	DWORD PTR $T86891[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lck$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T86891[ebp]
$LN16@Alloc@2:
; Line 5064
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@Alloc@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN28@Alloc@2:
	DD	2
	DD	$LN27@Alloc@2
$LN27@Alloc@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN24@Alloc@2
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN25@Alloc@2
$LN25@Alloc@2:
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	0
$LN24@Alloc@2:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Alloc@CMemAllocator@@MAEJXZ$0:
	lea	ecx, DWORD PTR _lck$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__unwindfunclet$?Alloc@CMemAllocator@@MAEJXZ$1:
	mov	eax, DWORD PTR $T86887[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Alloc@CMemAllocator@@MAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Alloc@CMemAllocator@@MAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Alloc@CMemAllocator@@MAEJXZ ENDP			; CMemAllocator::Alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Free@CMemAllocator@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@CMemAllocator@@MAEXXZ PROC			; CMemAllocator::Free, COMDAT
; _this$ = ecx
; Line 5078
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 5080
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@CMemAllocator@@MAEXXZ ENDP			; CMemAllocator::Free
_TEXT	ENDS
EXTRN	__imp__VirtualFree@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReallyFree@CMemAllocator@@IAEXXZ
_TEXT	SEGMENT
tv94 = -20						; size = 4
$T86909 = -16						; size = 4
$T86908 = -12						; size = 4
_pSample$ = -8						; size = 4
_this$ = -4						; size = 4
?ReallyFree@CMemAllocator@@IAEXXZ PROC			; CMemAllocator::ReallyFree, COMDAT
; _this$ = ecx
; Line 5087
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 5090
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], eax
	je	SHORT $LN6@ReallyFree
	push	5090					; 000013e2H
	push	OFFSET $SG84485
	push	OFFSET $SG84486
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@ReallyFree:
; Line 5096
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ ; CBaseAllocator::CSampleList::RemoveHead
	mov	DWORD PTR _pSample$[ebp], eax
; Line 5097
	cmp	DWORD PTR _pSample$[ebp], 0
	je	SHORT $LN4@ReallyFree
; Line 5098
	mov	edx, DWORD PTR _pSample$[ebp]
	mov	DWORD PTR $T86909[ebp], edx
	mov	eax, DWORD PTR $T86909[ebp]
	mov	DWORD PTR $T86908[ebp], eax
	cmp	DWORD PTR $T86908[ebp], 0
	je	SHORT $LN10@ReallyFree
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T86908[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T86908[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN11@ReallyFree
$LN10@ReallyFree:
	mov	DWORD PTR tv94[ebp], 0
$LN11@ReallyFree:
; Line 5099
	jmp	SHORT $LN3@ReallyFree
$LN4@ReallyFree:
; Line 5100
	jmp	SHORT $LN5@ReallyFree
$LN3@ReallyFree:
; Line 5102
	jmp	SHORT $LN6@ReallyFree
$LN5@ReallyFree:
; Line 5104
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 0
; Line 5107
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+112], 0
	je	SHORT $LN8@ReallyFree
; Line 5108
	mov	esi, esp
	push	32768					; 00008000H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	call	DWORD PTR __imp__VirtualFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@ReallyFree
	push	5108					; 000013f4H
	push	OFFSET $SG84497
	push	OFFSET $SG84498
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@ReallyFree:
; Line 5109
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], 0
$LN8@ReallyFree:
; Line 5111
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReallyFree@CMemAllocator@@IAEXXZ ENDP			; CMemAllocator::ReallyFree
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMemAllocator@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMemAllocator@@UAE@XZ$0
__ehfuncinfo$??1CMemAllocator@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CMemAllocator@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMemAllocator@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMemAllocator@@UAE@XZ PROC				; CMemAllocator::~CMemAllocator, COMDAT
; _this$ = ecx
; Line 5117
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMemAllocator@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMemAllocator@@6BCUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET ??_7CMemAllocator@@6BIMemAllocatorCallbackTemp@@@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 5118
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	?Decommit@CBaseAllocator@@UAGJXZ	; CBaseAllocator::Decommit
; Line 5119
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallyFree@CMemAllocator@@IAEXXZ	; CMemAllocator::ReallyFree
; Line 5120
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseAllocator@@UAE@XZ		; CBaseAllocator::~CBaseAllocator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMemAllocator@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseAllocator@@UAE@XZ		; CBaseAllocator::~CBaseAllocator
__ehhandler$??1CMemAllocator@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMemAllocator@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMemAllocator@@UAE@XZ ENDP				; CMemAllocator::~CMemAllocator
; Function compile flags: /Odtp /RTCsu
;	COMDAT _AMovieSetupRegisterFilter@12
_TEXT	SEGMENT
_m2$84524 = -12						; size = 4
_m1$84517 = -8						; size = 4
_hr$ = -4						; size = 4
_psetupdata$ = 8					; size = 4
_pIFM$ = 12						; size = 4
_bRegister$ = 16					; size = 4
_AMovieSetupRegisterFilter@12 PROC			; COMDAT
; Line 5130
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5131
	push	OFFSET $SG84507
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 5135
	cmp	DWORD PTR _psetupdata$[ebp], 0
	jne	SHORT $LN15@AMovieSetu
	mov	eax, 1
	jmp	$LN16@AMovieSetu
$LN15@AMovieSetu:
; Line 5142
	push	OFFSET $SG84510
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 5143
	mov	eax, DWORD PTR _psetupdata$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _pIFM$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pIFM$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 5146
	cmp	DWORD PTR _bRegister$[ebp], 0
	je	$LN14@AMovieSetu
; Line 5150
	push	OFFSET $SG84513
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 5153
	mov	esi, esp
	mov	eax, DWORD PTR _psetupdata$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _psetupdata$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _psetupdata$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _pIFM$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pIFM$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 5154
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN14@AMovieSetu
; Line 5158
	push	OFFSET $SG84516
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 5159
	mov	DWORD PTR _m1$84517[ebp], 0
	jmp	SHORT $LN12@AMovieSetu
$LN11@AMovieSetu:
	mov	ecx, DWORD PTR _m1$84517[ebp]
	add	ecx, 1
	mov	DWORD PTR _m1$84517[ebp], ecx
$LN12@AMovieSetu:
	mov	edx, DWORD PTR _psetupdata$[ebp]
	mov	eax, DWORD PTR _m1$84517[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jae	$LN14@AMovieSetu
; Line 5168
	mov	ecx, DWORD PTR _m1$84517[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _psetupdata$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+ecx+24]
	push	ecx
	mov	edx, DWORD PTR _m1$84517[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _psetupdata$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+edx+20]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _m1$84517[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _psetupdata$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+eax+16]
	push	eax
	mov	ecx, DWORD PTR _m1$84517[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _psetupdata$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx+12]
	push	ecx
	mov	edx, DWORD PTR _m1$84517[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _psetupdata$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+edx+8]
	push	edx
	mov	eax, DWORD PTR _m1$84517[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _psetupdata$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	mov	ecx, DWORD PTR _m1$84517[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _psetupdata$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, DWORD PTR _psetupdata$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _pIFM$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pIFM$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 5170
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN9@AMovieSetu
; Line 5174
	push	OFFSET $SG84523
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 5175
	mov	DWORD PTR _m2$84524[ebp], 0
	jmp	SHORT $LN8@AMovieSetu
$LN7@AMovieSetu:
	mov	edx, DWORD PTR _m2$84524[ebp]
	add	edx, 1
	mov	DWORD PTR _m2$84524[ebp], edx
$LN8@AMovieSetu:
	mov	eax, DWORD PTR _m1$84517[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _psetupdata$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _m2$84524[ebp]
	cmp	ecx, DWORD PTR [edx+eax+28]
	jae	$LN6@AMovieSetu
; Line 5180
	mov	edx, DWORD PTR _m1$84517[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _psetupdata$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+edx+32]
	mov	eax, DWORD PTR _m2$84524[ebp]
	mov	ecx, DWORD PTR [edx+eax*8+4]
	mov	esi, esp
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _m1$84517[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _psetupdata$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+edx+32]
	mov	eax, DWORD PTR _m2$84524[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _m1$84517[ebp]
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _psetupdata$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, DWORD PTR _psetupdata$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _pIFM$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pIFM$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 5181
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@AMovieSetu
	jmp	SHORT $LN6@AMovieSetu
$LN5@AMovieSetu:
; Line 5182
	jmp	$LN7@AMovieSetu
$LN6@AMovieSetu:
; Line 5183
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@AMovieSetu
	jmp	SHORT $LN14@AMovieSetu
$LN9@AMovieSetu:
; Line 5185
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@AMovieSetu
	jmp	SHORT $LN14@AMovieSetu
$LN3@AMovieSetu:
; Line 5186
	jmp	$LN11@AMovieSetu
$LN14@AMovieSetu:
; Line 5195
	cmp	DWORD PTR _hr$[ebp], -2147024894	; 80070002H
	jne	SHORT $LN2@AMovieSetu
; Line 5196
	xor	eax, eax
	jmp	SHORT $LN16@AMovieSetu
; Line 5197
	jmp	SHORT $LN16@AMovieSetu
$LN2@AMovieSetu:
; Line 5198
	mov	eax, DWORD PTR _hr$[ebp]
$LN16@AMovieSetu:
; Line 5199
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_AMovieSetupRegisterFilter@12 ENDP
_TEXT	ENDS
EXTRN	??0CBaseList@@QAE@PA_W@Z:PROC			; CBaseList::CBaseList
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CGenericList@VCBasePin@@@@QAE@PA_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pName$ = 8						; size = 4
??0?$CGenericList@VCBasePin@@@@QAE@PA_W@Z PROC		; CGenericList<CBasePin>::CGenericList<CBasePin>, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxlist.h
; Line 505
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseList@@QAE@PA_W@Z		; CBaseList::CBaseList
; Line 506
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CGenericList@VCBasePin@@@@QAE@PA_W@Z ENDP		; CGenericList<CBasePin>::CGenericList<CBasePin>
_TEXT	ENDS
EXTRN	?AddTailI@CBaseList@@IAEPAU__POSITION@@PAX@Z:PROC ; CBaseList::AddTailI
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddTail@?$CGenericList@VCBasePin@@@@QAEPAU__POSITION@@PAVCBasePin@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?AddTail@?$CGenericList@VCBasePin@@@@QAEPAU__POSITION@@PAVCBasePin@@@Z PROC ; CGenericList<CBasePin>::AddTail, COMDAT
; _this$ = ecx
; Line 525
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddTailI@CBaseList@@IAEPAU__POSITION@@PAX@Z ; CBaseList::AddTailI
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddTail@?$CGenericList@VCBasePin@@@@QAEPAU__POSITION@@PAVCBasePin@@@Z ENDP ; CGenericList<CBasePin>::AddTail
_TEXT	ENDS
EXTRN	?AddTail@CBaseList@@QAEHPAV1@@Z:PROC		; CBaseList::AddTail
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddTail@?$CGenericList@VCBasePin@@@@QAEHPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pList$ = 8						; size = 4
?AddTail@?$CGenericList@VCBasePin@@@@QAEHPAV1@@Z PROC	; CGenericList<CBasePin>::AddTail, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pList$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddTail@CBaseList@@QAEHPAV1@@Z		; CBaseList::AddTail
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddTail@?$CGenericList@VCBasePin@@@@QAEHPAV1@@Z ENDP	; CGenericList<CBasePin>::AddTail
_TEXT	ENDS
EXTRN	?FindI@CBaseList@@IBEPAU__POSITION@@PAX@Z:PROC	; CBaseList::FindI
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Find@?$CGenericList@VCBasePin@@@@QBEPAU__POSITION@@PAVCBasePin@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pObj$ = 8						; size = 4
?Find@?$CGenericList@VCBasePin@@@@QBEPAU__POSITION@@PAVCBasePin@@@Z PROC ; CGenericList<CBasePin>::Find, COMDAT
; _this$ = ecx
; Line 534
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindI@CBaseList@@IBEPAU__POSITION@@PAX@Z ; CBaseList::FindI
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@?$CGenericList@VCBasePin@@@@QBEPAU__POSITION@@PAVCBasePin@@@Z ENDP ; CGenericList<CBasePin>::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$QzCComPtr@UIPinConnection@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$QzCComPtr@UIPinConnection@@@@QAE@XZ PROC		; QzCComPtr<IPinConnection>::QzCComPtr<IPinConnection>, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 498
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$QzCComPtr@UIPinConnection@@@@QAE@XZ ENDP		; QzCComPtr<IPinConnection>::QzCComPtr<IPinConnection>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$QzCComPtr@UIPinConnection@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$QzCComPtr@UIPinConnection@@@@QAE@XZ PROC		; QzCComPtr<IPinConnection>::~QzCComPtr<IPinConnection>, COMDAT
; _this$ = ecx
; Line 509
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@QzCComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@QzCComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$QzCComPtr@UIPinConnection@@@@QAE@XZ ENDP		; QzCComPtr<IPinConnection>::~QzCComPtr<IPinConnection>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ PROC ; QzCComPtr<IPinConnection>::operator IPinConnection *, COMDAT
; _this$ = ecx
; Line 511
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ ENDP ; QzCComPtr<IPinConnection>::operator IPinConnection *
_TEXT	ENDS
PUBLIC	??_C@_1BA@GOGFODJF@?$AAp?$AA?$DN?$AA?$DN?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ ; `string'
;	COMDAT ??_C@_1BA@GOGFODJF@?$AAp?$AA?$DN?$AA?$DN?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@GOGFODJF@?$AAp?$AA?$DN?$AA?$DN?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'p'
	DB	00H, '=', 00H, '=', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
CONST	SEGMENT
??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'D', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'P', 00H, 'o', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'e', 00H
	DB	's', 00H, '\', 00H, 'w', 00H, 'x', 00H, 'u', 00H, 't', 00H, 'i'
	DB	00H, 'l', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??I?$QzCComPtr@UIPinConnection@@@@QAEPAPAUIPinConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$QzCComPtr@UIPinConnection@@@@QAEPAPAUIPinConnection@@XZ PROC ; QzCComPtr<IPinConnection>::operator&, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@operator
	push	515					; 00000203H
	push	OFFSET ??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1BA@GOGFODJF@?$AAp?$AA?$DN?$AA?$DN?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@operator:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$QzCComPtr@UIPinConnection@@@@QAEPAPAUIPinConnection@@XZ ENDP ; QzCComPtr<IPinConnection>::operator&
_TEXT	ENDS
PUBLIC	??_C@_1BA@CCCCEONE@?$AAp?$AA?$CB?$AA?$DN?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BA@CCCCEONE@?$AAp?$AA?$CB?$AA?$DN?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@CCCCEONE@?$AAp?$AA?$CB?$AA?$DN?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'p'
	DB	00H, '!', 00H, '=', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??C?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ PROC ; QzCComPtr<IPinConnection>::operator->, COMDAT
; _this$ = ecx
; Line 516
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@operator@2
	push	516					; 00000204H
	push	OFFSET ??_C@_1HC@NPKKOGCJ@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1BA@CCCCEONE@?$AAp?$AA?$CB?$AA?$DN?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@operator@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$QzCComPtr@UIPinConnection@@@@QAEPAUIPinConnection@@XZ ENDP ; QzCComPtr<IPinConnection>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CDynamicOutputPin@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CDynamicOutputPin@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CDynamicOutputPin::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z ; CDynamicOutputPin::QueryInterface
?QueryInterface@CDynamicOutputPin@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CDynamicOutputPin::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CDynamicOutputPin@@WJI@AGKXZ
_TEXT	SEGMENT
?Release@CDynamicOutputPin@@WJI@AGKXZ PROC		; [thunk]:CDynamicOutputPin::Release`adjustor{152}', COMDAT
	sub	DWORD PTR [esp+4], 152			; 00000098H
	jmp	?Release@CDynamicOutputPin@@UAGKXZ	; CDynamicOutputPin::Release
?Release@CDynamicOutputPin@@WJI@AGKXZ ENDP		; [thunk]:CDynamicOutputPin::Release`adjustor{152}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CDynamicOutputPin@@W3AGKXZ
_TEXT	SEGMENT
?Release@CDynamicOutputPin@@W3AGKXZ PROC		; [thunk]:CDynamicOutputPin::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CDynamicOutputPin@@UAGKXZ	; CDynamicOutputPin::Release
?Release@CDynamicOutputPin@@W3AGKXZ ENDP		; [thunk]:CDynamicOutputPin::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDynamicOutputPin@@WJI@AGKXZ
_TEXT	SEGMENT
?AddRef@CDynamicOutputPin@@WJI@AGKXZ PROC		; [thunk]:CDynamicOutputPin::AddRef`adjustor{152}', COMDAT
	sub	DWORD PTR [esp+4], 152			; 00000098H
	jmp	?AddRef@CDynamicOutputPin@@UAGKXZ	; CDynamicOutputPin::AddRef
?AddRef@CDynamicOutputPin@@WJI@AGKXZ ENDP		; [thunk]:CDynamicOutputPin::AddRef`adjustor{152}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CDynamicOutputPin@@WJI@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CDynamicOutputPin@@WJI@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CDynamicOutputPin::QueryInterface`adjustor{152}', COMDAT
	sub	DWORD PTR [esp+4], 152			; 00000098H
	jmp	?QueryInterface@CDynamicOutputPin@@UAGJABU_GUID@@PAPAX@Z ; CDynamicOutputPin::QueryInterface
?QueryInterface@CDynamicOutputPin@@WJI@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CDynamicOutputPin::QueryInterface`adjustor{152}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDynamicOutputPin@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CDynamicOutputPin@@W3AGKXZ PROC			; [thunk]:CDynamicOutputPin::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CDynamicOutputPin@@UAGKXZ	; CDynamicOutputPin::AddRef
?AddRef@CDynamicOutputPin@@W3AGKXZ ENDP			; [thunk]:CDynamicOutputPin::AddRef`adjustor{4}'
_TEXT	ENDS
END
