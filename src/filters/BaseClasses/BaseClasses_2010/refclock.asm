; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Downloads\MediaPoint\src\filters\BaseClasses\refclock.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
CONST	SEGMENT
$SG81570 DB	'.', 00H, '.', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81571 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'h', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81573 DB	'.', 00H, '.', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81574 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'p', 00H, 'S', 00H, 'c', 00H, 'h', 00H, 'e', 00H
	DB	'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, ')', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81593 DB	'.', 00H, '.', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81594 DB	'm', 00H, '_', 00H, 'p', 00H, 'S', 00H, 'c', 00H, 'h', 00H
	DB	'e', 00H, 'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H, 00H, 00H
$SG81608 DB	'.', 00H, '.', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG81609 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'm'
	DB	00H, '_', 00H, 'p', 00H, 'S', 00H, 'c', 00H, 'h', 00H, 'e', 00H
	DB	'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, ')', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81638 DB	'.', 00H, '.', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG81639 DB	'W', 00H, 'A', 00H, 'I', 00H, 'T', 00H, '_', 00H, 'T', 00H
	DB	'I', 00H, 'M', 00H, 'E', 00H, 'O', 00H, 'U', 00H, 'T', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'W', 00H, 'a', 00H, 'i', 00H
	DB	't', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'S', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 'l', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '(', 00H, 'H', 00H, 'A', 00H, 'N'
	DB	00H, 'D', 00H, 'L', 00H, 'E', 00H, '(', 00H, 'h', 00H, 'E', 00H
	DB	'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, ',', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H
$SG81683 DB	'B', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 'T', 00H, 'i', 00H
	DB	'm', 00H, 'e', 00H, ' ', 00H, 'D', 00H, 'e', 00H, 'l', 00H, 't'
	DB	00H, 'a', 00H, 00H, 00H
	ORG $+6
$SG81691 DB	'S', 00H, 'e', 00H, 'v', 00H, ' ', 00H, '%', 00H, '2', 00H
	DB	'i', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'S', 00H, 'y', 00H, 's'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'C', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, ':', 00H, ':', 00H, 'S', 00H, 'e', 00H, 't'
	DB	00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'D', 00H, 'e', 00H
	DB	'l', 00H, 't', 00H, 'a', 00H, '(', 00H, '%', 00H, '8', 00H, 'l'
	DB	00H, 'd', 00H, ' ', 00H, 'u', 00H, 's', 00H, ')', 00H, ' ', 00H
	DB	'%', 00H, 'l', 00H, 'u', 00H, ' ', 00H, '-', 00H, '>', 00H, ' '
	DB	00H, '%', 00H, 'l', 00H, 'u', 00H, ' ', 00H, 'm', 00H, 's', 00H
	DB	'.', 00H, 00H, 00H
$SG81706 DB	'C', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'R', 00H
	DB	'e', 00H, 'f', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, ':', 00H, ':', 00H, 'A', 00H, 'd', 00H, 'v', 00H, 'i', 00H
	DB	's', 00H, 'e', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, '(', 00H, ')', 00H, ' ', 00H, 'D', 00H, 'e', 00H
	DB	'l', 00H, 'a', 00H, 'y', 00H, ':', 00H, ' ', 00H, '%', 00H, 'l'
	DB	00H, 'u', 00H, ' ', 00H, 'm', 00H, 's', 00H, 00H, 00H
$SG81709 DB	'C', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'R', 00H
	DB	'e', 00H, 'f', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, ':', 00H, ':', 00H, 'A', 00H, 'd', 00H, 'v', 00H, 'i', 00H
	DB	's', 00H, 'e', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, '(', 00H, ')', 00H, ' ', 00H, 'W', 00H, 'o', 00H
	DB	'k', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 'l', 00H, 'u', 00H, ' ', 00H, 'm', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG81713 DB	'.', 00H, '.', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81714 DB	'l', 00H, 'l', 00H, 'W', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	_==@8
PUBLIC	?NonDelegatingQueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z ; CBaseReferenceClock::NonDelegatingQueryInterface
EXTRN	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z:PROC ; CUnknown::NonDelegatingQueryInterface
EXTRN	_GetInterface@8:PROC
EXTRN	_IID_IReferenceClock:BYTE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\downloads\mediapoint\src\filters\baseclasses\refclock.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ?NonDelegatingQueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseReferenceClock::NonDelegatingQueryInterface, COMDAT
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 25
	push	OFFSET _IID_IReferenceClock
	mov	eax, DWORD PTR _riid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@NonDelegat
; Line 27
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN5@NonDelegat
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN6@NonDelegat
$LN5@NonDelegat:
	mov	DWORD PTR tv77[ebp], 0
$LN6@NonDelegat:
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	call	_GetInterface@8
	mov	DWORD PTR _hr$[ebp], eax
; Line 29
	jmp	SHORT $LN1@NonDelegat
$LN2@NonDelegat:
; Line 31
	mov	ecx, DWORD PTR _ppv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z ; CUnknown::NonDelegatingQueryInterface
	mov	DWORD PTR _hr$[ebp], eax
$LN1@NonDelegat:
; Line 33
	mov	eax, DWORD PTR _hr$[ebp]
; Line 34
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseReferenceClock::NonDelegatingQueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	??1CUnknown@@UAE@XZ				; CUnknown::~CUnknown
PUBLIC	?GetEvent@CAMSchedule@@QBEPAXXZ			; CAMSchedule::GetEvent
PUBLIC	?TriggerThread@CBaseReferenceClock@@QAEXXZ	; CBaseReferenceClock::TriggerThread
PUBLIC	??_7CBaseReferenceClock@@6BIReferenceClock@@@	; CBaseReferenceClock::`vftable'
PUBLIC	??_7CBaseReferenceClock@@6BCUnknown@@@		; CBaseReferenceClock::`vftable'
PUBLIC	??1CBaseReferenceClock@@MAE@XZ			; CBaseReferenceClock::~CBaseReferenceClock
PUBLIC	??_R4CBaseReferenceClock@@6BCUnknown@@@		; CBaseReferenceClock::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseReferenceClock@@@8			; CBaseReferenceClock `RTTI Type Descriptor'
PUBLIC	??_R3CBaseReferenceClock@@8			; CBaseReferenceClock::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseReferenceClock@@8			; CBaseReferenceClock::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseReferenceClock@@8		; CBaseReferenceClock::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CUnknown@@8			; CUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCUnknown@@@8				; CUnknown `RTTI Type Descriptor'
PUBLIC	??_R3CUnknown@@8				; CUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUnknown@@8				; CUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INonDelegatingUnknown@@8		; INonDelegatingUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUINonDelegatingUnknown@@@8		; INonDelegatingUnknown `RTTI Type Descriptor'
PUBLIC	??_R3INonDelegatingUnknown@@8			; INonDelegatingUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INonDelegatingUnknown@@8			; INonDelegatingUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCBaseObject@@@8				; CBaseObject `RTTI Type Descriptor'
PUBLIC	??_R3CBaseObject@@8				; CBaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseObject@@8				; CBaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@IReferenceClock@@8		; IReferenceClock::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AUIReferenceClock@@@8			; IReferenceClock `RTTI Type Descriptor'
PUBLIC	??_R3IReferenceClock@@8				; IReferenceClock::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IReferenceClock@@8				; IReferenceClock::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IReferenceClock@@8		; IReferenceClock::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1BA@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R1BE@?0A@EA@CCritSec@@8			; CCritSec::`RTTI Base Class Descriptor at (20,-1,0,64)'
PUBLIC	??_R0?AVCCritSec@@@8				; CCritSec `RTTI Type Descriptor'
PUBLIC	??_R3CCritSec@@8				; CCritSec::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCritSec@@8				; CCritSec::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCritSec@@8			; CCritSec::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetPrivateTime@CBaseReferenceClock@@UAE_JXZ	; CBaseReferenceClock::GetPrivateTime
PUBLIC	??_R4CBaseReferenceClock@@6BIReferenceClock@@@	; CBaseReferenceClock::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z ; CBaseReferenceClock::QueryInterface
PUBLIC	?AddRef@CBaseReferenceClock@@UAGKXZ		; CBaseReferenceClock::AddRef
PUBLIC	?Release@CBaseReferenceClock@@UAGKXZ		; CBaseReferenceClock::Release
PUBLIC	?GetTime@CBaseReferenceClock@@UAGJPA_J@Z	; CBaseReferenceClock::GetTime
PUBLIC	?AdviseTime@CBaseReferenceClock@@UAGJ_J0KPAK@Z	; CBaseReferenceClock::AdviseTime
PUBLIC	?AdvisePeriodic@CBaseReferenceClock@@UAGJ_J0KPAK@Z ; CBaseReferenceClock::AdvisePeriodic
PUBLIC	?Unadvise@CBaseReferenceClock@@UAGJK@Z		; CBaseReferenceClock::Unadvise
EXTRN	??1CCritSec@@QAE@XZ:PROC			; CCritSec::~CCritSec
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	?DumpLinkedList@CAMSchedule@@QAEXXZ:PROC	; CAMSchedule::DumpLinkedList
EXTRN	__imp__timeEndPeriod@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?NonDelegatingAddRef@CUnknown@@UAGKXZ:PROC	; CUnknown::NonDelegatingAddRef
EXTRN	?NonDelegatingRelease@CUnknown@@UAGKXZ:PROC	; CUnknown::NonDelegatingRelease
EXTRN	??_ECBaseReferenceClock@@MAEPAXI@Z:PROC		; CBaseReferenceClock::`vector deleting destructor'
;	COMDAT ??_R4CBaseReferenceClock@@6BIReferenceClock@@@
; File c:\downloads\mediapoint\src\filters\baseclasses\refclock.cpp
rdata$r	SEGMENT
??_R4CBaseReferenceClock@@6BIReferenceClock@@@ DD 00H	; CBaseReferenceClock::`RTTI Complete Object Locator'
	DD	010H
	DD	00H
	DD	FLAT:??_R0?AVCBaseReferenceClock@@@8
	DD	FLAT:??_R3CBaseReferenceClock@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCritSec@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCritSec@@8 DD FLAT:??_R0?AVCCritSec@@@8	; CCritSec::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R2CCritSec@@8
rdata$r	SEGMENT
??_R2CCritSec@@8 DD FLAT:??_R1A@?0A@EA@CCritSec@@8	; CCritSec::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCritSec@@8
rdata$r	SEGMENT
??_R3CCritSec@@8 DD 00H					; CCritSec::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCritSec@@@8
_DATA	SEGMENT
??_R0?AVCCritSec@@@8 DD FLAT:??_7type_info@@6B@		; CCritSec `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCritSec@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BE@?0A@EA@CCritSec@@8
rdata$r	SEGMENT
??_R1BE@?0A@EA@CCritSec@@8 DD FLAT:??_R0?AVCCritSec@@@8	; CCritSec::`RTTI Base Class Descriptor at (20,-1,0,64)'
	DD	00H
	DD	014H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IReferenceClock@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IReferenceClock@@8 DD FLAT:??_R0?AUIReferenceClock@@@8 ; IReferenceClock::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IReferenceClock@@8
rdata$r	ENDS
;	COMDAT ??_R2IReferenceClock@@8
rdata$r	SEGMENT
??_R2IReferenceClock@@8 DD FLAT:??_R1A@?0A@EA@IReferenceClock@@8 ; IReferenceClock::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IReferenceClock@@8
rdata$r	SEGMENT
??_R3IReferenceClock@@8 DD 00H				; IReferenceClock::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IReferenceClock@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIReferenceClock@@@8
_DATA	SEGMENT
??_R0?AUIReferenceClock@@@8 DD FLAT:??_7type_info@@6B@	; IReferenceClock `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIReferenceClock@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@IReferenceClock@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IReferenceClock@@8 DD FLAT:??_R0?AUIReferenceClock@@@8 ; IReferenceClock::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	01H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IReferenceClock@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseObject@@8
rdata$r	SEGMENT
??_R2CBaseObject@@8 DD FLAT:??_R1A@?0A@EA@CBaseObject@@8 ; CBaseObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseObject@@8
rdata$r	SEGMENT
??_R3CBaseObject@@8 DD 00H				; CBaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseObject@@@8
_DATA	SEGMENT
??_R0?AVCBaseObject@@@8 DD FLAT:??_7type_info@@6B@	; CBaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R13?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R2INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R2INonDelegatingUnknown@@8 DD FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8 ; INonDelegatingUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R3INonDelegatingUnknown@@8 DD 00H			; INonDelegatingUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUINonDelegatingUnknown@@@8
_DATA	SEGMENT
??_R0?AUINonDelegatingUnknown@@@8 DD FLAT:??_7type_info@@6B@ ; INonDelegatingUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUINonDelegatingUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INonDelegatingUnknown@@8 DD FLAT:??_R0?AUINonDelegatingUnknown@@@8 ; INonDelegatingUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2CUnknown@@8
rdata$r	SEGMENT
??_R2CUnknown@@8 DD FLAT:??_R1A@?0A@EA@CUnknown@@8	; CUnknown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CUnknown@@8
rdata$r	SEGMENT
??_R3CUnknown@@8 DD 00H					; CUnknown::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCUnknown@@@8
_DATA	SEGMENT
??_R0?AVCUnknown@@@8 DD FLAT:??_7type_info@@6B@		; CUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUnknown@@8 DD FLAT:??_R0?AVCUnknown@@@8	; CUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseReferenceClock@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseReferenceClock@@8 DD FLAT:??_R0?AVCBaseReferenceClock@@@8 ; CBaseReferenceClock::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseReferenceClock@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseReferenceClock@@8
rdata$r	SEGMENT
??_R2CBaseReferenceClock@@8 DD FLAT:??_R1A@?0A@EA@CBaseReferenceClock@@8 ; CBaseReferenceClock::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CUnknown@@8
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BA@?0A@EA@IReferenceClock@@8
	DD	FLAT:??_R1BA@?0A@EA@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseReferenceClock@@8
rdata$r	SEGMENT
??_R3CBaseReferenceClock@@8 DD 00H			; CBaseReferenceClock::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2CBaseReferenceClock@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseReferenceClock@@@8
_DATA	SEGMENT
??_R0?AVCBaseReferenceClock@@@8 DD FLAT:??_7type_info@@6B@ ; CBaseReferenceClock `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseReferenceClock@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBaseReferenceClock@@6BCUnknown@@@
rdata$r	SEGMENT
??_R4CBaseReferenceClock@@6BCUnknown@@@ DD 00H		; CBaseReferenceClock::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseReferenceClock@@@8
	DD	FLAT:??_R3CBaseReferenceClock@@8
rdata$r	ENDS
;	COMDAT ??_7CBaseReferenceClock@@6BIReferenceClock@@@
CONST	SEGMENT
??_7CBaseReferenceClock@@6BIReferenceClock@@@ DD FLAT:??_R4CBaseReferenceClock@@6BIReferenceClock@@@ ; CBaseReferenceClock::`vftable'
	DD	FLAT:?QueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseReferenceClock@@UAGKXZ
	DD	FLAT:?Release@CBaseReferenceClock@@UAGKXZ
	DD	FLAT:?GetTime@CBaseReferenceClock@@UAGJPA_J@Z
	DD	FLAT:?AdviseTime@CBaseReferenceClock@@UAGJ_J0KPAK@Z
	DD	FLAT:?AdvisePeriodic@CBaseReferenceClock@@UAGJ_J0KPAK@Z
	DD	FLAT:?Unadvise@CBaseReferenceClock@@UAGJK@Z
CONST	ENDS
;	COMDAT ??_7CBaseReferenceClock@@6BCUnknown@@@
CONST	SEGMENT
??_7CBaseReferenceClock@@6BCUnknown@@@ DD FLAT:??_R4CBaseReferenceClock@@6BCUnknown@@@ ; CBaseReferenceClock::`vftable'
	DD	FLAT:?NonDelegatingQueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?NonDelegatingAddRef@CUnknown@@UAGKXZ
	DD	FLAT:?NonDelegatingRelease@CUnknown@@UAGKXZ
	DD	FLAT:??_ECBaseReferenceClock@@MAEPAXI@Z
	DD	FLAT:?GetPrivateTime@CBaseReferenceClock@@UAE_JXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBaseReferenceClock@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseReferenceClock@@MAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBaseReferenceClock@@MAE@XZ$1
__ehfuncinfo$??1CBaseReferenceClock@@MAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CBaseReferenceClock@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseReferenceClock@@MAE@XZ
_TEXT	SEGMENT
tv153 = -28						; size = 4
$T82066 = -24						; size = 4
$T82065 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseReferenceClock@@MAE@XZ PROC			; CBaseReferenceClock::~CBaseReferenceClock, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseReferenceClock@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBaseReferenceClock@@6BCUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET ??_7CBaseReferenceClock@@6BIReferenceClock@@@
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 39
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+88], 0
	je	SHORT $LN4@CBaseRefer
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	DWORD PTR __imp__timeEndPeriod@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CBaseRefer:
; Line 41
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+100]
	call	?DumpLinkedList@CAMSchedule@@QAEXXZ	; CAMSchedule::DumpLinkedList
; Line 43
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	$LN5@CBaseRefer
; Line 45
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 1
; Line 46
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TriggerThread@CBaseReferenceClock@@QAEXXZ ; CBaseReferenceClock::TriggerThread
; Line 47
	mov	esi, esp
	push	-1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 48
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@CBaseRefer
	push	48					; 00000030H
	push	OFFSET $SG81570
	push	OFFSET $SG81571
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseRefer:
; Line 49
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
; Line 50
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?GetEvent@CAMSchedule@@QBEPAXXZ		; CAMSchedule::GetEvent
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@CBaseRefer
	push	50					; 00000032H
	push	OFFSET $SG81573
	push	OFFSET $SG81574
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CBaseRefer:
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR $T82066[ebp], eax
	mov	ecx, DWORD PTR $T82066[ebp]
	mov	DWORD PTR $T82065[ebp], ecx
	cmp	DWORD PTR $T82065[ebp], 0
	je	SHORT $LN7@CBaseRefer
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T82065[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T82065[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN5@CBaseRefer
$LN7@CBaseRefer:
	mov	DWORD PTR tv153[ebp], 0
$LN5@CBaseRefer:
; Line 53
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseReferenceClock@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__unwindfunclet$??1CBaseReferenceClock@@MAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??1CBaseReferenceClock@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseReferenceClock@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseReferenceClock@@MAE@XZ ENDP			; CBaseReferenceClock::~CBaseReferenceClock
EXTRN	??1CBaseObject@@QAE@XZ:PROC			; CBaseObject::~CBaseObject
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CUnknown@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CUnknown@@UAE@XZ PROC				; CUnknown::~CUnknown, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\combase.h
; Line 212
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBaseObject@@QAE@XZ			; CBaseObject::~CBaseObject
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CUnknown@@UAE@XZ ENDP				; CUnknown::~CUnknown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetEvent@CAMSchedule@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEvent@CAMSchedule@@QBEPAXXZ PROC			; CAMSchedule::GetEvent, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\dsschedule.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+124]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEvent@CAMSchedule@@QBEPAXXZ ENDP			; CAMSchedule::GetEvent
_TEXT	ENDS
PUBLIC	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ		; CUnknown::GetOwner
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseReferenceClock::QueryInterface, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\refclock.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBaseReferenceClock@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseReferenceClock::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ PROC		; CUnknown::GetOwner, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\combase.h
; Line 224
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 226
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ ENDP		; CUnknown::GetOwner
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseReferenceClock@@UAGKXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBaseReferenceClock@@UAGKXZ PROC		; CBaseReferenceClock::AddRef, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\refclock.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBaseReferenceClock@@UAGKXZ ENDP		; CBaseReferenceClock::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBaseReferenceClock@@UAGKXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBaseReferenceClock@@UAGKXZ PROC		; CBaseReferenceClock::Release, COMDAT
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBaseReferenceClock@@UAGKXZ ENDP		; CBaseReferenceClock::Release
_TEXT	ENDS
PUBLIC	??_C@_1EE@JNLKNNBF@?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AAm?$AA_?$AAp?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1HG@CFPGEGJN@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ ; `string'
EXTRN	__imp__SetEvent@4:PROC
;	COMDAT ??_C@_1EE@JNLKNNBF@?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AAm?$AA_?$AAp?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1EE@JNLKNNBF@?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AAm?$AA_?$AAp?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, 'm', 00H, '_', 00H, 'p', 00H, 'S', 00H, 'c'
	DB	00H, 'h', 00H, 'e', 00H, 'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '(', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@CFPGEGJN@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
CONST	SEGMENT
??_C@_1HG@CFPGEGJN@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'D', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'P', 00H, 'o', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'e', 00H
	DB	's', 00H, '\', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?TriggerThread@CBaseReferenceClock@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TriggerThread@CBaseReferenceClock@@QAEXXZ PROC		; CBaseReferenceClock::TriggerThread, COMDAT
; _this$ = ecx
; Line 152
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 153
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetEvent@CAMSchedule@@QBEPAXXZ		; CAMSchedule::GetEvent
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@TriggerThr
	push	153					; 00000099H
	push	OFFSET ??_C@_1HG@CFPGEGJN@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1EE@JNLKNNBF@?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AAm?$AA_?$AAp?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@TriggerThr:
; Line 154
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?TriggerThread@CBaseReferenceClock@@QAEXXZ ENDP		; CBaseReferenceClock::TriggerThread
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBaseReferenceClock@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBaseReferenceClock@@MAEPAXI@Z PROC			; CBaseReferenceClock::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseReferenceClock@@MAE@XZ		; CBaseReferenceClock::~CBaseReferenceClock
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBaseReferenceClock@@MAEPAXI@Z ENDP			; CBaseReferenceClock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?AdviseThreadFunction@CBaseReferenceClock@@CGKPAX@Z ; CBaseReferenceClock::AdviseThreadFunction
PUBLIC	??0IReferenceClock@@QAE@XZ			; IReferenceClock::IReferenceClock
PUBLIC	??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z ; CBaseReferenceClock::CBaseReferenceClock
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__timeBeginPeriod@4:PROC
EXTRN	__imp__timeGetDevCaps@8:PROC
EXTRN	??0CAMSchedule@@QAE@PAX@Z:PROC			; CAMSchedule::CAMSchedule
EXTRN	__imp__CreateEventW@16:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0CCritSec@@QAE@XZ:PROC			; CCritSec::CCritSec
EXTRN	??0CUnknown@@QAE@PB_WPAUIUnknown@@@Z:PROC	; CUnknown::CUnknown
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\refclock.cpp
xdata$x	SEGMENT
__unwindtable$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z$2
__ehfuncinfo$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z
_TEXT	SEGMENT
tv206 = -76						; size = 4
tv167 = -72						; size = 4
tv153 = -68						; size = 4
tv154 = -64						; size = 4
$T82110 = -60						; size = 4
$T82109 = -56						; size = 4
$T82102 = -52						; size = 4
$T82101 = -48						; size = 4
_ThreadID$81600 = -40					; size = 4
_tc$81598 = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pName$ = 8						; size = 4
_pUnk$ = 12						; size = 4
_phr$ = 16						; size = 4
_pShed$ = 20						; size = 4
??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z PROC ; CBaseReferenceClock::CBaseReferenceClock, COMDAT
; _this$ = ecx
; Line 65
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUnknown@@QAE@PB_WPAUIUnknown@@@Z	; CUnknown::CUnknown
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0IReferenceClock@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CBaseReferenceClock@@6BCUnknown@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], OFFSET ??_7CBaseReferenceClock@@6BIReferenceClock@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 0
	mov	DWORD PTR [ecx+76], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0
	cmp	DWORD PTR _pShed$[ebp], 0
	je	SHORT $LN12@CBaseRefer@2
	mov	edx, DWORD PTR _pShed$[ebp]
	mov	DWORD PTR tv154[ebp], edx
	jmp	SHORT $LN13@CBaseRefer@2
$LN12@CBaseRefer@2:
	push	136					; 00000088H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T82102[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T82102[ebp], 0
	je	SHORT $LN10@CBaseRefer@2
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__CreateEventW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR $T82102[ebp]
	call	??0CAMSchedule@@QAE@PAX@Z		; CAMSchedule::CAMSchedule
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN11@CBaseRefer@2
$LN10@CBaseRefer@2:
	mov	DWORD PTR tv153[ebp], 0
$LN11@CBaseRefer@2:
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR $T82101[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T82101[ebp]
	mov	DWORD PTR tv154[ebp], ecx
$LN13@CBaseRefer@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR [edx+100], eax
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+100], 0
	jne	SHORT $LN7@CBaseRefer@2
	push	68					; 00000044H
	push	OFFSET $SG81593
	push	OFFSET $SG81594
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@CBaseRefer@2:
; Line 69
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], 0
	jne	SHORT $LN6@CBaseRefer@2
; Line 71
	mov	eax, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [eax], -2147024882		; 8007000eH
; Line 73
	jmp	$LN8@CBaseRefer@2
$LN6@CBaseRefer@2:
; Line 79
	mov	esi, esp
	push	8
	lea	ecx, DWORD PTR _tc$81598[ebp]
	push	ecx
	call	DWORD PTR __imp__timeGetDevCaps@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN14@CBaseRefer@2
	mov	edx, DWORD PTR _tc$81598[ebp]
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN15@CBaseRefer@2
$LN14@CBaseRefer@2:
	mov	DWORD PTR tv167[ebp], 1
$LN15@CBaseRefer@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv167[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 81
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	DWORD PTR __imp__timeBeginPeriod@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 84
	mov	esi, esp
	call	DWORD PTR __imp__timeGetTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax
; Line 85
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, 10000				; 00002710H
	mul	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
	mov	DWORD PTR [ecx+60], edx
; Line 91
	cmp	DWORD PTR _pShed$[ebp], 0
	jne	$LN8@CBaseRefer@2
; Line 99
	mov	esi, esp
	lea	edx, DWORD PTR _ThreadID$81600[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?AdviseThreadFunction@CBaseReferenceClock@@CGKPAX@Z ; CBaseReferenceClock::AdviseThreadFunction
	push	0
	push	0
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], eax
; Line 101
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+96], 0
	je	SHORT $LN3@CBaseRefer@2
; Line 103
	mov	esi, esp
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	call	DWORD PTR __imp__SetThreadPriority@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 105
	jmp	SHORT $LN8@CBaseRefer@2
$LN3@CBaseRefer@2:
; Line 107
	mov	edx, DWORD PTR _phr$[ebp]
	mov	DWORD PTR [edx], -2147467259		; 80004005H
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetEvent@CAMSchedule@@QBEPAXXZ		; CAMSchedule::GetEvent
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@CBaseRefer@2
	push	108					; 0000006cH
	push	OFFSET $SG81608
	push	OFFSET $SG81609
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CBaseRefer@2:
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR $T82110[ebp], edx
	mov	eax, DWORD PTR $T82110[ebp]
	mov	DWORD PTR $T82109[ebp], eax
	cmp	DWORD PTR $T82109[ebp], 0
	je	SHORT $LN16@CBaseRefer@2
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T82109[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T82109[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv206[ebp], eax
	jmp	SHORT $LN8@CBaseRefer@2
$LN16@CBaseRefer@2:
	mov	DWORD PTR tv206[ebp], 0
$LN8@CBaseRefer@2:
; Line 113
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@CBaseRefer@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN25@CBaseRefer@2:
	DD	2
	DD	$LN24@CBaseRefer@2
$LN24@CBaseRefer@2:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN21@CBaseRefer@2
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN22@CBaseRefer@2
$LN22@CBaseRefer@2:
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN21@CBaseRefer@2:
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUnknown@@UAE@XZ			; CUnknown::~CUnknown
__unwindfunclet$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__unwindfunclet$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z$2:
	mov	eax, DWORD PTR $T82102[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseReferenceClock@@QAE@PA_WPAUIUnknown@@PAJPAVCAMSchedule@@@Z ENDP ; CBaseReferenceClock::CBaseReferenceClock
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IReferenceClock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IReferenceClock@@QAE@XZ PROC				; IReferenceClock::IReferenceClock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IReferenceClock@@QAE@XZ ENDP				; IReferenceClock::IReferenceClock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
EXTRN	?Unlock@CCritSec@@QAEXXZ:PROC			; CCritSec::Unlock
EXTRN	?Lock@CCritSec@@QAEXXZ:PROC			; CCritSec::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetTime@CBaseReferenceClock@@UAGJPA_J@Z
_TEXT	SEGMENT
tv135 = -16						; size = 4
_rtNow$81620 = -12					; size = 8
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_pTime$ = 12						; size = 4
?GetTime@CBaseReferenceClock@@UAGJPA_J@Z PROC		; CBaseReferenceClock::GetTime, COMDAT
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 118
	cmp	DWORD PTR _pTime$[ebp], 0
	je	$LN4@GetTime
; Line 121
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 122
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax-16]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rtNow$81620[ebp], eax
	mov	DWORD PTR _rtNow$81620[ebp+4], edx
; Line 123
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv135[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp]
	mov	eax, DWORD PTR _rtNow$81620[ebp+4]
	cmp	eax, DWORD PTR [edx+60]
	jl	SHORT $LN3@GetTime
	jg	SHORT $LN7@GetTime
	mov	ecx, DWORD PTR tv135[ebp]
	mov	edx, DWORD PTR _rtNow$81620[ebp]
	cmp	edx, DWORD PTR [ecx+56]
	jbe	SHORT $LN3@GetTime
$LN7@GetTime:
; Line 125
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rtNow$81620[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR _rtNow$81620[ebp+4]
	mov	DWORD PTR [eax+60], edx
; Line 126
	mov	DWORD PTR _hr$[ebp], 0
; Line 128
	jmp	SHORT $LN2@GetTime
$LN3@GetTime:
; Line 130
	mov	DWORD PTR _hr$[ebp], 1
$LN2@GetTime:
; Line 132
	mov	eax, DWORD PTR _pTime$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+4], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
	jmp	SHORT $LN1@GetTime
$LN4@GetTime:
; Line 136
	mov	DWORD PTR _hr$[ebp], -2147467261	; 80004003H
$LN1@GetTime:
; Line 138
	mov	eax, DWORD PTR _hr$[ebp]
; Line 139
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetTime@CBaseReferenceClock@@UAGJPA_J@Z ENDP		; CBaseReferenceClock::GetTime
_TEXT	ENDS
EXTRN	?AddAdvisePacket@CAMSchedule@@QAEKAB_J0PAXH@Z:PROC ; CAMSchedule::AddAdvisePacket
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AdviseTime@CBaseReferenceClock@@UAGJ_J0KPAK@Z
_TEXT	SEGMENT
$T82136 = -28						; size = 8
_lRefTime$ = -16					; size = 8
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_baseTime$ = 12						; size = 8
_streamTime$ = 20					; size = 8
_hEvent$ = 28						; size = 4
_pdwAdviseCookie$ = 32					; size = 4
?AdviseTime@CBaseReferenceClock@@UAGJ_J0KPAK@Z PROC	; CBaseReferenceClock::AdviseTime, COMDAT
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 149
	cmp	DWORD PTR _pdwAdviseCookie$[ebp], 0
	jne	SHORT $LN5@AdviseTime
	mov	eax, -2147467261			; 80004003H
	jmp	$LN6@AdviseTime
$LN5@AdviseTime:
; Line 150
	mov	eax, DWORD PTR _pdwAdviseCookie$[ebp]
	mov	DWORD PTR [eax], 0
; Line 153
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _hEvent$[ebp]
	push	ecx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 258				; 00000102H
	je	SHORT $LN4@AdviseTime
	push	153					; 00000099H
	push	OFFSET $SG81638
	push	OFFSET $SG81639
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@AdviseTime:
; Line 157
	mov	edx, DWORD PTR _baseTime$[ebp]
	add	edx, DWORD PTR _streamTime$[ebp]
	mov	eax, DWORD PTR _baseTime$[ebp+4]
	adc	eax, DWORD PTR _streamTime$[ebp+4]
	mov	DWORD PTR _lRefTime$[ebp], edx
	mov	DWORD PTR _lRefTime$[ebp+4], eax
; Line 158
	cmp	DWORD PTR _lRefTime$[ebp+4], 0
	jl	SHORT $LN2@AdviseTime
	jg	SHORT $LN8@AdviseTime
	cmp	DWORD PTR _lRefTime$[ebp], 0
	jbe	SHORT $LN2@AdviseTime
$LN8@AdviseTime:
	cmp	DWORD PTR _lRefTime$[ebp], -1
	jne	SHORT $LN3@AdviseTime
	cmp	DWORD PTR _lRefTime$[ebp+4], 2147483647	; 7fffffffH
	jne	SHORT $LN3@AdviseTime
$LN2@AdviseTime:
; Line 160
	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
; Line 162
	jmp	SHORT $LN1@AdviseTime
$LN3@AdviseTime:
; Line 164
	mov	DWORD PTR $T82136[ebp], 0
	mov	DWORD PTR $T82136[ebp+4], 0
	push	0
	mov	ecx, DWORD PTR _hEvent$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T82136[ebp]
	push	edx
	lea	eax, DWORD PTR _lRefTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+84]
	call	?AddAdvisePacket@CAMSchedule@@QAEKAB_J0PAXH@Z ; CAMSchedule::AddAdvisePacket
	mov	edx, DWORD PTR _pdwAdviseCookie$[ebp]
	mov	DWORD PTR [edx], eax
; Line 165
	mov	eax, DWORD PTR _pdwAdviseCookie$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 2147024882				; 7ff8fff2H
	add	ecx, -2147024882			; 8007000eH
	mov	DWORD PTR _hr$[ebp], ecx
$LN1@AdviseTime:
; Line 167
	mov	eax, DWORD PTR _hr$[ebp]
$LN6@AdviseTime:
; Line 168
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@AdviseTime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	1
$LN11@AdviseTime:
	DD	1
	DD	$LN10@AdviseTime
$LN10@AdviseTime:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN9@AdviseTime
$LN9@AdviseTime:
	DB	108					; 0000006cH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?AdviseTime@CBaseReferenceClock@@UAGJ_J0KPAK@Z ENDP	; CBaseReferenceClock::AdviseTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AdvisePeriodic@CBaseReferenceClock@@UAGJ_J0KPAK@Z
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_StartTime$ = 12					; size = 8
_PeriodTime$ = 20					; size = 8
_hSemaphore$ = 28					; size = 4
_pdwAdviseCookie$ = 32					; size = 4
?AdvisePeriodic@CBaseReferenceClock@@UAGJ_J0KPAK@Z PROC	; CBaseReferenceClock::AdvisePeriodic, COMDAT
; Line 178
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 179
	cmp	DWORD PTR _pdwAdviseCookie$[ebp], 0
	jne	SHORT $LN3@AdvisePeri
	mov	eax, -2147467261			; 80004003H
	jmp	SHORT $LN4@AdvisePeri
$LN3@AdvisePeri:
; Line 180
	mov	eax, DWORD PTR _pdwAdviseCookie$[ebp]
	mov	DWORD PTR [eax], 0
; Line 183
	cmp	DWORD PTR _StartTime$[ebp+4], 0
	jl	SHORT $LN2@AdvisePeri
	jg	SHORT $LN6@AdvisePeri
	cmp	DWORD PTR _StartTime$[ebp], 0
	jbe	SHORT $LN2@AdvisePeri
$LN6@AdvisePeri:
	cmp	DWORD PTR _PeriodTime$[ebp+4], 0
	jl	SHORT $LN2@AdvisePeri
	jg	SHORT $LN7@AdvisePeri
	cmp	DWORD PTR _PeriodTime$[ebp], 0
	jbe	SHORT $LN2@AdvisePeri
$LN7@AdvisePeri:
	cmp	DWORD PTR _StartTime$[ebp], -1
	jne	SHORT $LN8@AdvisePeri
	cmp	DWORD PTR _StartTime$[ebp+4], 2147483647 ; 7fffffffH
	je	SHORT $LN2@AdvisePeri
$LN8@AdvisePeri:
; Line 185
	push	1
	mov	ecx, DWORD PTR _hSemaphore$[ebp]
	push	ecx
	lea	edx, DWORD PTR _PeriodTime$[ebp]
	push	edx
	lea	eax, DWORD PTR _StartTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+84]
	call	?AddAdvisePacket@CAMSchedule@@QAEKAB_J0PAXH@Z ; CAMSchedule::AddAdvisePacket
	mov	edx, DWORD PTR _pdwAdviseCookie$[ebp]
	mov	DWORD PTR [edx], eax
; Line 186
	mov	eax, DWORD PTR _pdwAdviseCookie$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 2147024882				; 7ff8fff2H
	add	ecx, -2147024882			; 8007000eH
	mov	DWORD PTR _hr$[ebp], ecx
	jmp	SHORT $LN1@AdvisePeri
$LN2@AdvisePeri:
; Line 188
	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
$LN1@AdvisePeri:
; Line 190
	mov	eax, DWORD PTR _hr$[ebp]
$LN4@AdvisePeri:
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?AdvisePeriodic@CBaseReferenceClock@@UAGJ_J0KPAK@Z ENDP	; CBaseReferenceClock::AdvisePeriodic
_TEXT	ENDS
EXTRN	?Unadvise@CAMSchedule@@QAEJK@Z:PROC		; CAMSchedule::Unadvise
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unadvise@CBaseReferenceClock@@UAGJK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwAdviseCookie$ = 12					; size = 4
?Unadvise@CBaseReferenceClock@@UAGJK@Z PROC		; CBaseReferenceClock::Unadvise, COMDAT
; Line 195
	push	ebp
	mov	ebp, esp
; Line 196
	mov	eax, DWORD PTR _dwAdviseCookie$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+84]
	call	?Unadvise@CAMSchedule@@QAEJK@Z		; CAMSchedule::Unadvise
; Line 197
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?Unadvise@CBaseReferenceClock@@UAGJK@Z ENDP		; CBaseReferenceClock::Unadvise
_TEXT	ENDS
PUBLIC	??1CAutoLock@@QAE@XZ				; CAutoLock::~CAutoLock
PUBLIC	??0CAutoLock@@QAE@PAVCCritSec@@@Z		; CAutoLock::CAutoLock
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetPrivateTime@CBaseReferenceClock@@UAE_JXZ
_TEXT	SEGMENT
tv70 = -32						; size = 4
$T82152 = -28						; size = 8
_dwTime$ = -20						; size = 4
_cObjectLock$ = -12					; size = 4
_this$ = -4						; size = 4
?GetPrivateTime@CBaseReferenceClock@@UAE_JXZ PROC	; CBaseReferenceClock::GetPrivateTime, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 202
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN3@GetPrivate
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@GetPrivate
$LN3@GetPrivate:
	mov	DWORD PTR tv70[ebp], 0
$LN4@GetPrivate:
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
; Line 212
	mov	esi, esp
	call	DWORD PTR __imp__timeGetTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwTime$[ebp], eax
; Line 214
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _dwTime$[ebp]
	sub	eax, DWORD PTR [edx+64]
	cdq
	push	0
	push	10000					; 00002710H
	push	edx
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+56]
	adc	edx, DWORD PTR [ecx+60]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
	mov	DWORD PTR [ecx+60], edx
; Line 215
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _dwTime$[ebp]
	mov	DWORD PTR [edx+64], eax
; Line 218
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR $T82152[ebp], edx
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR $T82152[ebp+4], eax
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82152[ebp]
	mov	edx, DWORD PTR $T82152[ebp+4]
; Line 219
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetPrivate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@GetPrivate:
	DD	1
	DD	$LN7@GetPrivate
$LN7@GetPrivate:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@GetPrivate
$LN6@GetPrivate:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?GetPrivateTime@CBaseReferenceClock@@UAE_JXZ ENDP	; CBaseReferenceClock::GetPrivateTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CAutoLock@@QAE@PAVCCritSec@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plock$ = 8						; size = 4
??0CAutoLock@@QAE@PAVCCritSec@@@Z PROC			; CAutoLock::CAutoLock, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plock$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 97
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAutoLock@@QAE@PAVCCritSec@@@Z ENDP			; CAutoLock::CAutoLock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CAutoLock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoLock@@QAE@XZ PROC				; CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
; Line 102
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoLock@@QAE@XZ ENDP				; CAutoLock::~CAutoLock
_TEXT	ENDS
PUBLIC	?ConvertToMilliseconds@@YG_JAB_J@Z		; ConvertToMilliseconds
PUBLIC	?abs@@YGJJ@Z					; abs
PUBLIC	?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z	; CBaseReferenceClock::SetTimeDelta
EXTRN	?GetAdviseCount@CAMSchedule@@QAEKXZ:PROC	; CAMSchedule::GetAdviseCount
EXTRN	?DbgLogInfo@@YAXKKPB_WZZ:PROC			; DbgLogInfo
EXTRN	__alldiv:PROC
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\refclock.cpp
xdata$x	SEGMENT
__unwindtable$?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z$0
__ehfuncinfo$?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z
_TEXT	SEGMENT
tv232 = -80						; size = 4
tv134 = -76						; size = 4
tv93 = -72						; size = 4
tv66 = -68						; size = 8
tv149 = -60						; size = 4
$T82171 = -56						; size = 4
$T82166 = -52						; size = 8
_cObjectLock$ = -40					; size = 4
_Severity$ = -32					; size = 4
_delta$ = -28						; size = 4
_usDelta$ = -24						; size = 4
_llDelta$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_TimeDelta$ = 12					; size = 4
?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z PROC	; CBaseReferenceClock::SetTimeDelta, COMDAT
; Line 233
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 237
	mov	eax, DWORD PTR _TimeDelta$[ebp]
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN7@SetTimeDel
	jg	SHORT $LN14@SetTimeDel
	mov	edx, DWORD PTR tv149[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN7@SetTimeDel
$LN14@SetTimeDel:
	mov	eax, DWORD PTR _TimeDelta$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR tv66[ebp+4], edx
	jmp	SHORT $LN8@SetTimeDel
$LN7@SetTimeDel:
	mov	eax, DWORD PTR _TimeDelta$[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	neg	edx
	mov	DWORD PTR tv66[ebp], ecx
	mov	DWORD PTR tv66[ebp+4], edx
$LN8@SetTimeDel:
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR _llDelta$[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp+4]
	mov	DWORD PTR _llDelta$[ebp+4], ecx
; Line 238
	cmp	DWORD PTR _llDelta$[ebp+4], 2
	jl	SHORT $LN4@SetTimeDel
	jg	SHORT $LN15@SetTimeDel
	cmp	DWORD PTR _llDelta$[ebp], 1410065408	; 540be400H
	jbe	SHORT $LN4@SetTimeDel
$LN15@SetTimeDel:
; Line 239
	push	OFFSET $SG81683
	push	0
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
$LN4@SetTimeDel:
; Line 246
	mov	edx, DWORD PTR _TimeDelta$[ebp]
	push	0
	push	10					; 0000000aH
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	call	__alldiv
	mov	DWORD PTR _usDelta$[ebp], eax
; Line 248
	mov	edx, DWORD PTR _usDelta$[ebp]
	push	edx
	call	?abs@@YGJJ@Z				; abs
	mov	DWORD PTR _delta$[ebp], eax
; Line 250
	mov	DWORD PTR _Severity$[ebp], 8
$LN3@SetTimeDel:
; Line 251
	cmp	DWORD PTR _delta$[ebp], 0
	jbe	SHORT $LN2@SetTimeDel
; Line 253
	mov	eax, DWORD PTR _delta$[ebp]
	shr	eax, 3
	mov	DWORD PTR _delta$[ebp], eax
; Line 254
	mov	ecx, DWORD PTR _Severity$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _Severity$[ebp], ecx
; Line 255
	jmp	SHORT $LN3@SetTimeDel
$LN2@SetTimeDel:
; Line 261
	mov	edx, DWORD PTR _TimeDelta$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [edx+4]
	adc	edx, DWORD PTR [eax+60]
	mov	DWORD PTR $T82166[ebp], ecx
	mov	DWORD PTR $T82166[ebp+4], edx
	cmp	DWORD PTR _Severity$[ebp], 0
	jge	SHORT $LN9@SetTimeDel
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN10@SetTimeDel
$LN9@SetTimeDel:
	mov	eax, DWORD PTR _Severity$[ebp]
	mov	DWORD PTR tv93[ebp], eax
$LN10@SetTimeDel:
	lea	ecx, DWORD PTR $T82166[ebp]
	push	ecx
	call	?ConvertToMilliseconds@@YG_JAB_J@Z	; ConvertToMilliseconds
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	call	?ConvertToMilliseconds@@YG_JAB_J@Z	; ConvertToMilliseconds
	push	eax
	mov	eax, DWORD PTR _usDelta$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Severity$[ebp]
	push	ecx
	push	OFFSET $SG81691
	mov	edx, DWORD PTR tv93[ebp]
	push	edx
	push	1
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 28					; 0000001cH
; Line 272
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN11@SetTimeDel
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN12@SetTimeDel
$LN11@SetTimeDel:
	mov	DWORD PTR tv134[ebp], 0
$LN12@SetTimeDel:
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 273
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _TimeDelta$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+60]
	adc	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
; Line 281
	mov	ecx, DWORD PTR _TimeDelta$[ebp]
	mov	DWORD PTR tv232[ebp], ecx
	mov	edx, DWORD PTR tv232[ebp]
	cmp	DWORD PTR [edx+4], 0
	jl	SHORT $LN1@SetTimeDel
	jg	SHORT $LN16@SetTimeDel
	mov	eax, DWORD PTR tv232[ebp]
	cmp	DWORD PTR [eax], 5000			; 00001388H
	jbe	SHORT $LN1@SetTimeDel
$LN16@SetTimeDel:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?GetAdviseCount@CAMSchedule@@QAEKXZ	; CAMSchedule::GetAdviseCount
	test	eax, eax
	jbe	SHORT $LN1@SetTimeDel
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TriggerThread@CBaseReferenceClock@@QAEXXZ ; CBaseReferenceClock::TriggerThread
$LN1@SetTimeDel:
; Line 282
	mov	DWORD PTR $T82171[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T82171[ebp]
; Line 283
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@SetTimeDel
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN20@SetTimeDel:
	DD	1
	DD	$LN19@SetTimeDel
$LN19@SetTimeDel:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN17@SetTimeDel
$LN17@SetTimeDel:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z$0:
	lea	ecx, DWORD PTR _cObjectLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetTimeDelta@CBaseReferenceClock@@QAGJAB_J@Z ENDP	; CBaseReferenceClock::SetTimeDelta
EXTRN	_labs:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?abs@@YGJJ@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?abs@@YGJJ@Z PROC					; abs, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdlib.h
; Line 468
	push	ebp
	mov	ebp, esp
; Line 469
	mov	eax, DWORD PTR __X$[ebp]
	push	eax
	call	_labs
	add	esp, 4
; Line 470
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?abs@@YGJJ@Z ENDP					; abs
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConvertToMilliseconds@@YG_JAB_J@Z
_TEXT	SEGMENT
_RT$ = 8						; size = 4
?ConvertToMilliseconds@@YG_JAB_J@Z PROC			; ConvertToMilliseconds, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\refclock.h
; Line 20
	push	ebp
	mov	ebp, esp
; Line 24
	mov	eax, DWORD PTR _RT$[ebp]
	push	0
	push	10000					; 00002710H
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__alldiv
; Line 25
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?ConvertToMilliseconds@@YG_JAB_J@Z ENDP			; ConvertToMilliseconds
_TEXT	ENDS
PUBLIC	?AdviseThread@CBaseReferenceClock@@AAEJXZ	; CBaseReferenceClock::AdviseThread
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AdviseThreadFunction@CBaseReferenceClock@@CGKPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?AdviseThreadFunction@CBaseReferenceClock@@CGKPAX@Z PROC ; CBaseReferenceClock::AdviseThreadFunction, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\refclock.cpp
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	ecx, DWORD PTR _p$[ebp]
	call	?AdviseThread@CBaseReferenceClock@@AAEJXZ ; CBaseReferenceClock::AdviseThread
; Line 290
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?AdviseThreadFunction@CBaseReferenceClock@@CGKPAX@Z ENDP ; CBaseReferenceClock::AdviseThreadFunction
_TEXT	ENDS
EXTRN	?Advise@CAMSchedule@@QAE_JAB_J@Z:PROC		; CAMSchedule::Advise
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AdviseThread@CBaseReferenceClock@@AAEJXZ
_TEXT	SEGMENT
tv135 = -52						; size = 4
$T82194 = -48						; size = 8
_llWait$81711 = -36					; size = 8
_rtNow$81708 = -20					; size = 8
_dwWait$ = -8						; size = 4
_this$ = -4						; size = 4
?AdviseThread@CBaseReferenceClock@@AAEJXZ PROC		; CBaseReferenceClock::AdviseThread, COMDAT
; _this$ = ecx
; Line 293
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 294
	mov	DWORD PTR _dwWait$[ebp], -1
$LN4@AdviseThre:
; Line 302
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	$LN3@AdviseThre
; Line 305
	mov	ecx, DWORD PTR _dwWait$[ebp]
	push	ecx
	push	OFFSET $SG81706
	push	3
	push	1
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 306
	mov	esi, esp
	mov	edx, DWORD PTR _dwWait$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	call	?GetEvent@CAMSchedule@@QBEPAXXZ		; CAMSchedule::GetEvent
	push	eax
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 307
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN2@AdviseThre
	jmp	$LN3@AdviseThre
$LN2@AdviseThre:
; Line 314
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rtNow$81708[ebp], eax
	mov	DWORD PTR _rtNow$81708[ebp+4], edx
; Line 318
	lea	eax, DWORD PTR _rtNow$81708[ebp]
	push	eax
	call	?ConvertToMilliseconds@@YG_JAB_J@Z	; ConvertToMilliseconds
	push	edx
	push	eax
	push	OFFSET $SG81709
	push	3
	push	1
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 323
	mov	ecx, DWORD PTR _rtNow$81708[ebp]
	add	ecx, 10000				; 00002710H
	mov	edx, DWORD PTR _rtNow$81708[ebp+4]
	adc	edx, 0
	mov	DWORD PTR $T82194[ebp], ecx
	mov	DWORD PTR $T82194[ebp+4], edx
	lea	eax, DWORD PTR $T82194[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	?Advise@CAMSchedule@@QAE_JAB_J@Z	; CAMSchedule::Advise
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax
	mov	DWORD PTR [ecx+84], edx
; Line 324
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	sub	eax, DWORD PTR _rtNow$81708[ebp]
	mov	ecx, DWORD PTR [edx+84]
	sbb	ecx, DWORD PTR _rtNow$81708[ebp+4]
	mov	DWORD PTR _llWait$81711[ebp], eax
	mov	DWORD PTR _llWait$81711[ebp+4], ecx
; Line 326
	cmp	DWORD PTR _llWait$81711[ebp+4], 0
	jg	SHORT $LN1@AdviseThre
	jl	SHORT $LN9@AdviseThre
	cmp	DWORD PTR _llWait$81711[ebp], 0
	ja	SHORT $LN1@AdviseThre
$LN9@AdviseThre:
	push	326					; 00000146H
	push	OFFSET $SG81713
	push	OFFSET $SG81714
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@AdviseThre:
; Line 328
	lea	edx, DWORD PTR _llWait$81711[ebp]
	push	edx
	call	?ConvertToMilliseconds@@YG_JAB_J@Z	; ConvertToMilliseconds
	mov	DWORD PTR _llWait$81711[ebp], eax
	mov	DWORD PTR _llWait$81711[ebp+4], edx
; Line 330
	cmp	DWORD PTR _llWait$81711[ebp+4], 0
	jl	SHORT $LN7@AdviseThre
	jg	SHORT $LN10@AdviseThre
	cmp	DWORD PTR _llWait$81711[ebp], -1
	jbe	SHORT $LN7@AdviseThre
$LN10@AdviseThre:
	mov	DWORD PTR tv135[ebp], -1
	jmp	SHORT $LN8@AdviseThre
$LN7@AdviseThre:
	mov	eax, DWORD PTR _llWait$81711[ebp]
	mov	DWORD PTR tv135[ebp], eax
$LN8@AdviseThre:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _dwWait$[ebp], ecx
; Line 331
	jmp	$LN4@AdviseThre
$LN3@AdviseThre:
; Line 332
	xor	eax, eax
; Line 333
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@AdviseThre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@AdviseThre:
	DD	2
	DD	$LN13@AdviseThre
$LN13@AdviseThre:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN11@AdviseThre
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN12@AdviseThre
$LN12@AdviseThre:
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	87					; 00000057H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN11@AdviseThre:
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
?AdviseThread@CBaseReferenceClock@@AAEJXZ ENDP		; CBaseReferenceClock::AdviseThread
_TEXT	ENDS
END
