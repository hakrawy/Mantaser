; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Downloads\MediaPoint\src\filters\BaseClasses\winutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
CONST	SEGMENT
$SG81953 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81954 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG81956 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81957 DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG81960 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'H', 00H, 'O', 00H
	DB	'W', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H
	DB	00H
	ORG $+2
$SG81962 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'H', 00H, 'O', 00H
	DB	'W', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 'T'
	DB	00H, 'O', 00H, 'P', 00H, 00H, 00H
$SG81964 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'A', 00H
	DB	'L', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'P', 00H, 'A', 00H, 'L'
	DB	00H, 'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 00H, 00H
$SG81966 DB	'A', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG81972 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81973 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG81975 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81976 DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG81990 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81991 DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	'D', 00H, 'C', 00H, '(', 00H, 'm', 00H, '_', 00H, 'M', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG81994 DB	'I', 00H, 'n', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H
	DB	'v', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG81996 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG81997 DB	'G', 00H, 'e', 00H, 't', 00H, 'P', 00H, 'a', 00H, 'r', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, '(', 00H, 'h', 00H, 'w', 00H, 'n'
	DB	00H, 'd', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG81998 DB	'R', 00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'y', 00H, 'l', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG81999 DB	'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '0', 00H, 'x'
	DB	00H, '%', 00H, '8', 00H, '.', 00H, '8', 00H, 'X', 00H, 00H, 00H
	ORG $+6
$SG82001 DB	'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H
	DB	'y', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, ' ', 00H, '%', 00H, '8', 00H, '.', 00H, '8', 00H, 'X', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H
	DB	'%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG82002 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82003 DB	'"', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG82030 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82031 DB	'm', 00H, '_', 00H, 'b', 00H, 'A', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'v', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'R', 00H, 'U', 00H
	DB	'E', 00H, 00H, 00H
	ORG $+2
$SG82046 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82047 DB	'h', 00H, 'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG82055 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82056 DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, 00H, 00H
$SG82058 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82059 DB	'm', 00H, '_', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H, 00H, 00H
	ORG $+2
$SG82071 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82072 DB	'h', 00H, 'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG82087 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82088 DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, 00H, 00H
$SG82090 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82091 DB	'm', 00H, '_', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H, 00H, 00H
	ORG $+2
$SG82093 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82094 DB	'C', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'O', 00H, 'u', 00H, 't', 00H, '('
	DB	00H, '&', 00H, 'm', 00H, '_', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, ')', 00H, 00H, 00H
$SG82096 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82097 DB	'C', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'O', 00H, 'u', 00H, 't', 00H, '('
	DB	00H, '&', 00H, 'm', 00H, '_', 00H, 'P', 00H, 'a', 00H, 'l', 00H
	DB	'e', 00H, 't', 00H, 't', 00H, 'e', 00H, 'L', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82099 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82100 DB	'R', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H, 't'
	DB	00H, 'e', 00H, '(', 00H, 'm', 00H, '_', 00H, 'h', 00H, 'd', 00H
	DB	'c', 00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, 'F', 00H, 'F', 00H, 'F', 00H, 'F', 00H
	DB	'F', 00H, 'F', 00H, 'F', 00H, 'F', 00H, 'L', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG82102 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82103 DB	'R', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H, 't'
	DB	00H, 'e', 00H, '(', 00H, 'm', 00H, '_', 00H, 'M', 00H, 'e', 00H
	DB	'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H, ')'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, 'F', 00H, 'F', 00H, 'F', 00H, 'F', 00H, 'F', 00H, 'F'
	DB	00H, 'F', 00H, 'F', 00H, 'L', 00H, ')', 00H, 00H, 00H
$SG82126 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82127 DB	'0', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'l', 00H
	DB	'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG82132 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82133 DB	'S', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, '(', 00H, '(', 00H, 'H', 00H, 'A', 00H, 'N'
	DB	00H, 'D', 00H, 'L', 00H, 'E', 00H, ')', 00H, 'w', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82147 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82148 DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
$SG82150 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82151 DB	'm', 00H, '_', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG82153 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82154 DB	'G', 00H, 'd', 00H, 'i', 00H, 'F', 00H, 'l', 00H, 'u', 00H
	DB	's', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82157 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82158 DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'e', 00H, 'D', 00H, 'C', 00H, '(', 00H, 'm', 00H, '_', 00H, 'h'
	DB	00H, 'w', 00H, 'n', 00H, 'd', 00H, ',', 00H, 'm', 00H, '_', 00H
	DB	'h', 00H, 'd', 00H, 'c', 00H, ')', 00H, 00H, 00H
$SG82161 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82162 DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	'D', 00H, 'C', 00H, '(', 00H, 'm', 00H, '_', 00H, 'M', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG82168 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82169 DB	'I', 00H, 's', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, '(', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82172 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82173 DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, ' ', 00H
	DB	'=', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'C'
	DB	00H, '(', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG82175 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG82176 DB	'm', 00H, '_', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, 'D', 00H, 'C', 00H, '(', 00H
	DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG82178 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82179 DB	'S', 00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'e', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'B', 00H, 'l', 00H, 't'
	DB	00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '(', 00H, 'm', 00H
	DB	'_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, ',', 00H, '3', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG82181 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82182 DB	'S', 00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'e', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'B', 00H, 'l', 00H, 't'
	DB	00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '(', 00H, 'm', 00H
	DB	'_', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y'
	DB	00H, 'D', 00H, 'C', 00H, ',', 00H, '3', 00H, ')', 00H, 00H, 00H
$SG82199 DB	'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'M', 00H, 'o', 00H, 'v', 00H, 'i', 00H, 'e', 00H, ' ', 00H, 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG82208 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82209 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'L', 00H, 'o', 00H, 'n', 00H, 'g'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, '(', 00H, 'h', 00H, 'w', 00H
	DB	'n', 00H, 'd', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '(', 00H, 'L', 00H, 'O', 00H
	DB	'N', 00H, 'G', 00H, '_', 00H, 'P', 00H, 'T', 00H, 'R', 00H, ')'
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, 00H, 00H
$SG82210 DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, ' ', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, ' '
	DB	00H, 'H', 00H, 'W', 00H, 'N', 00H, 'D', 00H, '(', 00H, '%', 00H
	DB	'8', 00H, '.', 00H, '8', 00H, 'X', 00H, ')', 00H, 00H, 00H
$SG82220 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82221 DB	'I', 00H, 's', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, '(', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82236 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82237 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'h', 00H, 'w', 00H, 'n'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG82249 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82250 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'h', 00H, 'w', 00H, 'n'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG82270 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82271 DB	'!', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'R', 00H, 'e', 00H
	DB	'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H
$SG82275 DB	'R', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'w', 00H, 'h', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'i', 00H
	DB	's', 00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '!', 00H, 00H
	DB	00H
$SG82288 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82289 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG82294 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82295 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG82300 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82301 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG82306 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82307 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG82312 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82313 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG82315 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82316 DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, 00H, 00H
$SG82321 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82322 DB	'm', 00H, '_', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG82324 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82325 DB	'm', 00H, '_', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H, 00H, 00H
	ORG $+2
$SG82330 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82331 DB	'C', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'I', 00H, 'n', 00H, '(', 00H, '&'
	DB	00H, 'm', 00H, '_', 00H, 'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H
	DB	't', 00H, 't', 00H, 'e', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, ')', 00H, 00H, 00H
$SG82351 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82352 DB	'p', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG82361 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82362 DB	'p', 00H, 'S', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
$SG82369 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82370 DB	'G', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'l', 00H, 'i', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '(', 00H, 'h', 00H, 'w', 00H, 'n', 00H, 'd', 00H, ',', 00H
	DB	'&', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, ')', 00H, 00H, 00H
$SG82371 DB	'%', 00H, '0', 00H, '8', 00H, 'd', 00H, ' ', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'd', 00H, 00H, 00H
$SG82373 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82374 DB	'l', 00H, 's', 00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, '(', 00H, 's', 00H, 'z', 00H, 'T', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 's', 00H, ')', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'T', 00H, 'I', 00H, 'M', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'N'
	DB	00H, 'G', 00H, 'T', 00H, 'H', 00H, 00H, 00H
$SG82384 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82385 DB	'p', 00H, 'b', 00H, 'm', 00H, 'i', 00H, '-', 00H, '>', 00H
	DB	'b', 00H, 'i', 00H, 'C', 00H, 'l', 00H, 'r', 00H, 'U', 00H, 's'
	DB	00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG82391 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82392 DB	'u', 00H, 'i', 00H, 'R', 00H, 'e', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'p'
	DB	00H, 'b', 00H, 'm', 00H, 'i', 00H, '-', 00H, '>', 00H, 'b', 00H
	DB	'i', 00H, 'C', 00H, 'l', 00H, 'r', 00H, 'U', 00H, 's', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
$SG82399 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82400 DB	'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
$SG82411 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82412 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG82421 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82422 DB	'p', 00H, 'b', 00H, 'm', 00H, 'i', 00H, '-', 00H, '>', 00H
	DB	'b', 00H, 'i', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'i', 00H, 'P', 00H, 'A', 00H, 'L', 00H, 'E', 00H, 'T'
	DB	00H, 'T', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG82436 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82437 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG82461 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82462 DB	'm', 00H, '_', 00H, 'h', 00H, 'd', 00H, 'c', 00H, 00H, 00H
$SG82464 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82465 DB	'm', 00H, '_', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'D', 00H, 'C', 00H, 00H, 00H
	ORG $+2
$SG82468 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82469 DB	'G', 00H, 'd', 00H, 'i', 00H, 'F', 00H, 'l', 00H, 'u', 00H
	DB	's', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82471 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82472 DB	'G', 00H, 'd', 00H, 'i', 00H, 'F', 00H, 'l', 00H, 'u', 00H
	DB	's', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82481 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82482 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG82509 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82510 DB	'p', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
$SG82516 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82517 DB	'p', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
$SG82523 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82524 DB	'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
$SG82530 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82531 DB	'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
$SG82568 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82569 DB	'p', 00H, 'h', 00H, 'r', 00H, 00H, 00H
$SG82571 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82572 DB	'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 00H, 00H
$SG82581 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82582 DB	'm', 00H, '_', 00H, 'b', 00H, 'C', 00H, 'o', 00H, 'm', 00H
	DB	'm', 00H, 'i', 00H, 't', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L', 00H
	DB	'S', 00H, 'E', 00H, 00H, 00H
$SG82587 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG82588 DB	'm', 00H, '_', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'l', 00H
	DB	'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'G', 00H, 'e'
	DB	00H, 't', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82590 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82591 DB	'G', 00H, 'd', 00H, 'i', 00H, 'F', 00H, 'l', 00H, 'u', 00H
	DB	's', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82599 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82600 DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '('
	DB	00H, 'p', 00H, 'D', 00H, 'i', 00H, 'b', 00H, 'D', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'h', 00H, 'B', 00H, 'i'
	DB	00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H, ')', 00H, 00H, 00H
$SG82602 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82603 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'p'
	DB	00H, 'D', 00H, 'i', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '-', 00H, '>', 00H, 'h', 00H, 'M', 00H, 'a', 00H, 'p'
	DB	00H, 'p', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ')', 00H, 00H, 00H
$SG82633 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82634 DB	'm', 00H, '_', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'd', 00H
	DB	'i', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG82641 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82642 DB	'm', 00H, '_', 00H, 'l', 00H, 'A', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG82651 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82652 DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '('
	DB	00H, 'D', 00H, 'i', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '.', 00H, 'h', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'm'
	DB	00H, 'a', 00H, 'p', 00H, ')', 00H, 00H, 00H
$SG82654 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82655 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'D'
	DB	00H, 'i', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'h', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ')', 00H, 00H, 00H
$SG82672 DB	'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG82697 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82698 DB	'"', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'd', 00H, 'i'
	DB	00H, 'a', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'"', 00H, 00H, 00H
	ORG $+2
$SG82705 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82706 DB	'C', 00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, '(', 00H, 'h'
	DB	00H, 'M', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ')', 00H, 00H, 00H
$SG82733 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82734 DB	'p', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG82736 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82737 DB	'p', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'r', 00H, 00H, 00H
$SG82749 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82750 DB	'p', 00H, 'D', 00H, 'i', 00H, 'b', 00H, 'D', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG82755 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82756 DB	'm', 00H, '_', 00H, 'b', 00H, 'I', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'R'
	DB	00H, 'U', 00H, 'E', 00H, 00H, 00H
$SG82764 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82765 DB	'm', 00H, '_', 00H, 'p', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG82774 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82775 DB	'm', 00H, '_', 00H, 'h', 00H, 'P', 00H, 'a', 00H, 'l', 00H
	DB	'e', 00H, 't', 00H, 't', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG82804 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82805 DB	'p', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG82807 DB	'N', 00H, 'o', 00H, ' ', 00H, 'u', 00H, 'p', 00H, 'd', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'e', 00H, 'e'
	DB	00H, 'd', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG82810 DB	'N', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'h', 00H, 'a', 00H
	DB	's', 00H, ' ', 00H, 'n', 00H, 'o', 00H, ' ', 00H, 'p', 00H, 'a'
	DB	00H, 'l', 00H, 'e', 00H, 't', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG82813 DB	'M', 00H, 'a', 00H, 'k', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'n', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'l', 00H, 'o', 00H, 'u', 00H, 'r', 00H, ' ', 00H, 'p', 00H
	DB	'a', 00H, 'l', 00H, 'e', 00H, 't', 00H, 't', 00H, 'e', 00H, 00H
	DB	00H
$SG82815 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82816 DB	'm', 00H, '_', 00H, 'h', 00H, 'P', 00H, 'a', 00H, 'l', 00H
	DB	'e', 00H, 't', 00H, 't', 00H, 'e', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG82828 DB	'N', 00H, 'o', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'l', 00H, 'e', 00H
	DB	't', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG82833 DB	'N', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'l'
	DB	00H, 'e', 00H, 't', 00H, 't', 00H, 'e', 00H, 00H, 00H
$SG82838 DB	'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm'
	DB	00H, 'u', 00H, 'm', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'u', 00H, 'r', 00H, 's', 00H, ' ', 00H, '(', 00H, '%'
	DB	00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82840 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82841 DB	'p', 00H, 'S', 00H, 'r', 00H, 'c', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'b', 00H, 'm', 00H, 'i'
	DB	00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'.', 00H, 'b', 00H, 'i', 00H, 'C', 00H, 'l', 00H, 'r', 00H, 'U'
	DB	00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'i', 00H, 'P', 00H, 'A', 00H, 'L', 00H, 'E', 00H, 'T'
	DB	00H, 'T', 00H, 'E', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'L', 00H
	DB	'O', 00H, 'R', 00H, 'S', 00H, 00H, 00H
	ORG $+2
$SG82843 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG82844 DB	'p', 00H, 'S', 00H, 'r', 00H, 'c', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'b', 00H, 'm', 00H, 'i'
	DB	00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'.', 00H, 'b', 00H, 'i', 00H, 'C', 00H, 'l', 00H, 'r', 00H, 'I'
	DB	00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'a', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'P'
	DB	00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H, 't', 00H, 'e', 00H
	DB	'E', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG82848 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG82849 DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'S', 00H
	DB	'(', 00H, 'p', 00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'I'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'i'
	DB	00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'P', 00H, 'a', 00H
	DB	'l', 00H, 'e', 00H, 't', 00H, 't', 00H, 'e', 00H, '(', 00H, 'p'
	DB	00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'I', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82853 DB	'R', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG82866 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82867 DB	'm', 00H, '_', 00H, 'h', 00H, 'P', 00H, 'a', 00H, 'l', 00H
	DB	'e', 00H, 't', 00H, 't', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'm', 00H, '_', 00H, 'p', 00H, 'B', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e', 00H, 't', 00H
	DB	'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H, 't', 00H, 'e'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H
$SG82869 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82870 DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '('
	DB	00H, 'm', 00H, '_', 00H, 'h', 00H, 'P', 00H, 'a', 00H, 'l', 00H
	DB	'e', 00H, 't', 00H, 't', 00H, 'e', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG82877 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82878 DB	'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'n', 00H, 's', 00H, 'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't'
	DB	00H, 't', 00H, 'e', 00H, '(', 00H, 'p', 00H, 'V', 00H, 'i', 00H
	DB	'd', 00H, 'e', 00H, 'o', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H
	DB	'R', 00H, 'U', 00H, 'E', 00H, 00H, 00H
$SG82880 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82881 DB	'p', 00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H
	DB	'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'b'
	DB	00H, 'm', 00H, 'i', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '.', 00H, 'b', 00H, 'i', 00H, 'C', 00H, 'l'
	DB	00H, 'r', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'i', 00H, 'P', 00H, 'A', 00H, 'L'
	DB	00H, 'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, '_', 00H, 'C', 00H
	DB	'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'S', 00H, 00H, 00H
	ORG $+2
$SG82900 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82901 DB	'h', 00H, 'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG82911 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82912 DB	'i', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 's', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'i'
	DB	00H, 'P', 00H, 'A', 00H, 'L', 00H, 'E', 00H, 'T', 00H, 'T', 00H
	DB	'E', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R'
	DB	00H, 'S', 00H, 00H, 00H
$SG82920 DB	'DISPLAY', 00H
$SG82921 DB	'DISPLAY', 00H
$SG82963 DB	'DISPLAY', 00H
$SG82964 DB	'DISPLAY', 00H
$SG82968 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82969 DB	'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
$SG82970 DB	'<NULL>', 00H
	ORG $+1
$SG82971 DB	'A', 00H, 'C', 00H, 'K', 00H, '!', 00H, ' ', 00H, 'C', 00H
	DB	'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e'
	DB	00H, 't', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'D', 00H, 'C', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '%', 00H, 'h'
	DB	00H, 's', 00H, 00H, 00H
$SG82975 DB	'<NULL>', 00H
	ORG $+1
$SG82976 DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'D', 00H, 'C', 00H, ' '
	DB	00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
$SG82982 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG82983 DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'H', 00H
	DB	'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'V', 00H, 'a'
	DB	00H, 'l', 00H, 'i', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	'(', 00H, '&', 00H, 'm', 00H, '_', 00H, 'D', 00H, 'i', 00H, 's'
	DB	00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H, ')', 00H, 00H, 00H
$SG82984 DB	'N', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'D', 00H, 'I', 00H
	DB	'S', 00H, 'P', 00H, 'L', 00H, 'A', 00H, 'Y', 00H, ' ', 00H, 'b'
	DB	00H, 'i', 00H, 't', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'p', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, '=', 00H, '%', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+4
$SG83000 DB	'B', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H
	DB	'o', 00H, 'n', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '%'
	DB	00H, 'd', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, 00H, 00H
$SG83005 DB	'B', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H
	DB	'o', 00H, 'n', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '%'
	DB	00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'g', 00H, 'u'
	DB	00H, 'o', 00H, 'u', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG83024 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG83025 DB	'M', 00H, 'a', 00H, 's', 00H, 'k', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '8', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG83032 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'm', 00H, 'e', 00H
	DB	'n', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H
	DB	00H
$SG83035 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, 00H, 00H
	ORG $+6
$SG83039 DB	'B', 00H, 'I', 00H, '_', 00H, 'B', 00H, 'I', 00H, 'T', 00H
	DB	'F', 00H, 'I', 00H, 'E', 00H, 'L', 00H, 'D', 00H, 'S', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, '1', 00H, '6', 00H
	DB	'/', 00H, '3', 00H, '2', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 't'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+2
$SG83042 DB	'B', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'i', 00H
	DB	'e', 00H, 'l', 00H, 'd', 00H, 's', 00H, ' ', 00H, 'a', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG83044 DB	'N', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'p', 00H, 'l', 00H, 'a'
	DB	00H, 'n', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG83047 DB	'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'c', 00H, 'o', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'l', 00H, 'y', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, 00H, 00H
	ORG $+2
$SG83050 DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'f', 00H, ' ', 00H, 'B', 00H, 'I', 00H, 'T', 00H, 'M', 00H, 'A'
	DB	00H, 'P', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'H', 00H
	DB	'E', 00H, 'A', 00H, 'D', 00H, 'E', 00H, 'R', 00H, ' ', 00H, 'w'
	DB	00H, 'r', 00H, 'o', 00H, 'n', 00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG83056 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG83058 DB	'P', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H, 't', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'u', 00H
	DB	's', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'B'
	DB	00H, 'I', 00H, '_', 00H, 'R', 00H, 'G', 00H, 'B', 00H, 00H, 00H
$SG83061 DB	'T', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, 'p', 00H, 'a', 00H, 'l', 00H, 'e', 00H, 't', 00H, 't'
	DB	00H, 'e', 00H, 00H, 00H
$SG83063 DB	'T', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'a', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG83078 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG83079 DB	'p', 00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H
	DB	'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG83097 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG83098 DB	'P', 00H, 'A', 00H, 'L', 00H, 'E', 00H, 'T', 00H, 'T', 00H
	DB	'I', 00H, 'S', 00H, 'E', 00H, 'D', 00H, '(', 00H, '&', 00H, 'm'
	DB	00H, '_', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'T', 00H, 'R', 00H, 'U', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG83099 DB	'(', 00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H
	DB	')', 00H, ' ', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'A', 00H, 'C'
	DB	00H, 'C', 00H, 'E', 00H, 'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H
	DB	00H, 00H
	ORG $+2
$SG83101 DB	'(', 00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H
	DB	')', 00H, ' ', 00H, 'M', 00H, 'i', 00H, 's', 00H, 'm', 00H, 'a'
	DB	00H, 't', 00H, 'c', 00H, 'h', 00H, ' ', 00H, 'a', 00H, 'g', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG83103 DB	'(', 00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H
	DB	')', 00H, ' ', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a'
	DB	00H, 't', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 's', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 00H, 00H
$SG83106 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG83107 DB	'm', 00H, '_', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H
	DB	'l', 00H, 'a', 00H, 'y', 00H, '.', 00H, 'b', 00H, 'm', 00H, 'i'
	DB	00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'.', 00H, 'b', 00H, 'i', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'p', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u'
	DB	00H, 't', 00H, '-', 00H, '>', 00H, 'b', 00H, 'm', 00H, 'i', 00H
	DB	'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '.'
	DB	00H, 'b', 00H, 'i', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'C', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG83109 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG83110 DB	'P', 00H, 'A', 00H, 'L', 00H, 'E', 00H, 'T', 00H, 'T', 00H
	DB	'I', 00H, 'S', 00H, 'E', 00H, 'D', 00H, '(', 00H, 'p', 00H, 'I'
	DB	00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S'
	DB	00H, 'E', 00H, 00H, 00H
$SG83112 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG83113 DB	'P', 00H, 'A', 00H, 'L', 00H, 'E', 00H, 'T', 00H, 'T', 00H
	DB	'I', 00H, 'S', 00H, 'E', 00H, 'D', 00H, '(', 00H, '&', 00H, 'm'
	DB	00H, '_', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
$SG83119 DB	'(', 00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H
	DB	')', 00H, ' ', 00H, 'B', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'f'
	DB	00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'm', 00H
	DB	'i', 00H, 's', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG83121 DB	'(', 00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H
	DB	')', 00H, ' ', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'A', 00H, 'C'
	DB	00H, 'C', 00H, 'E', 00H, 'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H
	DB	00H, 00H
	ORG $+2
$SG83132 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG83133 DB	'p', 00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H
	DB	'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'b'
	DB	00H, 'm', 00H, 'i', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '.', 00H, 'b', 00H, 'i', 00H, 'C', 00H, 'o'
	DB	00H, 'm', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'B', 00H, 'I', 00H, '_', 00H, 'R', 00H, 'G', 00H, 'B', 00H
	DB	00H, 00H
	ORG $+4
$SG83148 DB	'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 'G', 00H, 'U', 00H, 'I', 00H, 'D', 00H, ' ', 00H, 'n'
	DB	00H, 'o', 00H, 't', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'V', 00H
	DB	'I', 00H, 'D', 00H, 'E', 00H, 'O', 00H, 'I', 00H, 'N', 00H, 'F'
	DB	00H, 'O', 00H, 'H', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'E', 00H
	DB	'R', 00H, 00H, 00H
$SG83151 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG83152 DB	'p', 00H, 'm', 00H, 't', 00H, 'I', 00H, 'n', 00H, '-', 00H
	DB	'>', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG83159 DB	'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'm', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	' ', 00H, 'a', 00H, ' ', 00H, 'V', 00H, 'I', 00H, 'D', 00H, 'E'
	DB	00H, 'O', 00H, 'H', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'E', 00H
	DB	'R', 00H, 00H, 00H
$SG83165 DB	'M', 00H, 'a', 00H, 'j', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'M', 00H, 'E', 00H, 'D', 00H, 'I', 00H
	DB	'A', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H, '_', 00H, 'V'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG83169 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o'
	DB	00H, ' ', 00H, 'm', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, 00H, 00H
$SG83182 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+6
$SG83183 DB	'm', 00H, '_', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H
	DB	'l', 00H, 'a', 00H, 'y', 00H, '.', 00H, 'b', 00H, 'm', 00H, 'i'
	DB	00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'.', 00H, 'b', 00H, 'i', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p'
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'B', 00H, 'I'
	DB	00H, '_', 00H, 'R', 00H, 'G', 00H, 'B', 00H, 00H, 00H
$SG83200 DB	'.', 00H, '.', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG83201 DB	'p', 00H, 'm', 00H, 't', 00H, '-', 00H, '>', 00H, 'f', 00H
	DB	'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, '_'
	DB	00H, 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 'I', 00H
	DB	'n', 00H, 'f', 00H, 'o', 00H, 00H, 00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	??0CBaseWindow@@QAE@H_N@Z			; CBaseWindow::CBaseWindow
EXTRN	??1CCritSec@@QAE@XZ:PROC			; CCritSec::~CCritSec
EXTRN	??0CCritSec@@QAE@XZ:PROC			; CCritSec::CCritSec
EXTRN	?g_hInst@@3PAUHINSTANCE__@@A:DWORD		; g_hInst
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
xdata$x	SEGMENT
__unwindtable$??0CBaseWindow@@QAE@H_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseWindow@@QAE@H_N@Z$0
__ehfuncinfo$??0CBaseWindow@@QAE@H_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseWindow@@QAE@H_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??0CBaseWindow@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bDoGetDC$ = 8						; size = 4
_bDoPostToDestroy$ = 12					; size = 1
??0CBaseWindow@@QAE@H_N@Z PROC				; CBaseWindow::CBaseWindow, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseWindow@@QAE@H_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+64], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+65], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+66], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _bDoPostToDestroy$[ebp]
	mov	BYTE PTR [ecx+108], dl
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
; Line 38
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bDoGetDC$[ebp]
	mov	DWORD PTR [eax+104], ecx
; Line 39
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseWindow@@QAE@H_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??0CBaseWindow@@QAE@H_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseWindow@@QAE@H_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseWindow@@QAE@H_N@Z ENDP				; CBaseWindow::CBaseWindow
PUBLIC	?DoCreateWindow@CBaseWindow@@QAEJXZ		; CBaseWindow::DoCreateWindow
PUBLIC	?PrepareWindow@CBaseWindow@@UAEJXZ		; CBaseWindow::PrepareWindow
EXTRN	?AmGetLastErrorToHResult@@YGJXZ:PROC		; AmGetLastErrorToHResult
EXTRN	__imp__RegisterWindowMessageW@4:PROC
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
_BSS	SEGMENT
_MsgDestroy DD	01H DUP (?)
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?PrepareWindow@CBaseWindow@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PrepareWindow@CBaseWindow@@UAEJXZ PROC			; CBaseWindow::PrepareWindow, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN8@PrepareWin
	xor	eax, eax
	jmp	$LN9@PrepareWin
$LN8@PrepareWin:
; Line 52
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN7@PrepareWin
	push	52					; 00000034H
	push	OFFSET $SG81953
	push	OFFSET $SG81954
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@PrepareWin:
; Line 53
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN6@PrepareWin
	push	53					; 00000035H
	push	OFFSET $SG81956
	push	OFFSET $SG81957
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@PrepareWin:
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 60
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN5@PrepareWin
; Line 61
	mov	eax, -2147467259			; 80004005H
	jmp	$LN9@PrepareWin
$LN5@PrepareWin:
; Line 65
	mov	esi, esp
	push	OFFSET $SG81960
	call	DWORD PTR __imp__RegisterWindowMessageW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 68
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN4@PrepareWin
; Line 69
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	jmp	$LN9@PrepareWin
$LN4@PrepareWin:
; Line 72
	mov	esi, esp
	push	OFFSET $SG81962
	call	DWORD PTR __imp__RegisterWindowMessageW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 73
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN3@PrepareWin
; Line 74
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	jmp	SHORT $LN9@PrepareWin
$LN3@PrepareWin:
; Line 77
	mov	esi, esp
	push	OFFSET $SG81964
	call	DWORD PTR __imp__RegisterWindowMessageW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN2@PrepareWin
; Line 79
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	jmp	SHORT $LN9@PrepareWin
$LN2@PrepareWin:
; Line 82
	mov	esi, esp
	push	OFFSET $SG81966
	call	DWORD PTR __imp__RegisterWindowMessageW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _MsgDestroy, eax
; Line 83
	cmp	DWORD PTR _MsgDestroy, 0
	jne	SHORT $LN1@PrepareWin
; Line 84
	call	?AmGetLastErrorToHResult@@YGJXZ		; AmGetLastErrorToHResult
	jmp	SHORT $LN9@PrepareWin
$LN1@PrepareWin:
; Line 87
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoCreateWindow@CBaseWindow@@QAEJXZ	; CBaseWindow::DoCreateWindow
$LN9@PrepareWin:
; Line 88
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PrepareWindow@CBaseWindow@@UAEJXZ ENDP			; CBaseWindow::PrepareWindow
_TEXT	ENDS
PUBLIC	??1CBaseWindow@@UAE@XZ				; CBaseWindow::~CBaseWindow
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBaseWindow@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBaseWindow@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBaseWindow@@UAE@XZ$1
__ehfuncinfo$??1CBaseWindow@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CBaseWindow@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBaseWindow@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBaseWindow@@UAE@XZ PROC				; CBaseWindow::~CBaseWindow, COMDAT
; _this$ = ecx
; Line 97
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBaseWindow@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@CBaseWindo
	push	98					; 00000062H
	push	OFFSET $SG81972
	push	OFFSET $SG81973
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CBaseWindo:
; Line 99
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN3@CBaseWindo
	push	99					; 00000063H
	push	OFFSET $SG81975
	push	OFFSET $SG81976
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CBaseWindo:
; Line 100
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBaseWindow@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__unwindfunclet$??1CBaseWindow@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??1CBaseWindow@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBaseWindow@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBaseWindow@@UAE@XZ ENDP				; CBaseWindow::~CBaseWindow
PUBLIC	??BCAMEvent@@QBEPAXXZ				; CAMEvent::operator void *
PUBLIC	?DoneWithWindow@CBaseWindow@@UAEJXZ		; CBaseWindow::DoneWithWindow
EXTRN	?DbgBreakPoint@@YGXPB_W0H@Z:PROC		; DbgBreakPoint
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__GetParent@4:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	?DbgLogInfo@@YAXKKPB_WZZ:PROC			; DbgLogInfo
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	??1CAMEvent@@QAE@XZ:PROC			; CAMEvent::~CAMEvent
EXTRN	?WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z:PROC ; WaitDispatchingMessages
EXTRN	__imp__PostMessageW@16:PROC
EXTRN	??0CAMEvent@@QAE@H@Z:PROC			; CAMEvent::CAMEvent
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__GetWindowThreadProcessId@8:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DoneWithWindow@CBaseWindow@@UAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoneWithWindow@CBaseWindow@@UAEJXZ$0
__ehfuncinfo$?DoneWithWindow@CBaseWindow@@UAEJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DoneWithWindow@CBaseWindow@@UAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?DoneWithWindow@CBaseWindow@@UAEJXZ
_TEXT	SEGMENT
_hwnd$ = -32						; size = 4
_m_evDone$81984 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DoneWithWindow@CBaseWindow@@UAEJXZ PROC		; CBaseWindow::DoneWithWindow, COMDAT
; _this$ = ecx
; Line 112
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoneWithWindow@CBaseWindow@@UAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 113
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__IsWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN9@DoneWithWi
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__GetWindowThreadProcessId@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, eax
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	cmp	esi, eax
	je	$LN10@DoneWithWi
$LN9@DoneWithWi:
; Line 115
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__IsWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN8@DoneWithWi
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+108]
	test	ecx, ecx
	je	SHORT $LN7@DoneWithWi
; Line 119
	push	0
	lea	ecx, DWORD PTR _m_evDone$81984[ebp]
	call	??0CAMEvent@@QAE@H@Z			; CAMEvent::CAMEvent
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 125
	mov	esi, esp
	push	0
	lea	ecx, DWORD PTR _m_evDone$81984[ebp]
	call	??BCAMEvent@@QBEPAXXZ			; CAMEvent::operator void *
	push	eax
	mov	edx, DWORD PTR _MsgDestroy
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__PostMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 126
	push	0
	push	0
	push	0
	push	-1
	lea	ecx, DWORD PTR _m_evDone$81984[ebp]
	call	??BCAMEvent@@QBEPAXXZ			; CAMEvent::operator void *
	push	eax
	call	?WaitDispatchingMessages@@YGKPAXKPAUHWND__@@I0@Z ; WaitDispatchingMessages
; Line 127
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _m_evDone$81984[ebp]
	call	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
	jmp	SHORT $LN8@DoneWithWi
$LN7@DoneWithWi:
; Line 128
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _MsgDestroy
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DoneWithWi:
; Line 137
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 143
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN5@DoneWithWi
; Line 145
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@DoneWithWi
	push	145					; 00000091H
	push	OFFSET $SG81990
	push	OFFSET $SG81991
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@DoneWithWi:
; Line 146
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
$LN5@DoneWithWi:
; Line 150
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 152
	xor	eax, eax
	jmp	$LN11@DoneWithWi
$LN10@DoneWithWi:
; Line 154
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _hwnd$[ebp], eax
; Line 155
	cmp	DWORD PTR _hwnd$[ebp], 0
	jne	SHORT $LN3@DoneWithWi
; Line 156
	xor	eax, eax
	jmp	$LN11@DoneWithWi
$LN3@DoneWithWi:
; Line 159
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 160
	push	OFFSET $SG81994
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 164
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 165
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@DoneWithWi
	push	165					; 000000a5H
	push	OFFSET $SG81996
	push	OFFSET $SG81997
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@DoneWithWi:
; Line 166
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	push	OFFSET $SG81998
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 169
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 170
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	push	OFFSET $SG81999
	push	2
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 171
	mov	esi, esp
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DestroyWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@DoneWithWi
; Line 173
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	push	OFFSET $SG82001
	push	0
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 174
	push	174					; 000000aeH
	push	OFFSET $SG82002
	push	OFFSET $SG82003
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN1@DoneWithWi:
; Line 179
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 180
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 181
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 182
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 183
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 186
	xor	eax, eax
$LN11@DoneWithWi:
; Line 187
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@DoneWithWi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@DoneWithWi:
	DD	1
	DD	$LN16@DoneWithWi
$LN16@DoneWithWi:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@DoneWithWi
$LN14@DoneWithWi:
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	68					; 00000044H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoneWithWindow@CBaseWindow@@UAEJXZ$0:
	lea	ecx, DWORD PTR _m_evDone$81984[ebp]
	jmp	??1CAMEvent@@QAE@XZ			; CAMEvent::~CAMEvent
__ehhandler$?DoneWithWindow@CBaseWindow@@UAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoneWithWindow@CBaseWindow@@UAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoneWithWindow@CBaseWindow@@UAEJXZ ENDP		; CBaseWindow::DoneWithWindow
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BCAMEvent@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCAMEvent@@QBEPAXXZ PROC				; CAMEvent::operator void *, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCAMEvent@@QBEPAXXZ ENDP				; CAMEvent::operator void *
_TEXT	ENDS
PUBLIC	?InactivateWindow@CBaseWindow@@UAEJXZ		; CBaseWindow::InactivateWindow
EXTRN	__imp__ShowWindow@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InactivateWindow@CBaseWindow@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InactivateWindow@CBaseWindow@@UAEJXZ PROC		; CBaseWindow::InactivateWindow, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
; Line 197
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN1@Inactivate
; Line 200
	mov	eax, 1
	jmp	SHORT $LN2@Inactivate
$LN1@Inactivate:
; Line 203
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 204
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 205
	xor	eax, eax
$LN2@Inactivate:
; Line 206
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InactivateWindow@CBaseWindow@@UAEJXZ ENDP		; CBaseWindow::InactivateWindow
_TEXT	ENDS
PUBLIC	?CompleteConnect@CBaseWindow@@QAEJXZ		; CBaseWindow::CompleteConnect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CompleteConnect@CBaseWindow@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CompleteConnect@CBaseWindow@@QAEJXZ PROC		; CBaseWindow::CompleteConnect, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 212
	xor	eax, eax
; Line 213
	mov	esp, ebp
	pop	ebp
	ret	0
?CompleteConnect@CBaseWindow@@QAEJXZ ENDP		; CBaseWindow::CompleteConnect
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ActivateWindow@CBaseWindow@@UAEJXZ		; CBaseWindow::ActivateWindow
EXTRN	__imp__AdjustWindowRectEx@16:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__SetWindowPos@28:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ActivateWindow@CBaseWindow@@UAEJXZ
_TEXT	SEGMENT
_WindowFlags$ = -60					; size = 4
_ClientRect$ = -52					; size = 16
_WindowRect$ = -28					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ActivateWindow@CBaseWindow@@UAEJXZ PROC		; CBaseWindow::ActivateWindow, COMDAT
; _this$ = ecx
; Line 223
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 226
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 1
	je	SHORT $LN1@ActivateWi
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@ActivateWi
$LN1@ActivateWi:
; Line 232
	mov	esi, esp
	push	3
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 234
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 235
	mov	eax, 1
	jmp	$LN3@ActivateWi
$LN2@ActivateWi:
; Line 240
	mov	esi, esp
	lea	eax, DWORD PTR _ClientRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 241
	mov	esi, esp
	lea	ecx, DWORD PTR _WindowRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 243
	mov	esi, esp
	push	-20					; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	push	0
	mov	edi, esp
	push	-16					; fffffff0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	edx, DWORD PTR _ClientRect$[ebp]
	push	edx
	call	DWORD PTR __imp__AdjustWindowRectEx@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 247
	mov	DWORD PTR _WindowFlags$[ebp], 48	; 00000030H
; Line 248
	mov	eax, DWORD PTR _WindowRect$[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _WindowRect$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _WindowRect$[ebp], ecx
; Line 249
	mov	edx, DWORD PTR _WindowRect$[ebp+4]
	and	edx, 3
	mov	eax, DWORD PTR _WindowRect$[ebp+4]
	sub	eax, edx
	mov	DWORD PTR _WindowRect$[ebp+4], eax
; Line 257
	mov	esi, esp
	mov	ecx, DWORD PTR _WindowFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ClientRect$[ebp+12]
	sub	edx, DWORD PTR _ClientRect$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _ClientRect$[ebp+8]
	sub	eax, DWORD PTR _ClientRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _WindowRect$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _WindowRect$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 259
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 1
; Line 260
	xor	eax, eax
$LN3@ActivateWi:
; Line 261
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ActivateWi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@ActivateWi:
	DD	2
	DD	$LN7@ActivateWi
$LN7@ActivateWi:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN5@ActivateWi
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN6@ActivateWi
$LN6@ActivateWi:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN5@ActivateWi:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?ActivateWindow@CBaseWindow@@UAEJXZ ENDP		; CBaseWindow::ActivateWindow
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?PerformanceAlignWindow@CBaseWindow@@QAEJXZ	; CBaseWindow::PerformanceAlignWindow
EXTRN	__imp__MapWindowPoints@16:PROC
EXTRN	__imp__GetClientRect@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PerformanceAlignWindow@CBaseWindow@@QAEJXZ
_TEXT	SEGMENT
_WindowFlags$ = -60					; size = 4
_WindowRect$ = -52					; size = 16
_ClientRect$ = -28					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?PerformanceAlignWindow@CBaseWindow@@QAEJXZ PROC	; CBaseWindow::PerformanceAlignWindow, COMDAT
; _this$ = ecx
; Line 267
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 269
	mov	esi, esp
	lea	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 270
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 1
	je	SHORT $LN2@Performanc
	push	270					; 0000010eH
	push	OFFSET $SG82030
	push	OFFSET $SG82031
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Performanc:
; Line 274
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__GetParent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@Performanc
; Line 275
	xor	eax, eax
	jmp	$LN3@Performanc
$LN1@Performanc:
; Line 280
	mov	esi, esp
	lea	eax, DWORD PTR _ClientRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 281
	mov	esi, esp
	push	2
	lea	eax, DWORD PTR _ClientRect$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__MapWindowPoints@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 282
	mov	eax, DWORD PTR _ClientRect$[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _WindowRect$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _WindowRect$[ebp], ecx
; Line 283
	mov	edx, DWORD PTR _ClientRect$[ebp+4]
	and	edx, 3
	mov	eax, DWORD PTR _WindowRect$[ebp+4]
	sub	eax, edx
	mov	DWORD PTR _WindowRect$[ebp+4], eax
; Line 284
	mov	DWORD PTR _WindowFlags$[ebp], 17	; 00000011H
; Line 291
	mov	esi, esp
	mov	ecx, DWORD PTR _WindowFlags$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _WindowRect$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _WindowRect$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 293
	xor	eax, eax
$LN3@Performanc:
; Line 294
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Performanc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@Performanc:
	DD	2
	DD	$LN7@Performanc
$LN7@Performanc:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN5@Performanc
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN6@Performanc
$LN6@Performanc:
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN5@Performanc:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?PerformanceAlignWindow@CBaseWindow@@QAEJXZ ENDP	; CBaseWindow::PerformanceAlignWindow
_TEXT	ENDS
PUBLIC	?SetPalette@CBaseWindow@@QAEJXZ			; CBaseWindow::SetPalette
PUBLIC	??1CAutoLock@@QAE@XZ				; CAutoLock::~CAutoLock
PUBLIC	??0CAutoLock@@QAE@PAVCCritSec@@@Z		; CAutoLock::CAutoLock
PUBLIC	?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z	; CBaseWindow::SetPalette
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z$1
__ehfuncinfo$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z
_TEXT	SEGMENT
_cPaletteLock$82044 = -36				; size = 4
_cWindowLock$82043 = -24				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hPalette$ = 8						; size = 4
?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z PROC	; CBaseWindow::SetPalette, COMDAT
; _this$ = ecx
; Line 304
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 307
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	lea	ecx, DWORD PTR _cWindowLock$82043[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	lea	ecx, DWORD PTR _cPaletteLock$82044[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 309
	cmp	DWORD PTR _hPalette$[ebp], 0
	jne	SHORT $LN1@SetPalette
	push	309					; 00000135H
	push	OFFSET $SG82046
	push	OFFSET $SG82047
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetPalette:
; Line 310
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _hPalette$[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 311
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _cPaletteLock$82044[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cWindowLock$82043[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 312
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPalette@CBaseWindow@@QAEJXZ		; CBaseWindow::SetPalette
; Line 313
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SetPalette
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN10@SetPalette:
	DD	2
	DD	$LN9@SetPalette
$LN9@SetPalette:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@SetPalette
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN7@SetPalette
$LN7@SetPalette:
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@SetPalette:
	DB	99					; 00000063H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z$0:
	lea	ecx, DWORD PTR _cWindowLock$82043[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__unwindfunclet$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z$1:
	lea	ecx, DWORD PTR _cPaletteLock$82044[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetPalette@CBaseWindow@@UAEJPAUHPALETTE__@@@Z ENDP	; CBaseWindow::SetPalette
EXTRN	?Lock@CCritSec@@QAEXXZ:PROC			; CCritSec::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAutoLock@@QAE@PAVCCritSec@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plock$ = 8						; size = 4
??0CAutoLock@@QAE@PAVCCritSec@@@Z PROC			; CAutoLock::CAutoLock, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\wxutil.h
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plock$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 97
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAutoLock@@QAE@PAVCCritSec@@@Z ENDP			; CAutoLock::CAutoLock
_TEXT	ENDS
EXTRN	?Unlock@CCritSec@@QAEXXZ:PROC			; CCritSec::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoLock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoLock@@QAE@XZ PROC				; CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
; Line 102
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoLock@@QAE@XZ ENDP				; CAutoLock::~CAutoLock
_TEXT	ENDS
EXTRN	__imp__SelectPalette@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetPalette@CBaseWindow@@QAEJXZ
_TEXT	SEGMENT
$T83888 = -20						; size = 4
_cPaletteLock$82060 = -12				; size = 4
_this$ = -4						; size = 4
?SetPalette@CBaseWindow@@QAEJXZ PROC			; CBaseWindow::SetPalette, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
; Line 317
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 318
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	test	ecx, ecx
	jne	SHORT $LN4@SetPalette@2
; Line 319
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 320
	xor	eax, eax
	jmp	$LN5@SetPalette@2
; Line 321
	jmp	$LN5@SetPalette@2
$LN4@SetPalette@2:
; Line 323
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@SetPalette@2
	push	323					; 00000143H
	push	OFFSET $SG82055
	push	OFFSET $SG82056
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@SetPalette@2:
; Line 324
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	jne	SHORT $LN1@SetPalette@2
	push	324					; 00000144H
	push	OFFSET $SG82058
	push	OFFSET $SG82059
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetPalette@2:
; Line 326
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	lea	ecx, DWORD PTR _cPaletteLock$82060[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
; Line 327
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+65]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 328
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+65]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 330
	mov	DWORD PTR $T83888[ebp], 0
	lea	ecx, DWORD PTR _cPaletteLock$82060[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T83888[ebp]
$LN5@SetPalette@2:
; Line 332
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SetPalette@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@SetPalette@2:
	DD	1
	DD	$LN9@SetPalette@2
$LN9@SetPalette@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@SetPalette@2
$LN8@SetPalette@2:
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?SetPalette@CBaseWindow@@QAEJXZ ENDP			; CBaseWindow::SetPalette
_TEXT	ENDS
PUBLIC	?GetMemoryHDC@CBaseWindow@@QAEPAUHDC__@@XZ	; CBaseWindow::GetMemoryHDC
PUBLIC	?GetWindowHDC@CBaseWindow@@QAEPAUHDC__@@XZ	; CBaseWindow::GetWindowHDC
PUBLIC	?UnsetPalette@CBaseWindow@@QAEXXZ		; CBaseWindow::UnsetPalette
EXTRN	__imp__GetStockObject@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UnsetPalette@CBaseWindow@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UnsetPalette@CBaseWindow@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UnsetPalette@CBaseWindow@@QAEXXZ$1
__ehfuncinfo$?UnsetPalette@CBaseWindow@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?UnsetPalette@CBaseWindow@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?UnsetPalette@CBaseWindow@@QAEXXZ
_TEXT	SEGMENT
_hPalette$ = -44					; size = 4
_cPaletteLock$ = -36					; size = 4
_cWindowLock$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?UnsetPalette@CBaseWindow@@QAEXXZ PROC			; CBaseWindow::UnsetPalette, COMDAT
; _this$ = ecx
; Line 336
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UnsetPalette@CBaseWindow@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 337
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 338
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	lea	ecx, DWORD PTR _cPaletteLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 342
	mov	esi, esp
	push	15					; 0000000fH
	call	DWORD PTR __imp__GetStockObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hPalette$[ebp], eax
; Line 343
	cmp	DWORD PTR _hPalette$[ebp], 0
	jne	SHORT $LN1@UnsetPalet
	push	343					; 00000157H
	push	OFFSET $SG82071
	push	OFFSET $SG82072
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@UnsetPalet:
; Line 345
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _hPalette$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWindowHDC@CBaseWindow@@QAEPAUHDC__@@XZ ; CBaseWindow::GetWindowHDC
	push	eax
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 346
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hPalette$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMemoryHDC@CBaseWindow@@QAEPAUHDC__@@XZ ; CBaseWindow::GetMemoryHDC
	push	eax
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 348
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
; Line 349
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _cPaletteLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@UnsetPalet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@UnsetPalet:
	DD	2
	DD	$LN9@UnsetPalet
$LN9@UnsetPalet:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@UnsetPalet
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN7@UnsetPalet
$LN7@UnsetPalet:
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@UnsetPalet:
	DB	99					; 00000063H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UnsetPalette@CBaseWindow@@QAEXXZ$0:
	lea	ecx, DWORD PTR _cWindowLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__unwindfunclet$?UnsetPalette@CBaseWindow@@QAEXXZ$1:
	lea	ecx, DWORD PTR _cPaletteLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?UnsetPalette@CBaseWindow@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UnsetPalette@CBaseWindow@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?UnsetPalette@CBaseWindow@@QAEXXZ ENDP			; CBaseWindow::UnsetPalette
PUBLIC	?LockPaletteLock@CBaseWindow@@QAEXXZ		; CBaseWindow::LockPaletteLock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?LockPaletteLock@CBaseWindow@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LockPaletteLock@CBaseWindow@@QAEXXZ PROC		; CBaseWindow::LockPaletteLock, COMDAT
; _this$ = ecx
; Line 353
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 354
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?Lock@CCritSec@@QAEXXZ			; CCritSec::Lock
; Line 355
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?LockPaletteLock@CBaseWindow@@QAEXXZ ENDP		; CBaseWindow::LockPaletteLock
_TEXT	ENDS
PUBLIC	?UnlockPaletteLock@CBaseWindow@@QAEXXZ		; CBaseWindow::UnlockPaletteLock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?UnlockPaletteLock@CBaseWindow@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnlockPaletteLock@CBaseWindow@@QAEXXZ PROC		; CBaseWindow::UnlockPaletteLock, COMDAT
; _this$ = ecx
; Line 359
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 360
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?Unlock@CCritSec@@QAEXXZ		; CCritSec::Unlock
; Line 361
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UnlockPaletteLock@CBaseWindow@@QAEXXZ ENDP		; CBaseWindow::UnlockPaletteLock
_TEXT	ENDS
PUBLIC	?DoRealisePalette@CBaseWindow@@UAEJH@Z		; CBaseWindow::DoRealisePalette
EXTRN	__imp__GdiFlush@0:PROC
EXTRN	__imp__RealizePalette@4:PROC
EXTRN	?CritCheckOut@@YGHPAVCCritSec@@@Z:PROC		; CritCheckOut
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DoRealisePalette@CBaseWindow@@UAEJH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoRealisePalette@CBaseWindow@@UAEJH@Z$0
__ehfuncinfo$?DoRealisePalette@CBaseWindow@@UAEJH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DoRealisePalette@CBaseWindow@@UAEJH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?DoRealisePalette@CBaseWindow@@UAEJH@Z
_TEXT	SEGMENT
tv86 = -36						; size = 4
$T83913 = -32						; size = 4
_cPaletteLock$82083 = -24				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bForceBackground$ = 8					; size = 4
?DoRealisePalette@CBaseWindow@@UAEJH@Z PROC		; CBaseWindow::DoRealisePalette, COMDAT
; _this$ = ecx
; Line 367
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoRealisePalette@CBaseWindow@@UAEJH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 369
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	lea	ecx, DWORD PTR _cPaletteLock$82083[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 371
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN7@DoRealiseP
; Line 372
	mov	DWORD PTR $T83913[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cPaletteLock$82083[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T83913[ebp]
	jmp	$LN8@DoRealiseP
$LN7@DoRealiseP:
; Line 376
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN6@DoRealiseP
	push	376					; 00000178H
	push	OFFSET $SG82087
	push	OFFSET $SG82088
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@DoRealiseP:
; Line 377
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN5@DoRealiseP
	push	377					; 00000179H
	push	OFFSET $SG82090
	push	OFFSET $SG82091
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@DoRealiseP:
; Line 379
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+65]
	test	edx, edx
	jne	SHORT $LN10@DoRealiseP
	cmp	DWORD PTR _bForceBackground$[ebp], 0
	jne	SHORT $LN10@DoRealiseP
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN11@DoRealiseP
$LN10@DoRealiseP:
	mov	DWORD PTR tv86[ebp], 1
$LN11@DoRealiseP:
	mov	esi, esp
	mov	eax, DWORD PTR tv86[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 380
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+65]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	DWORD PTR __imp__SelectPalette@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 381
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cPaletteLock$82083[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
; Line 394
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	call	?CritCheckOut@@YGHPAVCCritSec@@@Z	; CritCheckOut
	test	eax, eax
	jne	SHORT $LN4@DoRealiseP
	push	394					; 0000018aH
	push	OFFSET $SG82093
	push	OFFSET $SG82094
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@DoRealiseP:
; Line 395
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	?CritCheckOut@@YGHPAVCCritSec@@@Z	; CritCheckOut
	test	eax, eax
	jne	SHORT $LN3@DoRealiseP
	push	395					; 0000018bH
	push	OFFSET $SG82096
	push	OFFSET $SG82097
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@DoRealiseP:
; Line 397
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__RealizePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN2@DoRealiseP
	push	397					; 0000018dH
	push	OFFSET $SG82099
	push	OFFSET $SG82100
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@DoRealiseP:
; Line 398
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	DWORD PTR __imp__RealizePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN1@DoRealiseP
	push	398					; 0000018eH
	push	OFFSET $SG82102
	push	OFFSET $SG82103
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DoRealiseP:
; Line 400
	mov	esi, esp
	call	DWORD PTR __imp__GdiFlush@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
$LN8@DoRealiseP:
; Line 401
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@DoRealiseP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN16@DoRealiseP:
	DD	1
	DD	$LN15@DoRealiseP
$LN15@DoRealiseP:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@DoRealiseP
$LN13@DoRealiseP:
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoRealisePalette@CBaseWindow@@UAEJH@Z$0:
	lea	ecx, DWORD PTR _cPaletteLock$82083[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?DoRealisePalette@CBaseWindow@@UAEJH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoRealisePalette@CBaseWindow@@UAEJH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoRealisePalette@CBaseWindow@@UAEJH@Z ENDP		; CBaseWindow::DoRealisePalette
PUBLIC	?WndProc@@YGJPAUHWND__@@IIJ@Z			; WndProc
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__DefWindowProcW@16:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_lasterror$82124 = -12					; size = 4
_rc$82120 = -8						; size = 4
_pBaseWindow$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?WndProc@@YGJPAUHWND__@@IIJ@Z PROC			; WndProc, COMDAT
; Line 410
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 418
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pBaseWindow$[ebp], eax
; Line 419
	cmp	DWORD PTR _pBaseWindow$[ebp], 0
	jne	$LN9@WndProc
; Line 430
	cmp	DWORD PTR _uMsg$[ebp], 129		; 00000081H
	jne	SHORT $LN8@WndProc
; Line 431
	mov	esi, esp
	push	-20					; ffffffecH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, -4194305				; ffbfffffH
	mov	esi, esp
	push	eax
	push	-20					; ffffffecH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SetWindowLongW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@WndProc:
; Line 435
	cmp	DWORD PTR _uMsg$[ebp], 129		; 00000081H
	jne	SHORT $LN6@WndProc
	mov	eax, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pBaseWindow$[ebp], edx
	cmp	DWORD PTR _pBaseWindow$[ebp], 0
	jne	SHORT $LN7@WndProc
$LN6@WndProc:
; Line 437
	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DefWindowProcW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN10@WndProc
$LN7@WndProc:
; Line 442
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__SetLastError@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 444
	mov	esi, esp
	mov	ecx, DWORD PTR _pBaseWindow$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SetWindowLongW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rc$82120[ebp], eax
; Line 446
	cmp	DWORD PTR _rc$82120[ebp], 0
	jne	SHORT $LN9@WndProc
; Line 449
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lasterror$82124[ebp], eax
; Line 450
	cmp	DWORD PTR _lasterror$82124[ebp], 0
	je	SHORT $LN9@WndProc
	push	450					; 000001c2H
	push	OFFSET $SG82126
	push	OFFSET $SG82127
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN9@WndProc:
; Line 458
	mov	eax, DWORD PTR _uMsg$[ebp]
	cmp	eax, DWORD PTR _MsgDestroy
	jne	SHORT $LN3@WndProc
	cmp	DWORD PTR _uMsg$[ebp], 0
	je	SHORT $LN3@WndProc
; Line 459
	mov	ecx, DWORD PTR _pBaseWindow$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pBaseWindow$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 460
	mov	ecx, DWORD PTR _pBaseWindow$[ebp]
	movzx	edx, BYTE PTR [ecx+108]
	test	edx, edx
	je	SHORT $LN2@WndProc
; Line 461
	mov	esi, esp
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	call	DWORD PTR __imp__SetEvent@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@WndProc
	push	461					; 000001cdH
	push	OFFSET $SG82132
	push	OFFSET $SG82133
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@WndProc:
; Line 463
	xor	eax, eax
	jmp	SHORT $LN10@WndProc
$LN3@WndProc:
; Line 465
	mov	esi, esp
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _uMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBaseWindow$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pBaseWindow$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@WndProc:
; Line 466
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?WndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; WndProc
_TEXT	ENDS
PUBLIC	?OnSize@CBaseWindow@@UAEHJJ@Z			; CBaseWindow::OnSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnSize@CBaseWindow@@UAEHJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Width$ = 8						; size = 4
_Height$ = 12						; size = 4
?OnSize@CBaseWindow@@UAEHJJ@Z PROC			; CBaseWindow::OnSize, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 475
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Width$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 476
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Height$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 477
	mov	eax, 1
; Line 478
	mov	esp, ebp
	pop	ebp
	ret	8
?OnSize@CBaseWindow@@UAEHJJ@Z ENDP			; CBaseWindow::OnSize
_TEXT	ENDS
PUBLIC	?OnClose@CBaseWindow@@UAEHXZ			; CBaseWindow::OnClose
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnClose@CBaseWindow@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnClose@CBaseWindow@@UAEHXZ PROC			; CBaseWindow::OnClose, COMDAT
; _this$ = ecx
; Line 484
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 485
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 486
	mov	eax, 1
; Line 487
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnClose@CBaseWindow@@UAEHXZ ENDP			; CBaseWindow::OnClose
_TEXT	ENDS
PUBLIC	?UninitialiseWindow@CBaseWindow@@UAEJXZ		; CBaseWindow::UninitialiseWindow
EXTRN	__imp__ReleaseDC@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?UninitialiseWindow@CBaseWindow@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UninitialiseWindow@CBaseWindow@@UAEJXZ PROC		; CBaseWindow::UninitialiseWindow, COMDAT
; _this$ = ecx
; Line 497
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@Uninitiali
; Line 501
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN7@Uninitiali
	push	501					; 000001f5H
	push	OFFSET $SG82147
	push	OFFSET $SG82148
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@Uninitiali:
; Line 502
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN6@Uninitiali
	push	502					; 000001f6H
	push	OFFSET $SG82150
	push	OFFSET $SG82151
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@Uninitiali:
; Line 503
	xor	eax, eax
	jmp	$LN9@Uninitiali
$LN8@Uninitiali:
; Line 508
	mov	esi, esp
	call	DWORD PTR __imp__GdiFlush@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@Uninitiali
	push	508					; 000001fcH
	push	OFFSET $SG82153
	push	OFFSET $SG82154
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@Uninitiali:
; Line 510
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@Uninitiali
; Line 512
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__ReleaseDC@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@Uninitiali
	push	512					; 00000200H
	push	OFFSET $SG82157
	push	OFFSET $SG82158
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@Uninitiali:
; Line 513
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN4@Uninitiali:
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN2@Uninitiali
; Line 518
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@Uninitiali
	push	518					; 00000206H
	push	OFFSET $SG82161
	push	OFFSET $SG82162
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Uninitiali:
; Line 519
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
$LN2@Uninitiali:
; Line 523
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 525
	xor	eax, eax
$LN9@Uninitiali:
; Line 526
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UninitialiseWindow@CBaseWindow@@UAEJXZ ENDP		; CBaseWindow::UninitialiseWindow
_TEXT	ENDS
PUBLIC	?InitialiseWindow@CBaseWindow@@UAEJPAUHWND__@@@Z ; CBaseWindow::InitialiseWindow
EXTRN	__imp__SetStretchBltMode@8:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__GetDC@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitialiseWindow@CBaseWindow@@UAEJPAUHWND__@@@Z
_TEXT	SEGMENT
tv81 = -12						; size = 4
tv74 = -8						; size = 4
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?InitialiseWindow@CBaseWindow@@UAEJPAUHWND__@@@Z PROC	; CBaseWindow::InitialiseWindow, COMDAT
; _this$ = ecx
; Line 537
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 540
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@Initialise
	push	540					; 0000021cH
	push	OFFSET $SG82168
	push	OFFSET $SG82169
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@Initialise:
; Line 541
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 543
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN5@Initialise
; Line 545
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+12], eax
	cmp	DWORD PTR tv74[ebp], 0
	jne	SHORT $LN4@Initialise
	push	545					; 00000221H
	push	OFFSET $SG82172
	push	OFFSET $SG82173
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@Initialise:
; Line 546
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__CreateCompatibleDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv81[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR [eax+56], ecx
	cmp	DWORD PTR tv81[ebp], 0
	jne	SHORT $LN3@Initialise
	push	546					; 00000222H
	push	OFFSET $SG82175
	push	OFFSET $SG82176
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@Initialise:
; Line 548
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__SetStretchBltMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@Initialise
	push	548					; 00000224H
	push	OFFSET $SG82178
	push	OFFSET $SG82179
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Initialise:
; Line 549
	mov	esi, esp
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	DWORD PTR __imp__SetStretchBltMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@Initialise
	push	549					; 00000225H
	push	OFFSET $SG82181
	push	OFFSET $SG82182
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@Initialise:
; Line 552
	xor	eax, eax
; Line 553
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InitialiseWindow@CBaseWindow@@UAEJPAUHWND__@@@Z ENDP	; CBaseWindow::InitialiseWindow
_TEXT	ENDS
EXTRN	__imp__CreateWindowExW@48:PROC
EXTRN	__imp__RegisterClassW@4:PROC
EXTRN	__imp__LoadCursorW@8:PROC
EXTRN	__imp__GetClassInfoW@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DoCreateWindow@CBaseWindow@@QAEJXZ
_TEXT	SEGMENT
_Error$82201 = -76					; size = 4
_pBaseWindow$ = -68					; size = 4
_hwnd$ = -60						; size = 4
_bRegistered$ = -56					; size = 4
_wndclass$ = -48					; size = 40
_this$ = -4						; size = 4
?DoCreateWindow@CBaseWindow@@QAEJXZ PROC		; CBaseWindow::DoCreateWindow, COMDAT
; _this$ = ecx
; Line 556
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 563
	mov	esi, esp
	lea	eax, DWORD PTR _wndclass$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetClassInfoW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bRegistered$[ebp], eax
; Line 569
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN4@DoCreateWi
; Line 571
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN4@DoCreateWi:
; Line 574
	cmp	DWORD PTR _bRegistered$[ebp], 0
	jne	SHORT $LN3@DoCreateWi
; Line 578
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _wndclass$[ebp+36], ecx
; Line 579
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _wndclass$[ebp], eax
; Line 580
	mov	DWORD PTR _wndclass$[ebp+4], OFFSET ?WndProc@@YGJPAUHWND__@@IIJ@Z ; WndProc
; Line 581
	mov	DWORD PTR _wndclass$[ebp+8], 0
; Line 582
	mov	DWORD PTR _wndclass$[ebp+12], 4
; Line 583
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _wndclass$[ebp+16], edx
; Line 584
	mov	DWORD PTR _wndclass$[ebp+20], 0
; Line 585
	mov	esi, esp
	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wndclass$[ebp+24], eax
; Line 586
	mov	DWORD PTR _wndclass$[ebp+28], 0
; Line 587
	mov	DWORD PTR _wndclass$[ebp+32], 0
; Line 589
	mov	esi, esp
	lea	eax, DWORD PTR _wndclass$[ebp]
	push	eax
	call	DWORD PTR __imp__RegisterClassW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DoCreateWi:
; Line 596
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pBaseWindow$[ebp], ecx
; Line 608
	mov	esi, esp
	lea	edx, DWORD PTR _pBaseWindow$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	push	0
	push	240					; 000000f0H
	push	320					; 00000140H
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	push	OFFSET $SG82199
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__CreateWindowExW@48
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hwnd$[ebp], eax
; Line 614
	cmp	DWORD PTR _hwnd$[ebp], 0
	jne	SHORT $LN2@DoCreateWi
; Line 615
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Error$82201[ebp], eax
; Line 616
	mov	eax, DWORD PTR _Error$82201[ebp]
	or	eax, -2147024896			; 80070000H
	jmp	SHORT $LN5@DoCreateWi
$LN2@DoCreateWi:
; Line 620
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _this$[ebp]
	je	SHORT $LN1@DoCreateWi
	push	620					; 0000026cH
	push	OFFSET $SG82208
	push	OFFSET $SG82209
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DoCreateWi:
; Line 628
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 631
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	push	OFFSET $SG82210
	push	2
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 633
	xor	eax, eax
$LN5@DoCreateWi:
; Line 634
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@DoCreateWi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@DoCreateWi:
	DD	2
	DD	$LN9@DoCreateWi
$LN9@DoCreateWi:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN7@DoCreateWi
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN8@DoCreateWi
$LN8@DoCreateWi:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN7@DoCreateWi:
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
?DoCreateWindow@CBaseWindow@@QAEJXZ ENDP		; CBaseWindow::DoCreateWindow
_TEXT	ENDS
PUBLIC	?OnReceiveMessage@CBaseWindow@@UAEJPAUHWND__@@IIJ@Z ; CBaseWindow::OnReceiveMessage
EXTRN	__imp__InvalidateRect@12:PROC
EXTRN	__imp__SetForegroundWindow@4:PROC
EXTRN	__imp__IsWindowVisible@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnReceiveMessage@CBaseWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv159 = -20						; size = 4
_bVisible$82232 = -16					; size = 4
_HwndTop$82229 = -12					; size = 4
_bVisible$82224 = -8					; size = 4
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?OnReceiveMessage@CBaseWindow@@UAEJPAUHWND__@@IIJ@Z PROC ; CBaseWindow::OnReceiveMessage, COMDAT
; _this$ = ecx
; Line 643
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 644
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN17@OnReceiveM
	push	644					; 00000284H
	push	OFFSET $SG82220
	push	OFFSET $SG82221
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN17@OnReceiveM:
; Line 646
	mov	esi, esp
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _uMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN16@OnReceiveM
; Line 647
	xor	eax, eax
	jmp	$LN18@OnReceiveM
$LN16@OnReceiveM:
; Line 655
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uMsg$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jne	SHORT $LN15@OnReceiveM
; Line 657
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bVisible$82224[ebp], eax
; Line 660
	mov	ecx, DWORD PTR _bVisible$82224[ebp]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 16					; 00000010H
	or	ecx, 67					; 00000043H
	mov	esi, esp
	push	ecx
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 663
	cmp	DWORD PTR _wParam$[ebp], 1
	jne	SHORT $LN14@OnReceiveM
; Line 664
	mov	esi, esp
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetForegroundWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@OnReceiveM:
; Line 666
	mov	eax, 1
	jmp	$LN18@OnReceiveM
$LN15@OnReceiveM:
; Line 675
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uMsg$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jne	SHORT $LN13@OnReceiveM
; Line 676
	mov	eax, DWORD PTR _wParam$[ebp]
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, -1
	mov	DWORD PTR _HwndTop$82229[ebp], eax
; Line 677
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bVisible$82232[ebp], eax
; Line 681
	mov	edx, DWORD PTR _wParam$[ebp]
	sub	edx, 1
	neg	edx
	sbb	edx, edx
	and	edx, -64				; ffffffc0H
	add	edx, 64					; 00000040H
	or	edx, 3
	mov	eax, DWORD PTR _bVisible$82232[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 16					; 00000010H
	or	edx, eax
	mov	esi, esp
	push	edx
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _HwndTop$82229[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SetWindowPos@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 682
	mov	eax, 1
	jmp	$LN18@OnReceiveM
$LN13@OnReceiveM:
; Line 686
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uMsg$[ebp]
	cmp	ecx, DWORD PTR [eax+52]
	jne	SHORT $LN12@OnReceiveM
; Line 687
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _hwnd$[ebp]
	je	SHORT $LN11@OnReceiveM
	push	687					; 000002afH
	push	OFFSET $SG82236
	push	OFFSET $SG82237
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN11@OnReceiveM:
; Line 688
	mov	esi, esp
	push	783					; 0000030fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN18@OnReceiveM
$LN12@OnReceiveM:
; Line 691
	mov	ecx, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv159[ebp], ecx
	cmp	DWORD PTR tv159[ebp], 21		; 00000015H
	ja	SHORT $LN20@OnReceiveM
	cmp	DWORD PTR tv159[ebp], 21		; 00000015H
	je	SHORT $LN8@OnReceiveM
	cmp	DWORD PTR tv159[ebp], 3
	je	$LN4@OnReceiveM
	cmp	DWORD PTR tv159[ebp], 5
	je	$LN2@OnReceiveM
	cmp	DWORD PTR tv159[ebp], 16		; 00000010H
	je	$LN1@OnReceiveM
	jmp	$LN9@OnReceiveM
$LN20@OnReceiveM:
	cmp	DWORD PTR tv159[ebp], 783		; 0000030fH
	je	SHORT $LN6@OnReceiveM
	cmp	DWORD PTR tv159[ebp], 785		; 00000311H
	je	SHORT $LN7@OnReceiveM
	jmp	$LN9@OnReceiveM
$LN8@OnReceiveM:
; Line 697
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 698
	mov	eax, 1
	jmp	$LN18@OnReceiveM
$LN7@OnReceiveM:
; Line 703
	mov	esi, esp
	mov	eax, DWORD PTR _uMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 704
	xor	eax, eax
	jmp	$LN18@OnReceiveM
$LN6@OnReceiveM:
; Line 711
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _hwnd$[ebp]
	je	SHORT $LN5@OnReceiveM
	push	711					; 000002c7H
	push	OFFSET $SG82249
	push	OFFSET $SG82250
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@OnReceiveM:
; Line 712
	mov	esi, esp
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN18@OnReceiveM
$LN4@OnReceiveM:
; Line 719
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@OnReceiveM
; Line 720
	mov	esi, esp
	push	0
	push	0
	push	15					; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__PostMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@OnReceiveM:
; Line 722
	jmp	SHORT $LN9@OnReceiveM
$LN2@OnReceiveM:
; Line 728
	mov	ecx, DWORD PTR _lParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 729
	xor	eax, eax
	jmp	SHORT $LN18@OnReceiveM
$LN1@OnReceiveM:
; Line 735
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 736
	xor	eax, eax
	jmp	SHORT $LN18@OnReceiveM
$LN9@OnReceiveM:
; Line 738
	mov	esi, esp
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _uMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__DefWindowProcW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@OnReceiveM:
; Line 739
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?OnReceiveMessage@CBaseWindow@@UAEJPAUHWND__@@IIJ@Z ENDP ; CBaseWindow::OnReceiveMessage
_TEXT	ENDS
PUBLIC	?OnPaletteChange@CBaseWindow@@MAEJPAUHWND__@@I@Z ; CBaseWindow::OnPaletteChange
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnPaletteChange@CBaseWindow@@MAEJPAUHWND__@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_Message$ = 12						; size = 4
?OnPaletteChange@CBaseWindow@@MAEJPAUHWND__@@I@Z PROC	; CBaseWindow::OnPaletteChange, COMDAT
; _this$ = ecx
; Line 750
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 753
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN6@OnPaletteC
	cmp	DWORD PTR _hwnd$[ebp], 0
	jne	SHORT $LN7@OnPaletteC
$LN6@OnPaletteC:
; Line 754
	xor	eax, eax
	jmp	$LN8@OnPaletteC
$LN7@OnPaletteC:
; Line 756
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+66]
	test	edx, edx
	je	SHORT $LN5@OnPaletteC
	push	756					; 000002f4H
	push	OFFSET $SG82270
	push	OFFSET $SG82271
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@OnPaletteC:
; Line 760
	cmp	DWORD PTR _Message$[ebp], 783		; 0000030fH
	je	SHORT $LN3@OnPaletteC
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hwnd$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	$LN4@OnPaletteC
$LN3@OnPaletteC:
; Line 765
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__IsWindowVisible@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@OnPaletteC
; Line 766
	push	OFFSET $SG82275
	push	1
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 767
	xor	eax, eax
	jmp	SHORT $LN8@OnPaletteC
$LN2@OnPaletteC:
; Line 772
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+66], 1
; Line 774
	xor	edx, edx
	cmp	DWORD PTR _Message$[ebp], 783		; 0000030fH
	setne	dl
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 776
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+66], 0
; Line 780
	cmp	DWORD PTR _Message$[ebp], 785		; 00000311H
	jne	SHORT $LN4@OnPaletteC
; Line 781
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@OnPaletteC:
; Line 785
	mov	eax, 1
$LN8@OnPaletteC:
; Line 786
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?OnPaletteChange@CBaseWindow@@MAEJPAUHWND__@@I@Z ENDP	; CBaseWindow::OnPaletteChange
_TEXT	ENDS
PUBLIC	?WindowExists@CBaseWindow@@QAE_NXZ		; CBaseWindow::WindowExists
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WindowExists@CBaseWindow@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WindowExists@CBaseWindow@@QAE_NXZ PROC			; CBaseWindow::WindowExists, COMDAT
; _this$ = ecx
; Line 792
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 793
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__IsWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax
; Line 794
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WindowExists@CBaseWindow@@QAE_NXZ ENDP			; CBaseWindow::WindowExists
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetDefaultRect@CBaseWindow@@UAE?AUtagRECT@@XZ	; CBaseWindow::GetDefaultRect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDefaultRect@CBaseWindow@@UAE?AUtagRECT@@XZ
_TEXT	SEGMENT
_DefaultRect$ = -28					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetDefaultRect@CBaseWindow@@UAE?AUtagRECT@@XZ PROC	; CBaseWindow::GetDefaultRect, COMDAT
; _this$ = ecx
; Line 800
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 801
	mov	DWORD PTR _DefaultRect$[ebp], 0
	mov	DWORD PTR _DefaultRect$[ebp+4], 0
	mov	DWORD PTR _DefaultRect$[ebp+8], 320	; 00000140H
	mov	DWORD PTR _DefaultRect$[ebp+12], 240	; 000000f0H
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@GetDefault
	push	802					; 00000322H
	push	OFFSET $SG82288
	push	OFFSET $SG82289
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetDefault:
; Line 804
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _DefaultRect$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _DefaultRect$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _DefaultRect$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _DefaultRect$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 805
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GetDefault
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN6@GetDefault:
	DD	1
	DD	$LN5@GetDefault
$LN5@GetDefault:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN4@GetDefault
$LN4@GetDefault:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?GetDefaultRect@CBaseWindow@@UAE?AUtagRECT@@XZ ENDP	; CBaseWindow::GetDefaultRect
_TEXT	ENDS
PUBLIC	?GetWindowWidth@CBaseWindow@@QAEJXZ		; CBaseWindow::GetWindowWidth
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetWindowWidth@CBaseWindow@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWindowWidth@CBaseWindow@@QAEJXZ PROC		; CBaseWindow::GetWindowWidth, COMDAT
; _this$ = ecx
; Line 811
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 812
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@GetWindowW
	push	812					; 0000032cH
	push	OFFSET $SG82294
	push	OFFSET $SG82295
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetWindowW:
; Line 814
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
; Line 815
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWindowWidth@CBaseWindow@@QAEJXZ ENDP		; CBaseWindow::GetWindowWidth
_TEXT	ENDS
PUBLIC	?GetWindowHeight@CBaseWindow@@QAEJXZ		; CBaseWindow::GetWindowHeight
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetWindowHeight@CBaseWindow@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWindowHeight@CBaseWindow@@QAEJXZ PROC		; CBaseWindow::GetWindowHeight, COMDAT
; _this$ = ecx
; Line 821
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 822
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@GetWindowH
	push	822					; 00000336H
	push	OFFSET $SG82300
	push	OFFSET $SG82301
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetWindowH:
; Line 824
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
; Line 825
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWindowHeight@CBaseWindow@@QAEJXZ ENDP		; CBaseWindow::GetWindowHeight
_TEXT	ENDS
PUBLIC	?GetWindowHWND@CBaseWindow@@QAEPAUHWND__@@XZ	; CBaseWindow::GetWindowHWND
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetWindowHWND@CBaseWindow@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWindowHWND@CBaseWindow@@QAEPAUHWND__@@XZ PROC	; CBaseWindow::GetWindowHWND, COMDAT
; _this$ = ecx
; Line 831
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 832
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@GetWindowH@2
	push	832					; 00000340H
	push	OFFSET $SG82306
	push	OFFSET $SG82307
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetWindowH@2:
; Line 834
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
; Line 835
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWindowHWND@CBaseWindow@@QAEPAUHWND__@@XZ ENDP	; CBaseWindow::GetWindowHWND
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetWindowHDC@CBaseWindow@@QAEPAUHDC__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWindowHDC@CBaseWindow@@QAEPAUHDC__@@XZ PROC		; CBaseWindow::GetWindowHDC, COMDAT
; _this$ = ecx
; Line 841
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 842
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@GetWindowH@3
	push	842					; 0000034aH
	push	OFFSET $SG82312
	push	OFFSET $SG82313
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@GetWindowH@3:
; Line 843
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN1@GetWindowH@3
	push	843					; 0000034bH
	push	OFFSET $SG82315
	push	OFFSET $SG82316
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetWindowH@3:
; Line 844
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
; Line 845
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWindowHDC@CBaseWindow@@QAEPAUHDC__@@XZ ENDP		; CBaseWindow::GetWindowHDC
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMemoryHDC@CBaseWindow@@QAEPAUHDC__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMemoryHDC@CBaseWindow@@QAEPAUHDC__@@XZ PROC		; CBaseWindow::GetMemoryHDC, COMDAT
; _this$ = ecx
; Line 851
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 852
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@GetMemoryH
	push	852					; 00000354H
	push	OFFSET $SG82321
	push	OFFSET $SG82322
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@GetMemoryH:
; Line 853
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	jne	SHORT $LN1@GetMemoryH
	push	853					; 00000355H
	push	OFFSET $SG82324
	push	OFFSET $SG82325
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetMemoryH:
; Line 854
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
; Line 855
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMemoryHDC@CBaseWindow@@QAEPAUHDC__@@XZ ENDP		; CBaseWindow::GetMemoryHDC
_TEXT	ENDS
PUBLIC	?GetPalette@CBaseWindow@@QAEPAUHPALETTE__@@XZ	; CBaseWindow::GetPalette
EXTRN	?CritCheckIn@@YGHPAVCCritSec@@@Z:PROC		; CritCheckIn
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetPalette@CBaseWindow@@QAEPAUHPALETTE__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPalette@CBaseWindow@@QAEPAUHPALETTE__@@XZ PROC	; CBaseWindow::GetPalette, COMDAT
; _this$ = ecx
; Line 860
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 863
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	?CritCheckIn@@YGHPAVCCritSec@@@Z	; CritCheckIn
	test	eax, eax
	jne	SHORT $LN1@GetPalette
	push	863					; 0000035fH
	push	OFFSET $SG82330
	push	OFFSET $SG82331
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetPalette:
; Line 864
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+60]
; Line 865
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPalette@CBaseWindow@@QAEPAUHPALETTE__@@XZ ENDP	; CBaseWindow::GetPalette
_TEXT	ENDS
PUBLIC	?DoShowWindow@CBaseWindow@@QAEJJ@Z		; CBaseWindow::DoShowWindow
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DoShowWindow@CBaseWindow@@QAEJJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ShowCmd$ = 8						; size = 4
?DoShowWindow@CBaseWindow@@QAEJJ@Z PROC			; CBaseWindow::DoShowWindow, COMDAT
; _this$ = ecx
; Line 874
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 875
	mov	esi, esp
	mov	eax, DWORD PTR _ShowCmd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 876
	xor	eax, eax
; Line 877
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DoShowWindow@CBaseWindow@@QAEJJ@Z ENDP			; CBaseWindow::DoShowWindow
_TEXT	ENDS
PUBLIC	?PaintWindow@CBaseWindow@@QAEXH@Z		; CBaseWindow::PaintWindow
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PaintWindow@CBaseWindow@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bErase$ = 8						; size = 4
?PaintWindow@CBaseWindow@@QAEXH@Z PROC			; CBaseWindow::PaintWindow, COMDAT
; _this$ = ecx
; Line 883
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	mov	esi, esp
	mov	eax, DWORD PTR _bErase$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__InvalidateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 885
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PaintWindow@CBaseWindow@@QAEXH@Z ENDP			; CBaseWindow::PaintWindow
_TEXT	ENDS
PUBLIC	?DoSetWindowForeground@CBaseWindow@@QAEXH@Z	; CBaseWindow::DoSetWindowForeground
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DoSetWindowForeground@CBaseWindow@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bFocus$ = 8						; size = 4
?DoSetWindowForeground@CBaseWindow@@QAEXH@Z PROC	; CBaseWindow::DoSetWindowForeground, COMDAT
; _this$ = ecx
; Line 895
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 896
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _bFocus$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 897
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DoSetWindowForeground@CBaseWindow@@QAEXH@Z ENDP	; CBaseWindow::DoSetWindowForeground
_TEXT	ENDS
PUBLIC	?ResetPaletteVersion@CDrawImage@@QAEXXZ		; CDrawImage::ResetPaletteVersion
PUBLIC	??0CRefTime@@QAE@XZ				; CRefTime::CRefTime
PUBLIC	??_7CDrawImage@@6B@				; CDrawImage::`vftable'
PUBLIC	??0CDrawImage@@QAE@PAVCBaseWindow@@@Z		; CDrawImage::CDrawImage
PUBLIC	??_R4CDrawImage@@6B@				; CDrawImage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDrawImage@@@8				; CDrawImage `RTTI Type Descriptor'
PUBLIC	??_R3CDrawImage@@8				; CDrawImage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDrawImage@@8				; CDrawImage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDrawImage@@8			; CDrawImage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ScaleSourceRect@CDrawImage@@UAE?AUtagRECT@@PBU2@@Z ; CDrawImage::ScaleSourceRect
EXTRN	__imp__SetRectEmpty@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CDrawImage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDrawImage@@8 DD FLAT:??_R0?AVCDrawImage@@@8 ; CDrawImage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDrawImage@@8
rdata$r	ENDS
;	COMDAT ??_R2CDrawImage@@8
rdata$r	SEGMENT
??_R2CDrawImage@@8 DD FLAT:??_R1A@?0A@EA@CDrawImage@@8	; CDrawImage::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDrawImage@@8
rdata$r	SEGMENT
??_R3CDrawImage@@8 DD 00H				; CDrawImage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDrawImage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDrawImage@@@8
_DATA	SEGMENT
??_R0?AVCDrawImage@@@8 DD FLAT:??_7type_info@@6B@	; CDrawImage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDrawImage@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDrawImage@@6B@
rdata$r	SEGMENT
??_R4CDrawImage@@6B@ DD 00H				; CDrawImage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDrawImage@@@8
	DD	FLAT:??_R3CDrawImage@@8
rdata$r	ENDS
;	COMDAT ??_7CDrawImage@@6B@
CONST	SEGMENT
??_7CDrawImage@@6B@ DD FLAT:??_R4CDrawImage@@6B@	; CDrawImage::`vftable'
	DD	FLAT:?ScaleSourceRect@CDrawImage@@UAE?AUtagRECT@@PBU2@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDrawImage@@QAE@PAVCBaseWindow@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pBaseWindow$ = 8					; size = 4
??0CDrawImage@@QAE@PAVCBaseWindow@@@Z PROC		; CDrawImage::CDrawImage, COMDAT
; _this$ = ecx
; Line 912
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDrawImage@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pBaseWindow$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0CRefTime@@QAE@XZ			; CRefTime::CRefTime
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 913
	cmp	DWORD PTR _pBaseWindow$[ebp], 0
	jne	SHORT $LN1@CDrawImage
	push	913					; 00000391H
	push	OFFSET $SG82351
	push	OFFSET $SG82352
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CDrawImage:
; Line 914
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetPaletteVersion@CDrawImage@@QAEXXZ	; CDrawImage::ResetPaletteVersion
; Line 915
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__SetRectEmpty@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 916
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetRectEmpty@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 918
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 919
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDrawImage@@QAE@PAVCBaseWindow@@@Z ENDP		; CDrawImage::CDrawImage
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CRefTime@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRefTime@@QAE@XZ PROC				; CRefTime::CRefTime, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\reftime.h
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRefTime@@QAE@XZ ENDP				; CRefTime::CRefTime
_TEXT	ENDS
PUBLIC	?Millisecs@CRefTime@@QAEJXZ			; CRefTime::Millisecs
PUBLIC	__$ArrayPad$
PUBLIC	?DisplaySampleTimes@CDrawImage@@IAEXPAUIMediaSample@@@Z ; CDrawImage::DisplaySampleTimes
EXTRN	__imp__TextOutW@20:PROC
EXTRN	__imp__GetTextExtentPoint32W@16:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	?DbgCheckModuleLevel@@YGHKK@Z:PROC		; DbgCheckModuleLevel
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DisplaySampleTimes@CDrawImage@@IAEXPAUIMediaSample@@@Z
_TEXT	SEGMENT
_YPos$ = -172						; size = 4
_XPos$ = -168						; size = 4
_hwnd$ = -164						; size = 4
_Size$ = -156						; size = 8
_ClientRect$ = -140					; size = 16
_szTimes$ = -116					; size = 100
_bAccept$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pSample$ = 8						; size = 4
?DisplaySampleTimes@CDrawImage@@IAEXPAUIMediaSample@@@Z PROC ; CDrawImage::DisplaySampleTimes, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
; Line 928
	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 934
	push	5
	push	2
	call	?DbgCheckModuleLevel@@YGHKK@Z		; DbgCheckModuleLevel
	mov	DWORD PTR _bAccept$[ebp], eax
; Line 935
	cmp	DWORD PTR _bAccept$[ebp], 0
	jne	SHORT $LN5@DisplaySam
; Line 936
	jmp	$LN6@DisplaySam
$LN5@DisplaySam:
; Line 941
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN4@DisplaySam
	push	941					; 000003adH
	push	OFFSET $SG82361
	push	OFFSET $SG82362
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@DisplaySam:
; Line 947
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _pSample$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pSample$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 948
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetWindowHWND@CBaseWindow@@QAEPAUHWND__@@XZ ; CBaseWindow::GetWindowHWND
	mov	DWORD PTR _hwnd$[ebp], eax
; Line 949
	mov	esi, esp
	lea	ecx, DWORD PTR _ClientRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@DisplaySam
	push	949					; 000003b5H
	push	OFFSET $SG82369
	push	OFFSET $SG82370
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@DisplaySam:
; Line 955
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Millisecs@CRefTime@@QAEJXZ		; CRefTime::Millisecs
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Millisecs@CRefTime@@QAEJXZ		; CRefTime::Millisecs
	push	eax
	push	OFFSET $SG82371
	lea	eax, DWORD PTR _szTimes$[ebp]
	push	eax
	call	DWORD PTR __imp__wsprintfW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 957
	mov	esi, esp
	lea	ecx, DWORD PTR _szTimes$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 50					; 00000032H
	jl	SHORT $LN2@DisplaySam
	push	957					; 000003bdH
	push	OFFSET $SG82373
	push	OFFSET $SG82374
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@DisplaySam:
; Line 961
	mov	esi, esp
	lea	edx, DWORD PTR _Size$[ebp]
	push	edx
	mov	edi, esp
	lea	eax, DWORD PTR _szTimes$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	ecx, DWORD PTR _szTimes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR __imp__GetTextExtentPoint32W@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 962
	mov	eax, DWORD PTR _ClientRect$[ebp+8]
	sub	eax, DWORD PTR _ClientRect$[ebp]
	sub	eax, DWORD PTR _Size$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _XPos$[ebp], eax
; Line 963
	mov	eax, DWORD PTR _ClientRect$[ebp+12]
	sub	eax, DWORD PTR _ClientRect$[ebp+4]
	sub	eax, DWORD PTR _Size$[ebp+4]
	shl	eax, 2
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _YPos$[ebp], eax
; Line 967
	cmp	DWORD PTR _XPos$[ebp], 0
	jle	SHORT $LN6@DisplaySam
	cmp	DWORD PTR _YPos$[ebp], 0
	jle	SHORT $LN6@DisplaySam
; Line 968
	mov	esi, esp
	lea	edx, DWORD PTR _szTimes$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	lea	eax, DWORD PTR _szTimes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _YPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _XPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__TextOutW@20
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@DisplaySam:
; Line 970
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DisplaySam
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 172				; 000000acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@DisplaySam:
	DD	3
	DD	$LN11@DisplaySam
$LN11@DisplaySam:
	DD	-116					; ffffff8cH
	DD	100					; 00000064H
	DD	$LN8@DisplaySam
	DD	-140					; ffffff74H
	DD	16					; 00000010H
	DD	$LN9@DisplaySam
	DD	-156					; ffffff64H
	DD	8
	DD	$LN10@DisplaySam
$LN10@DisplaySam:
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN9@DisplaySam:
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN8@DisplaySam:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?DisplaySampleTimes@CDrawImage@@IAEXPAUIMediaSample@@@Z ENDP ; CDrawImage::DisplaySampleTimes
_TEXT	ENDS
EXTRN	__alldiv:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Millisecs@CRefTime@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Millisecs@CRefTime@@QAEJXZ PROC			; CRefTime::Millisecs, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\reftime.h
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	mov	eax, DWORD PTR _this$[ebp]
	push	0
	push	10000					; 00002710H
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	__alldiv
; Line 105
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Millisecs@CRefTime@@QAEJXZ ENDP			; CRefTime::Millisecs
_TEXT	ENDS
PUBLIC	?UpdateColourTable@CDrawImage@@IAEXPAUHDC__@@PAUtagBITMAPINFOHEADER@@@Z ; CDrawImage::UpdateColourTable
EXTRN	__imp__SetDIBColorTable@16:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?UpdateColourTable@CDrawImage@@IAEXPAUHDC__@@PAUtagBITMAPINFOHEADER@@@Z
_TEXT	SEGMENT
_uiReturn$ = -12					; size = 4
_pColourTable$ = -8					; size = 4
_this$ = -4						; size = 4
_hdc$ = 8						; size = 4
_pbmi$ = 12						; size = 4
?UpdateColourTable@CDrawImage@@IAEXPAUHDC__@@PAUtagBITMAPINFOHEADER@@@Z PROC ; CDrawImage::UpdateColourTable, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
; Line 978
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 979
	mov	eax, DWORD PTR _pbmi$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN2@UpdateColo
	push	979					; 000003d3H
	push	OFFSET $SG82384
	push	OFFSET $SG82385
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@UpdateColo:
; Line 980
	mov	ecx, DWORD PTR _pbmi$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _pColourTable$[ebp], ecx
; Line 986
	mov	esi, esp
	mov	edx, DWORD PTR _pColourTable$[ebp]
	push	edx
	mov	eax, DWORD PTR _pbmi$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__SetDIBColorTable@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _uiReturn$[ebp], eax
; Line 989
	mov	eax, DWORD PTR _pbmi$[ebp]
	mov	ecx, DWORD PTR _uiReturn$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	je	SHORT $LN3@UpdateColo
	push	989					; 000003ddH
	push	OFFSET $SG82391
	push	OFFSET $SG82392
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@UpdateColo:
; Line 990
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateColourTable@CDrawImage@@IAEXPAUHDC__@@PAUtagBITMAPINFOHEADER@@@Z ENDP ; CDrawImage::UpdateColourTable
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ScaleSourceRect@CDrawImage@@UAE?AUtagRECT@@PBU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pSource$ = 12						; size = 4
?ScaleSourceRect@CDrawImage@@UAE?AUtagRECT@@PBU2@@Z PROC ; CDrawImage::ScaleSourceRect, COMDAT
; _this$ = ecx
; Line 996
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 997
	cmp	DWORD PTR _pSource$[ebp], 0
	jne	SHORT $LN1@ScaleSourc
	push	997					; 000003e5H
	push	OFFSET $SG82399
	push	OFFSET $SG82400
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@ScaleSourc:
; Line 998
	mov	eax, DWORD PTR _pSource$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 999
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ScaleSourceRect@CDrawImage@@UAE?AUtagRECT@@PBU2@@Z ENDP ; CDrawImage::ScaleSourceRect
_TEXT	ENDS
PUBLIC	?GetPaletteVersion@CDrawImage@@QAEJXZ		; CDrawImage::GetPaletteVersion
PUBLIC	?GetDIBData@CImageSample@@QAEPAUtagDIBDATA@@XZ	; CImageSample::GetDIBData
PUBLIC	?Format@CMediaType@@QBEPAEXZ			; CMediaType::Format
PUBLIC	__$ArrayPad$
PUBLIC	?FastRender@CDrawImage@@IAEXPAUIMediaSample@@@Z	; CDrawImage::FastRender
EXTRN	__imp__StretchBlt@44:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__SelectObject@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FastRender@CDrawImage@@IAEXPAUIMediaSample@@@Z
_TEXT	SEGMENT
_SourceRect$ = -60					; size = 16
_hr$ = -40						; size = 4
_pSample$ = -36						; size = 4
_hOldBitmap$ = -32					; size = 4
_pImage$ = -24						; size = 4
_pDibData$ = -16					; size = 4
_pbmi$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pMediaSample$ = 8					; size = 4
?FastRender@CDrawImage@@IAEXPAUIMediaSample@@@Z PROC	; CDrawImage::FastRender, COMDAT
; _this$ = ecx
; Line 1010
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1017
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN6@FastRender
	push	1017					; 000003f9H
	push	OFFSET $SG82411
	push	OFFSET $SG82412
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@FastRender:
; Line 1023
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	add	eax, 48					; 00000030H
	mov	DWORD PTR _pbmi$[ebp], eax
; Line 1024
	mov	edx, DWORD PTR _pMediaSample$[ebp]
	mov	DWORD PTR _pSample$[ebp], edx
; Line 1025
	mov	ecx, DWORD PTR _pSample$[ebp]
	call	?GetDIBData@CImageSample@@QAEPAUtagDIBDATA@@XZ ; CImageSample::GetDIBData
	mov	DWORD PTR _pDibData$[ebp], eax
; Line 1026
	mov	esi, esp
	mov	eax, DWORD PTR _pDibData$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hOldBitmap$[ebp], eax
; Line 1030
	mov	esi, esp
	lea	ecx, DWORD PTR _pImage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pMediaSample$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pMediaSample$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1031
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@FastRender
; Line 1032
	jmp	$LN7@FastRender
$LN5@FastRender:
; Line 1041
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPaletteVersion@CDrawImage@@QAEJXZ	; CDrawImage::GetPaletteVersion
	mov	ecx, DWORD PTR _pDibData$[ebp]
	cmp	DWORD PTR [ecx], eax
	jge	SHORT $LN4@FastRender
; Line 1042
	mov	edx, DWORD PTR _pbmi$[ebp]
	movzx	eax, WORD PTR [edx+14]
	cmp	eax, 8
	jle	SHORT $LN3@FastRender
	push	1042					; 00000412H
	push	OFFSET $SG82421
	push	OFFSET $SG82422
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@FastRender:
; Line 1043
	mov	ecx, DWORD PTR _pbmi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateColourTable@CDrawImage@@IAEXPAUHDC__@@PAUtagBITMAPINFOHEADER@@@Z ; CDrawImage::UpdateColourTable
; Line 1044
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPaletteVersion@CDrawImage@@QAEJXZ	; CDrawImage::GetPaletteVersion
	mov	ecx, DWORD PTR _pDibData$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@FastRender:
; Line 1054
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	mov	esi, esp
	push	edx
	lea	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1058
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	jne	SHORT $LN2@FastRender
; Line 1071
	mov	esi, esp
	push	13369376				; 00cc0020H
	mov	edx, DWORD PTR _SourceRect$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+48]
	sub	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__BitBlt@36
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1073
	jmp	SHORT $LN1@FastRender
$LN2@FastRender:
; Line 1088
	mov	esi, esp
	push	13369376				; 00cc0020H
	mov	eax, DWORD PTR _SourceRect$[ebp+12]
	sub	eax, DWORD PTR _SourceRect$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _SourceRect$[ebp+8]
	sub	ecx, DWORD PTR _SourceRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _SourceRect$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+48]
	sub	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__StretchBlt@44
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@FastRender:
; Line 1096
	mov	eax, DWORD PTR _pMediaSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplaySampleTimes@CDrawImage@@IAEXPAUIMediaSample@@@Z ; CDrawImage::DisplaySampleTimes
; Line 1100
	mov	esi, esp
	mov	ecx, DWORD PTR _hOldBitmap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@FastRender:
; Line 1101
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FastRender
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN12@FastRender:
	DD	2
	DD	$LN11@FastRender
$LN11@FastRender:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@FastRender
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN10@FastRender
$LN10@FastRender:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN9@FastRender:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
?FastRender@CDrawImage@@IAEXPAUIMediaSample@@@Z ENDP	; CDrawImage::FastRender
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Format@CMediaType@@QBEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Format@CMediaType@@QBEPAEXZ PROC			; CMediaType::Format, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.h
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Format@CMediaType@@QBEPAEXZ ENDP			; CMediaType::Format
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SlowRender@CDrawImage@@IAEXPAUIMediaSample@@@Z	; CDrawImage::SlowRender
EXTRN	__imp__StretchDIBits@52:PROC
EXTRN	__imp__SetDIBitsToDevice@48:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SlowRender@CDrawImage@@IAEXPAUIMediaSample@@@Z
_TEXT	SEGMENT
_lAdjustedSourceTop$ = -56				; size = 4
_SourceRect$ = -48					; size = 16
_hr$ = -28						; size = 4
_pImage$ = -20						; size = 4
_pbmi$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pMediaSample$ = 8					; size = 4
?SlowRender@CDrawImage@@IAEXPAUIMediaSample@@@Z PROC	; CDrawImage::SlowRender, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
; Line 1113
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1116
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN5@SlowRender
	push	1116					; 0000045cH
	push	OFFSET $SG82436
	push	OFFSET $SG82437
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@SlowRender:
; Line 1117
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	add	eax, 48					; 00000030H
	mov	DWORD PTR _pbmi$[ebp], eax
; Line 1122
	mov	esi, esp
	lea	edx, DWORD PTR _pImage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pMediaSample$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pMediaSample$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1123
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@SlowRender
; Line 1124
	jmp	$LN6@SlowRender
$LN4@SlowRender:
; Line 1134
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	mov	esi, esp
	push	ecx
	lea	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1136
	mov	ecx, DWORD PTR _SourceRect$[ebp+4]
	mov	DWORD PTR _lAdjustedSourceTop$[ebp], ecx
; Line 1139
	mov	edx, DWORD PTR _pbmi$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jle	SHORT $LN3@SlowRender
; Line 1140
	mov	eax, DWORD PTR _pbmi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _SourceRect$[ebp+12]
	mov	DWORD PTR _lAdjustedSourceTop$[ebp], ecx
$LN3@SlowRender:
; Line 1144
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], 0
	jne	SHORT $LN2@SlowRender
; Line 1160
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _pbmi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbmi$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	0
	mov	ecx, DWORD PTR _lAdjustedSourceTop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+48]
	sub	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__SetDIBitsToDevice@48
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1162
	jmp	SHORT $LN1@SlowRender
$LN2@SlowRender:
; Line 1179
	mov	esi, esp
	push	13369376				; 00cc0020H
	push	0
	mov	eax, DWORD PTR _pbmi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pImage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _SourceRect$[ebp+12]
	sub	edx, DWORD PTR _SourceRect$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _SourceRect$[ebp+8]
	sub	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lAdjustedSourceTop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _SourceRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+48]
	sub	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR __imp__StretchDIBits@52
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SlowRender:
; Line 1191
	mov	eax, DWORD PTR _pMediaSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplaySampleTimes@CDrawImage@@IAEXPAUIMediaSample@@@Z ; CDrawImage::DisplaySampleTimes
$LN6@SlowRender:
; Line 1193
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@SlowRender
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@SlowRender:
	DD	2
	DD	$LN10@SlowRender
$LN10@SlowRender:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@SlowRender
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN9@SlowRender
$LN9@SlowRender:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN8@SlowRender:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
?SlowRender@CDrawImage@@IAEXPAUIMediaSample@@@Z ENDP	; CDrawImage::SlowRender
_TEXT	ENDS
PUBLIC	?NotifyEndDraw@CDrawImage@@QAEXXZ		; CDrawImage::NotifyEndDraw
PUBLIC	?NotifyStartDraw@CDrawImage@@QAEXXZ		; CDrawImage::NotifyStartDraw
PUBLIC	?DrawImage@CDrawImage@@QAEHPAUIMediaSample@@@Z	; CDrawImage::DrawImage
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DrawImage@CDrawImage@@QAEHPAUIMediaSample@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pMediaSample$ = 8					; size = 4
?DrawImage@CDrawImage@@QAEHPAUIMediaSample@@@Z PROC	; CDrawImage::DrawImage, COMDAT
; _this$ = ecx
; Line 1204
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1205
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@DrawImage
	push	1205					; 000004b5H
	push	OFFSET $SG82461
	push	OFFSET $SG82462
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@DrawImage:
; Line 1206
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN4@DrawImage
	push	1206					; 000004b6H
	push	OFFSET $SG82464
	push	OFFSET $SG82465
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@DrawImage:
; Line 1207
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyStartDraw@CDrawImage@@QAEXXZ	; CDrawImage::NotifyStartDraw
; Line 1214
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	jne	SHORT $LN3@DrawImage
; Line 1215
	mov	eax, DWORD PTR _pMediaSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SlowRender@CDrawImage@@IAEXPAUIMediaSample@@@Z ; CDrawImage::SlowRender
; Line 1216
	mov	esi, esp
	call	DWORD PTR __imp__GdiFlush@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@DrawImage
	push	1216					; 000004c0H
	push	OFFSET $SG82468
	push	OFFSET $SG82469
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@DrawImage:
; Line 1217
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyEndDraw@CDrawImage@@QAEXXZ	; CDrawImage::NotifyEndDraw
; Line 1218
	mov	eax, 1
	jmp	SHORT $LN6@DrawImage
$LN3@DrawImage:
; Line 1223
	mov	ecx, DWORD PTR _pMediaSample$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FastRender@CDrawImage@@IAEXPAUIMediaSample@@@Z ; CDrawImage::FastRender
; Line 1224
	mov	esi, esp
	call	DWORD PTR __imp__GdiFlush@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@DrawImage
	push	1224					; 000004c8H
	push	OFFSET $SG82471
	push	OFFSET $SG82472
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DrawImage:
; Line 1225
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NotifyEndDraw@CDrawImage@@QAEXXZ	; CDrawImage::NotifyEndDraw
; Line 1226
	mov	eax, 1
$LN6@DrawImage:
; Line 1227
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DrawImage@CDrawImage@@QAEHPAUIMediaSample@@@Z ENDP	; CDrawImage::DrawImage
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NotifyStartDraw@CDrawImage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NotifyStartDraw@CDrawImage@@QAEXXZ PROC		; CDrawImage::NotifyStartDraw, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.h
; Line 215
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 217
	mov	esp, ebp
	pop	ebp
	ret	0
?NotifyStartDraw@CDrawImage@@QAEXXZ ENDP		; CDrawImage::NotifyStartDraw
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NotifyEndDraw@CDrawImage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NotifyEndDraw@CDrawImage@@QAEXXZ PROC			; CDrawImage::NotifyEndDraw, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 223
	mov	esp, ebp
	pop	ebp
	ret	0
?NotifyEndDraw@CDrawImage@@QAEXXZ ENDP			; CDrawImage::NotifyEndDraw
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DrawVideoImageHere@CDrawImage@@QAEHPAUHDC__@@PAUIMediaSample@@PAUtagRECT@@2@Z ; CDrawImage::DrawVideoImageHere
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DrawVideoImageHere@CDrawImage@@QAEHPAUHDC__@@PAUIMediaSample@@PAUtagRECT@@2@Z
_TEXT	SEGMENT
_bRet$ = -100						; size = 4
_lAdjustedSourceTop$ = -96				; size = 4
$T82493 = -92						; size = 16
_TargetRect$ = -72					; size = 16
_SourceRect$ = -48					; size = 16
_hr$ = -28						; size = 4
_pImage$ = -20						; size = 4
_pbmi$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hdc$ = 8						; size = 4
_pMediaSample$ = 12					; size = 4
_lprcSrc$ = 16						; size = 4
_lprcDst$ = 20						; size = 4
?DrawVideoImageHere@CDrawImage@@QAEHPAUHDC__@@PAUIMediaSample@@PAUtagRECT@@2@Z PROC ; CDrawImage::DrawVideoImageHere, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
; Line 1236
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1237
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN7@DrawVideoI
	push	1237					; 000004d5H
	push	OFFSET $SG82481
	push	OFFSET $SG82482
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@DrawVideoI:
; Line 1238
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+80]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	add	eax, 48					; 00000030H
	mov	DWORD PTR _pbmi$[ebp], eax
; Line 1243
	mov	esi, esp
	lea	edx, DWORD PTR _pImage$[ebp]
	push	edx
	mov	eax, DWORD PTR _pMediaSample$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pMediaSample$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 1244
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@DrawVideoI
; Line 1245
	xor	eax, eax
	jmp	$LN8@DrawVideoI
$LN6@DrawVideoI:
; Line 1251
	cmp	DWORD PTR _lprcSrc$[ebp], 0
	je	SHORT $LN5@DrawVideoI
; Line 1252
	mov	ecx, DWORD PTR _lprcSrc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _SourceRect$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _SourceRect$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _SourceRect$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _SourceRect$[ebp+12], eax
	jmp	SHORT $LN4@DrawVideoI
$LN5@DrawVideoI:
; Line 1254
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	mov	esi, esp
	push	ecx
	lea	edx, DWORD PTR $T82493[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _SourceRect$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _SourceRect$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _SourceRect$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _SourceRect$[ebp+12], edx
$LN4@DrawVideoI:
; Line 1256
	cmp	DWORD PTR _lprcDst$[ebp], 0
	je	SHORT $LN3@DrawVideoI
; Line 1257
	mov	eax, DWORD PTR _lprcDst$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _TargetRect$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _TargetRect$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _TargetRect$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _TargetRect$[ebp+12], edx
	jmp	SHORT $LN2@DrawVideoI
$LN3@DrawVideoI:
; Line 1259
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _TargetRect$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _TargetRect$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _TargetRect$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _TargetRect$[ebp+12], edx
$LN2@DrawVideoI:
; Line 1261
	mov	eax, DWORD PTR _SourceRect$[ebp+4]
	mov	DWORD PTR _lAdjustedSourceTop$[ebp], eax
; Line 1264
	mov	ecx, DWORD PTR _pbmi$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jle	SHORT $LN1@DrawVideoI
; Line 1265
	mov	edx, DWORD PTR _pbmi$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _SourceRect$[ebp+12]
	mov	DWORD PTR _lAdjustedSourceTop$[ebp], eax
$LN1@DrawVideoI:
; Line 1283
	mov	esi, esp
	push	13369376				; 00cc0020H
	push	0
	mov	ecx, DWORD PTR _pbmi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pImage$[ebp]
	push	edx
	mov	eax, DWORD PTR _SourceRect$[ebp+12]
	sub	eax, DWORD PTR _SourceRect$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _SourceRect$[ebp+8]
	sub	ecx, DWORD PTR _SourceRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lAdjustedSourceTop$[ebp]
	push	edx
	mov	eax, DWORD PTR _SourceRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _TargetRect$[ebp+12]
	sub	ecx, DWORD PTR _TargetRect$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _TargetRect$[ebp+8]
	sub	edx, DWORD PTR _TargetRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _TargetRect$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _TargetRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__StretchDIBits@52
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR _bRet$[ebp], eax
; Line 1284
	mov	eax, DWORD PTR _bRet$[ebp]
$LN8@DrawVideoI:
; Line 1285
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@DrawVideoI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN14@DrawVideoI:
	DD	3
	DD	$LN13@DrawVideoI
$LN13@DrawVideoI:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@DrawVideoI
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@DrawVideoI
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN12@DrawVideoI
$LN12@DrawVideoI:
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN11@DrawVideoI:
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN10@DrawVideoI:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
?DrawVideoImageHere@CDrawImage@@QAEHPAUHDC__@@PAUIMediaSample@@PAUtagRECT@@2@Z ENDP ; CDrawImage::DrawVideoImageHere
_TEXT	ENDS
PUBLIC	?SetDrawContext@CDrawImage@@QAEXXZ		; CDrawImage::SetDrawContext
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetDrawContext@CDrawImage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDrawContext@CDrawImage@@QAEXXZ PROC			; CDrawImage::SetDrawContext, COMDAT
; _this$ = ecx
; Line 1294
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1295
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetMemoryHDC@CBaseWindow@@QAEPAUHDC__@@XZ ; CBaseWindow::GetMemoryHDC
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 1296
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?GetWindowHDC@CBaseWindow@@QAEPAUHDC__@@XZ ; CBaseWindow::GetWindowHDC
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 1297
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDrawContext@CDrawImage@@QAEXXZ ENDP			; CDrawImage::SetDrawContext
_TEXT	ENDS
PUBLIC	?SetStretchMode@CDrawImage@@IAEXXZ		; CDrawImage::SetStretchMode
PUBLIC	?SetTargetRect@CDrawImage@@QAEXPAUtagRECT@@@Z	; CDrawImage::SetTargetRect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetTargetRect@CDrawImage@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTargetRect$ = 8					; size = 4
?SetTargetRect@CDrawImage@@QAEXPAUtagRECT@@@Z PROC	; CDrawImage::SetTargetRect, COMDAT
; _this$ = ecx
; Line 1305
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1306
	cmp	DWORD PTR _pTargetRect$[ebp], 0
	jne	SHORT $LN1@SetTargetR
	push	1306					; 0000051aH
	push	OFFSET $SG82509
	push	OFFSET $SG82510
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetTargetR:
; Line 1307
	mov	eax, DWORD PTR _pTargetRect$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 1308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStretchMode@CDrawImage@@IAEXXZ	; CDrawImage::SetStretchMode
; Line 1309
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTargetRect@CDrawImage@@QAEXPAUtagRECT@@@Z ENDP	; CDrawImage::SetTargetRect
_TEXT	ENDS
PUBLIC	?GetTargetRect@CDrawImage@@QAEXPAUtagRECT@@@Z	; CDrawImage::GetTargetRect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetTargetRect@CDrawImage@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTargetRect$ = 8					; size = 4
?GetTargetRect@CDrawImage@@QAEXPAUtagRECT@@@Z PROC	; CDrawImage::GetTargetRect, COMDAT
; _this$ = ecx
; Line 1315
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1316
	cmp	DWORD PTR _pTargetRect$[ebp], 0
	jne	SHORT $LN1@GetTargetR
	push	1316					; 00000524H
	push	OFFSET $SG82516
	push	OFFSET $SG82517
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetTargetR:
; Line 1317
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _pTargetRect$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 1318
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTargetRect@CDrawImage@@QAEXPAUtagRECT@@@Z ENDP	; CDrawImage::GetTargetRect
_TEXT	ENDS
PUBLIC	?SetSourceRect@CDrawImage@@QAEXPAUtagRECT@@@Z	; CDrawImage::SetSourceRect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetSourceRect@CDrawImage@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSourceRect$ = 8					; size = 4
?SetSourceRect@CDrawImage@@QAEXPAUtagRECT@@@Z PROC	; CDrawImage::SetSourceRect, COMDAT
; _this$ = ecx
; Line 1327
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1328
	cmp	DWORD PTR _pSourceRect$[ebp], 0
	jne	SHORT $LN1@SetSourceR
	push	1328					; 00000530H
	push	OFFSET $SG82523
	push	OFFSET $SG82524
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetSourceR:
; Line 1329
	mov	eax, DWORD PTR _pSourceRect$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 1330
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStretchMode@CDrawImage@@IAEXXZ	; CDrawImage::SetStretchMode
; Line 1331
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSourceRect@CDrawImage@@QAEXPAUtagRECT@@@Z ENDP	; CDrawImage::SetSourceRect
_TEXT	ENDS
PUBLIC	?GetSourceRect@CDrawImage@@QAEXPAUtagRECT@@@Z	; CDrawImage::GetSourceRect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetSourceRect@CDrawImage@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSourceRect$ = 8					; size = 4
?GetSourceRect@CDrawImage@@QAEXPAUtagRECT@@@Z PROC	; CDrawImage::GetSourceRect, COMDAT
; _this$ = ecx
; Line 1337
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1338
	cmp	DWORD PTR _pSourceRect$[ebp], 0
	jne	SHORT $LN1@GetSourceR
	push	1338					; 0000053aH
	push	OFFSET $SG82530
	push	OFFSET $SG82531
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetSourceR:
; Line 1339
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _pSourceRect$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 1340
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSourceRect@CDrawImage@@QAEXPAUtagRECT@@@Z ENDP	; CDrawImage::GetSourceRect
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStretchMode@CDrawImage@@IAEXXZ
_TEXT	SEGMENT
_SinkHeight$ = -20					; size = 4
_SourceHeight$ = -16					; size = 4
_SinkWidth$ = -12					; size = 4
_SourceWidth$ = -8					; size = 4
_this$ = -4						; size = 4
?SetStretchMode@CDrawImage@@IAEXXZ PROC			; CDrawImage::SetStretchMode, COMDAT
; _this$ = ecx
; Line 1349
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1352
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	sub	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _SourceWidth$[ebp], edx
; Line 1353
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+48]
	sub	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _SinkWidth$[ebp], edx
; Line 1354
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+68]
	sub	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _SourceHeight$[ebp], edx
; Line 1355
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	sub	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _SinkHeight$[ebp], edx
; Line 1357
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 1
; Line 1358
	mov	ecx, DWORD PTR _SourceWidth$[ebp]
	cmp	ecx, DWORD PTR _SinkWidth$[ebp]
	jne	SHORT $LN3@SetStretch
; Line 1359
	mov	edx, DWORD PTR _SourceHeight$[ebp]
	cmp	edx, DWORD PTR _SinkHeight$[ebp]
	jne	SHORT $LN3@SetStretch
; Line 1360
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
$LN3@SetStretch:
; Line 1363
	mov	esp, ebp
	pop	ebp
	ret	0
?SetStretchMode@CDrawImage@@IAEXXZ ENDP			; CDrawImage::SetStretchMode
_TEXT	ENDS
PUBLIC	?NotifyAllocator@CDrawImage@@QAEXH@Z		; CDrawImage::NotifyAllocator
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NotifyAllocator@CDrawImage@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bUsingImageAllocator$ = 8				; size = 4
?NotifyAllocator@CDrawImage@@QAEXH@Z PROC		; CDrawImage::NotifyAllocator, COMDAT
; _this$ = ecx
; Line 1374
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1375
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bUsingImageAllocator$[ebp]
	mov	DWORD PTR [eax+76], ecx
; Line 1376
	mov	esp, ebp
	pop	ebp
	ret	4
?NotifyAllocator@CDrawImage@@QAEXH@Z ENDP		; CDrawImage::NotifyAllocator
_TEXT	ENDS
PUBLIC	?UsingImageAllocator@CDrawImage@@QAEHXZ		; CDrawImage::UsingImageAllocator
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?UsingImageAllocator@CDrawImage@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UsingImageAllocator@CDrawImage@@QAEHXZ PROC		; CDrawImage::UsingImageAllocator, COMDAT
; _this$ = ecx
; Line 1382
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1383
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
; Line 1384
	mov	esp, ebp
	pop	ebp
	ret	0
?UsingImageAllocator@CDrawImage@@QAEHXZ ENDP		; CDrawImage::UsingImageAllocator
_TEXT	ENDS
PUBLIC	?NotifyMediaType@CDrawImage@@QAEXPAVCMediaType@@@Z ; CDrawImage::NotifyMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NotifyMediaType@CDrawImage@@QAEXPAVCMediaType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pMediaType$ = 8					; size = 4
?NotifyMediaType@CDrawImage@@QAEXPAVCMediaType@@@Z PROC	; CDrawImage::NotifyMediaType, COMDAT
; _this$ = ecx
; Line 1392
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1393
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pMediaType$[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 1394
	mov	esp, ebp
	pop	ebp
	ret	4
?NotifyMediaType@CDrawImage@@QAEXPAVCMediaType@@@Z ENDP	; CDrawImage::NotifyMediaType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPaletteVersion@CDrawImage@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPaletteVersion@CDrawImage@@QAEJXZ PROC		; CDrawImage::GetPaletteVersion, COMDAT
; _this$ = ecx
; Line 1404
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1405
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+88]
; Line 1406
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPaletteVersion@CDrawImage@@QAEJXZ ENDP		; CDrawImage::GetPaletteVersion
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ResetPaletteVersion@CDrawImage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetPaletteVersion@CDrawImage@@QAEXXZ PROC		; CDrawImage::ResetPaletteVersion, COMDAT
; _this$ = ecx
; Line 1412
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1413
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 1
; Line 1414
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetPaletteVersion@CDrawImage@@QAEXXZ ENDP		; CDrawImage::ResetPaletteVersion
_TEXT	ENDS
PUBLIC	?IncrementPaletteVersion@CDrawImage@@QAEXXZ	; CDrawImage::IncrementPaletteVersion
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IncrementPaletteVersion@CDrawImage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementPaletteVersion@CDrawImage@@QAEXXZ PROC	; CDrawImage::IncrementPaletteVersion, COMDAT
; _this$ = ecx
; Line 1420
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1421
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], ecx
; Line 1422
	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementPaletteVersion@CDrawImage@@QAEXXZ ENDP	; CDrawImage::IncrementPaletteVersion
_TEXT	ENDS
PUBLIC	??_7CImageAllocator@@6BIMemAllocatorCallbackTemp@@@ ; CImageAllocator::`vftable'
PUBLIC	??_7CImageAllocator@@6BCUnknown@@@		; CImageAllocator::`vftable'
PUBLIC	??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z ; CImageAllocator::CImageAllocator
PUBLIC	??_R4CImageAllocator@@6BCUnknown@@@		; CImageAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImageAllocator@@@8			; CImageAllocator `RTTI Type Descriptor'
PUBLIC	??_R3CImageAllocator@@8				; CImageAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImageAllocator@@8				; CImageAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImageAllocator@@8		; CImageAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBaseAllocator@@8			; CBaseAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBaseAllocator@@@8			; CBaseAllocator `RTTI Type Descriptor'
PUBLIC	??_R3CBaseAllocator@@8				; CBaseAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseAllocator@@8				; CBaseAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CUnknown@@8			; CUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCUnknown@@@8				; CUnknown `RTTI Type Descriptor'
PUBLIC	??_R3CUnknown@@8				; CUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUnknown@@8				; CUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@INonDelegatingUnknown@@8		; INonDelegatingUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUINonDelegatingUnknown@@@8		; INonDelegatingUnknown `RTTI Type Descriptor'
PUBLIC	??_R3INonDelegatingUnknown@@8			; INonDelegatingUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2INonDelegatingUnknown@@8			; INonDelegatingUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCBaseObject@@@8				; CBaseObject `RTTI Type Descriptor'
PUBLIC	??_R3CBaseObject@@8				; CBaseObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseObject@@8				; CBaseObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseObject@@8			; CBaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8	; IMemAllocatorCallbackTemp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AUIMemAllocatorCallbackTemp@@@8		; IMemAllocatorCallbackTemp `RTTI Type Descriptor'
PUBLIC	??_R3IMemAllocatorCallbackTemp@@8		; IMemAllocatorCallbackTemp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMemAllocatorCallbackTemp@@8		; IMemAllocatorCallbackTemp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IMemAllocatorCallbackTemp@@8	; IMemAllocatorCallbackTemp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IMemAllocator@@8			; IMemAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIMemAllocator@@@8			; IMemAllocator `RTTI Type Descriptor'
PUBLIC	??_R3IMemAllocator@@8				; IMemAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMemAllocator@@8				; IMemAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1BA@?0A@EA@IMemAllocator@@8			; IMemAllocator::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R1BE@?0A@EA@CCritSec@@8			; CCritSec::`RTTI Base Class Descriptor at (20,-1,0,64)'
PUBLIC	??_R0?AVCCritSec@@@8				; CCritSec `RTTI Type Descriptor'
PUBLIC	??_R3CCritSec@@8				; CCritSec::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCritSec@@8				; CCritSec::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCritSec@@8			; CCritSec::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?NonDelegatingAddRef@CImageAllocator@@UAGKXZ	; CImageAllocator::NonDelegatingAddRef
PUBLIC	?NonDelegatingRelease@CImageAllocator@@UAGKXZ	; CImageAllocator::NonDelegatingRelease
PUBLIC	?Free@CImageAllocator@@MAEXXZ			; CImageAllocator::Free
PUBLIC	?Alloc@CImageAllocator@@MAEJXZ			; CImageAllocator::Alloc
PUBLIC	?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z ; CImageAllocator::CreateImageSample
PUBLIC	??_R4CImageAllocator@@6BIMemAllocatorCallbackTemp@@@ ; CImageAllocator::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z ; CBaseAllocator::QueryInterface
PUBLIC	?AddRef@CBaseAllocator@@UAGKXZ			; CBaseAllocator::AddRef
PUBLIC	?Release@CBaseAllocator@@UAGKXZ			; CBaseAllocator::Release
PUBLIC	?SetProperties@CImageAllocator@@UAGJPAU_AllocatorProperties@@0@Z ; CImageAllocator::SetProperties
EXTRN	??1CBaseAllocator@@UAE@XZ:PROC			; CBaseAllocator::~CBaseAllocator
EXTRN	??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z:PROC ; CBaseAllocator::CBaseAllocator
EXTRN	?NonDelegatingQueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z:PROC ; CBaseAllocator::NonDelegatingQueryInterface
EXTRN	??_ECImageAllocator@@UAEPAXI@Z:PROC		; CImageAllocator::`vector deleting destructor'
EXTRN	?GetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@@Z:PROC ; CBaseAllocator::GetProperties
EXTRN	?Commit@CBaseAllocator@@UAGJXZ:PROC		; CBaseAllocator::Commit
EXTRN	?Decommit@CBaseAllocator@@UAGJXZ:PROC		; CBaseAllocator::Decommit
EXTRN	?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z:PROC ; CBaseAllocator::GetBuffer
EXTRN	?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z:PROC ; CBaseAllocator::ReleaseBuffer
EXTRN	?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z:PROC ; CBaseAllocator::SetNotify
EXTRN	?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z:PROC	; CBaseAllocator::GetFreeCount
;	COMDAT ??_R4CImageAllocator@@6BIMemAllocatorCallbackTemp@@@
rdata$r	SEGMENT
??_R4CImageAllocator@@6BIMemAllocatorCallbackTemp@@@ DD 00H ; CImageAllocator::`RTTI Complete Object Locator'
	DD	010H
	DD	00H
	DD	FLAT:??_R0?AVCImageAllocator@@@8
	DD	FLAT:??_R3CImageAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCritSec@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCritSec@@8 DD FLAT:??_R0?AVCCritSec@@@8	; CCritSec::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R2CCritSec@@8
rdata$r	SEGMENT
??_R2CCritSec@@8 DD FLAT:??_R1A@?0A@EA@CCritSec@@8	; CCritSec::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCritSec@@8
rdata$r	SEGMENT
??_R3CCritSec@@8 DD 00H					; CCritSec::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCritSec@@@8
_DATA	SEGMENT
??_R0?AVCCritSec@@@8 DD FLAT:??_7type_info@@6B@		; CCritSec `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCritSec@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BE@?0A@EA@CCritSec@@8
rdata$r	SEGMENT
??_R1BE@?0A@EA@CCritSec@@8 DD FLAT:??_R0?AVCCritSec@@@8	; CCritSec::`RTTI Base Class Descriptor at (20,-1,0,64)'
	DD	00H
	DD	014H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@IMemAllocator@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IMemAllocator@@8 DD FLAT:??_R0?AUIMemAllocator@@@8 ; IMemAllocator::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	01H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IMemAllocator@@8
rdata$r	SEGMENT
??_R2IMemAllocator@@8 DD FLAT:??_R1A@?0A@EA@IMemAllocator@@8 ; IMemAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IMemAllocator@@8
rdata$r	SEGMENT
??_R3IMemAllocator@@8 DD 00H				; IMemAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMemAllocator@@@8
_DATA	SEGMENT
??_R0?AUIMemAllocator@@@8 DD FLAT:??_7type_info@@6B@	; IMemAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMemAllocator@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IMemAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMemAllocator@@8 DD FLAT:??_R0?AUIMemAllocator@@@8 ; IMemAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMemAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IMemAllocatorCallbackTemp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMemAllocatorCallbackTemp@@8 DD FLAT:??_R0?AUIMemAllocatorCallbackTemp@@@8 ; IMemAllocatorCallbackTemp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMemAllocatorCallbackTemp@@8
rdata$r	ENDS
;	COMDAT ??_R2IMemAllocatorCallbackTemp@@8
rdata$r	SEGMENT
??_R2IMemAllocatorCallbackTemp@@8 DD FLAT:??_R1A@?0A@EA@IMemAllocatorCallbackTemp@@8 ; IMemAllocatorCallbackTemp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IMemAllocator@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IMemAllocatorCallbackTemp@@8
rdata$r	SEGMENT
??_R3IMemAllocatorCallbackTemp@@8 DD 00H		; IMemAllocatorCallbackTemp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IMemAllocatorCallbackTemp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMemAllocatorCallbackTemp@@@8
_DATA	SEGMENT
??_R0?AUIMemAllocatorCallbackTemp@@@8 DD FLAT:??_7type_info@@6B@ ; IMemAllocatorCallbackTemp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMemAllocatorCallbackTemp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8 DD FLAT:??_R0?AUIMemAllocatorCallbackTemp@@@8 ; IMemAllocatorCallbackTemp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	02H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMemAllocatorCallbackTemp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseObject@@8
rdata$r	SEGMENT
??_R2CBaseObject@@8 DD FLAT:??_R1A@?0A@EA@CBaseObject@@8 ; CBaseObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseObject@@8
rdata$r	SEGMENT
??_R3CBaseObject@@8 DD 00H				; CBaseObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseObject@@@8
_DATA	SEGMENT
??_R0?AVCBaseObject@@@8 DD FLAT:??_7type_info@@6B@	; CBaseObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CBaseObject@@8
rdata$r	SEGMENT
??_R13?0A@EA@CBaseObject@@8 DD FLAT:??_R0?AVCBaseObject@@@8 ; CBaseObject::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R2INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R2INonDelegatingUnknown@@8 DD FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8 ; INonDelegatingUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R3INonDelegatingUnknown@@8 DD 00H			; INonDelegatingUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUINonDelegatingUnknown@@@8
_DATA	SEGMENT
??_R0?AUINonDelegatingUnknown@@@8 DD FLAT:??_7type_info@@6B@ ; INonDelegatingUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUINonDelegatingUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@INonDelegatingUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@INonDelegatingUnknown@@8 DD FLAT:??_R0?AUINonDelegatingUnknown@@@8 ; INonDelegatingUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3INonDelegatingUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2CUnknown@@8
rdata$r	SEGMENT
??_R2CUnknown@@8 DD FLAT:??_R1A@?0A@EA@CUnknown@@8	; CUnknown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CUnknown@@8
rdata$r	SEGMENT
??_R3CUnknown@@8 DD 00H					; CUnknown::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCUnknown@@@8
_DATA	SEGMENT
??_R0?AVCUnknown@@@8 DD FLAT:??_7type_info@@6B@		; CUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUnknown@@8 DD FLAT:??_R0?AVCUnknown@@@8	; CUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseAllocator@@8
rdata$r	SEGMENT
??_R2CBaseAllocator@@8 DD FLAT:??_R1A@?0A@EA@CBaseAllocator@@8 ; CBaseAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CUnknown@@8
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8
	DD	FLAT:??_R1BA@?0A@EA@IMemAllocator@@8
	DD	FLAT:??_R1BA@?0A@EA@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseAllocator@@8
rdata$r	SEGMENT
??_R3CBaseAllocator@@8 DD 00H				; CBaseAllocator::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2CBaseAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseAllocator@@@8
_DATA	SEGMENT
??_R0?AVCBaseAllocator@@@8 DD FLAT:??_7type_info@@6B@	; CBaseAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseAllocator@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseAllocator@@8 DD FLAT:??_R0?AVCBaseAllocator@@@8 ; CBaseAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CImageAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImageAllocator@@8 DD FLAT:??_R0?AVCImageAllocator@@@8 ; CImageAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImageAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2CImageAllocator@@8
rdata$r	SEGMENT
??_R2CImageAllocator@@8 DD FLAT:??_R1A@?0A@EA@CImageAllocator@@8 ; CImageAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseAllocator@@8
	DD	FLAT:??_R1A@?0A@EA@CUnknown@@8
	DD	FLAT:??_R1A@?0A@EA@INonDelegatingUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBaseObject@@8
	DD	FLAT:??_R1BA@?0A@EA@IMemAllocatorCallbackTemp@@8
	DD	FLAT:??_R1BA@?0A@EA@IMemAllocator@@8
	DD	FLAT:??_R1BA@?0A@EA@IUnknown@@8
	DD	FLAT:??_R1BE@?0A@EA@CCritSec@@8
rdata$r	ENDS
;	COMDAT ??_R3CImageAllocator@@8
rdata$r	SEGMENT
??_R3CImageAllocator@@8 DD 00H				; CImageAllocator::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2CImageAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImageAllocator@@@8
_DATA	SEGMENT
??_R0?AVCImageAllocator@@@8 DD FLAT:??_7type_info@@6B@	; CImageAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImageAllocator@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CImageAllocator@@6BCUnknown@@@
rdata$r	SEGMENT
??_R4CImageAllocator@@6BCUnknown@@@ DD 00H		; CImageAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImageAllocator@@@8
	DD	FLAT:??_R3CImageAllocator@@8
rdata$r	ENDS
;	COMDAT ??_7CImageAllocator@@6BIMemAllocatorCallbackTemp@@@
CONST	SEGMENT
??_7CImageAllocator@@6BIMemAllocatorCallbackTemp@@@ DD FLAT:??_R4CImageAllocator@@6BIMemAllocatorCallbackTemp@@@ ; CImageAllocator::`vftable'
	DD	FLAT:?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseAllocator@@UAGKXZ
	DD	FLAT:?Release@CBaseAllocator@@UAGKXZ
	DD	FLAT:?SetProperties@CImageAllocator@@UAGJPAU_AllocatorProperties@@0@Z
	DD	FLAT:?GetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@@Z
	DD	FLAT:?Commit@CBaseAllocator@@UAGJXZ
	DD	FLAT:?Decommit@CBaseAllocator@@UAGJXZ
	DD	FLAT:?GetBuffer@CBaseAllocator@@UAGJPAPAUIMediaSample@@PA_J1K@Z
	DD	FLAT:?ReleaseBuffer@CBaseAllocator@@UAGJPAUIMediaSample@@@Z
	DD	FLAT:?SetNotify@CBaseAllocator@@UAGJPAUIMemAllocatorNotifyCallbackTemp@@@Z
	DD	FLAT:?GetFreeCount@CBaseAllocator@@UAGJPAJ@Z
CONST	ENDS
;	COMDAT ??_7CImageAllocator@@6BCUnknown@@@
CONST	SEGMENT
??_7CImageAllocator@@6BCUnknown@@@ DD FLAT:??_R4CImageAllocator@@6BCUnknown@@@ ; CImageAllocator::`vftable'
	DD	FLAT:?NonDelegatingQueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?NonDelegatingAddRef@CImageAllocator@@UAGKXZ
	DD	FLAT:?NonDelegatingRelease@CImageAllocator@@UAGKXZ
	DD	FLAT:??_ECImageAllocator@@UAEPAXI@Z
	DD	FLAT:?Free@CImageAllocator@@MAEXXZ
	DD	FLAT:?Alloc@CImageAllocator@@MAEJXZ
	DD	FLAT:?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z$0
__ehfuncinfo$??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pFilter$ = 8						; size = 4
_pName$ = 12						; size = 4
_phr$ = 16						; size = 4
??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z PROC	; CImageAllocator::CImageAllocator, COMDAT
; _this$ = ecx
; Line 1441
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	1
	mov	eax, DWORD PTR _phr$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseAllocator@@QAE@PA_WPAUIUnknown@@PAJHH@Z ; CBaseAllocator::CBaseAllocator
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CImageAllocator@@6BCUnknown@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], OFFSET ??_7CImageAllocator@@6BIMemAllocatorCallbackTemp@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pFilter$[ebp]
	mov	DWORD PTR [ecx+112], edx
; Line 1442
	cmp	DWORD PTR _phr$[ebp], 0
	jne	SHORT $LN2@CImageAllo
	push	1442					; 000005a2H
	push	OFFSET $SG82568
	push	OFFSET $SG82569
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CImageAllo:
; Line 1443
	cmp	DWORD PTR _pFilter$[ebp], 0
	jne	SHORT $LN3@CImageAllo
	push	1443					; 000005a3H
	push	OFFSET $SG82571
	push	OFFSET $SG82572
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CImageAllo:
; Line 1444
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseAllocator@@UAE@XZ		; CBaseAllocator::~CBaseAllocator
__ehhandler$??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CImageAllocator@@QAE@PAVCBaseFilter@@PA_WPAJ@Z ENDP	; CImageAllocator::CImageAllocator
PUBLIC	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ		; CUnknown::GetOwner
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z PROC ; CBaseAllocator::QueryInterface, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 1467
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _ppv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBaseAllocator@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBaseAllocator::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ PROC		; CUnknown::GetOwner, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\combase.h
; Line 224
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 226
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ ENDP		; CUnknown::GetOwner
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseAllocator@@UAGKXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBaseAllocator@@UAGKXZ PROC			; CBaseAllocator::AddRef, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 1467
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBaseAllocator@@UAGKXZ ENDP			; CBaseAllocator::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBaseAllocator@@UAGKXZ
_TEXT	SEGMENT
tv72 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBaseAllocator@@UAGKXZ PROC			; CBaseAllocator::Release, COMDAT
; Line 1467
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	call	?GetOwner@CUnknown@@QBEPAUIUnknown@@XZ	; CUnknown::GetOwner
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBaseAllocator@@UAGKXZ ENDP			; CBaseAllocator::Release
_TEXT	ENDS
PUBLIC	??1CImageAllocator@@UAE@XZ			; CImageAllocator::~CImageAllocator
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCImageAllocator@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCImageAllocator@@UAEPAXI@Z PROC			; CImageAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CImageAllocator@@UAE@XZ		; CImageAllocator::~CImageAllocator
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCImageAllocator@@UAEPAXI@Z ENDP			; CImageAllocator::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
xdata$x	SEGMENT
__unwindtable$??1CImageAllocator@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CImageAllocator@@UAE@XZ$0
__ehfuncinfo$??1CImageAllocator@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CImageAllocator@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CImageAllocator@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CImageAllocator@@UAE@XZ PROC				; CImageAllocator::~CImageAllocator, COMDAT
; _this$ = ecx
; Line 1451
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CImageAllocator@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CImageAllocator@@6BCUnknown@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET ??_7CImageAllocator@@6BIMemAllocatorCallbackTemp@@@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1452
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+96], 0
	je	SHORT $LN2@CImageAllo@2
	push	1452					; 000005acH
	push	OFFSET $SG82581
	push	OFFSET $SG82582
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CImageAllo@2:
; Line 1453
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseAllocator@@UAE@XZ		; CBaseAllocator::~CBaseAllocator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CImageAllocator@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseAllocator@@UAE@XZ		; CBaseAllocator::~CBaseAllocator
__ehhandler$??1CImageAllocator@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CImageAllocator@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CImageAllocator@@UAE@XZ ENDP				; CImageAllocator::~CImageAllocator
PUBLIC	?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ ; CBaseAllocator::CSampleList::RemoveHead
PUBLIC	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ	; CBaseAllocator::CSampleList::GetCount
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Free@CImageAllocator@@MAEXXZ
_TEXT	SEGMENT
tv162 = -24						; size = 4
$T84077 = -20						; size = 4
$T84076 = -16						; size = 4
_pDibData$ = -12					; size = 4
_pSample$ = -8						; size = 4
_this$ = -4						; size = 4
?Free@CImageAllocator@@MAEXXZ PROC			; CImageAllocator::Free, COMDAT
; _this$ = ecx
; Line 1463
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1464
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], eax
	je	SHORT $LN6@Free
	push	1464					; 000005b8H
	push	OFFSET $SG82587
	push	OFFSET $SG82588
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@Free:
; Line 1465
	mov	esi, esp
	call	DWORD PTR __imp__GdiFlush@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@Free
	push	1465					; 000005b9H
	push	OFFSET $SG82590
	push	OFFSET $SG82591
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@Free:
; Line 1469
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ; CBaseAllocator::CSampleList::GetCount
	test	eax, eax
	je	$LN3@Free
; Line 1470
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ ; CBaseAllocator::CSampleList::RemoveHead
	mov	DWORD PTR _pSample$[ebp], eax
; Line 1471
	mov	ecx, DWORD PTR _pSample$[ebp]
	call	?GetDIBData@CImageSample@@QAEPAUtagDIBDATA@@XZ ; CImageSample::GetDIBData
	mov	DWORD PTR _pDibData$[ebp], eax
; Line 1472
	mov	esi, esp
	mov	edx, DWORD PTR _pDibData$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@Free
	push	1472					; 000005c0H
	push	OFFSET $SG82599
	push	OFFSET $SG82600
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Free:
; Line 1473
	mov	esi, esp
	mov	ecx, DWORD PTR _pDibData$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@Free
	push	1473					; 000005c1H
	push	OFFSET $SG82602
	push	OFFSET $SG82603
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Free:
; Line 1474
	mov	eax, DWORD PTR _pSample$[ebp]
	mov	DWORD PTR $T84077[ebp], eax
	mov	ecx, DWORD PTR $T84077[ebp]
	mov	DWORD PTR $T84076[ebp], ecx
	cmp	DWORD PTR $T84076[ebp], 0
	je	SHORT $LN9@Free
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T84076[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T84076[ebp]
	mov	edx, DWORD PTR [eax+84]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN10@Free
$LN9@Free:
	mov	DWORD PTR tv162[ebp], 0
$LN10@Free:
; Line 1475
	jmp	$LN4@Free
$LN3@Free:
; Line 1477
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0
; Line 1478
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@CImageAllocator@@MAEXXZ ENDP			; CImageAllocator::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetCount@CSampleList@CBaseAllocator@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@CSampleList@CBaseAllocator@@QBEHXZ PROC	; CBaseAllocator::CSampleList::GetCount, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
; Line 1365
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCount@CSampleList@CBaseAllocator@@QBEHXZ ENDP	; CBaseAllocator::CSampleList::GetCount
_TEXT	ENDS
PUBLIC	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ
_TEXT	SEGMENT
_pSample$ = -8						; size = 4
_this$ = -4						; size = 4
?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ PROC ; CBaseAllocator::CSampleList::RemoveHead, COMDAT
; _this$ = ecx
; Line 1374
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1375
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pSample$[ebp], ecx
; Line 1376
	cmp	DWORD PTR _pSample$[ebp], 0
	je	SHORT $LN1@RemoveHead
; Line 1377
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 1378
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN1@RemoveHead:
; Line 1380
	mov	eax, DWORD PTR _pSample$[ebp]
; Line 1381
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveHead@CSampleList@CBaseAllocator@@QAEPAVCMediaSample@@XZ ENDP ; CBaseAllocator::CSampleList::RemoveHead
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z
_TEXT	SEGMENT
_pSample$ = 8						; size = 4
?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z PROC ; CBaseAllocator::NextSample, COMDAT
; Line 1348
	push	ebp
	mov	ebp, esp
; Line 1349
	mov	eax, DWORD PTR _pSample$[ebp]
	add	eax, 28					; 0000001cH
; Line 1350
	pop	ebp
	ret	4
?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ENDP ; CBaseAllocator::NextSample
_TEXT	ENDS
PUBLIC	?CheckSizes@CImageAllocator@@IAGJPAU_AllocatorProperties@@@Z ; CImageAllocator::CheckSizes
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckSizes@CImageAllocator@@IAGJPAU_AllocatorProperties@@@Z
_TEXT	SEGMENT
_pVideoInfo$ = -4					; size = 4
_this$ = 8						; size = 4
_pRequest$ = 12						; size = 4
?CheckSizes@CImageAllocator@@IAGJPAU_AllocatorProperties@@@Z PROC ; CImageAllocator::CheckSizes, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
; Line 1484
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1487
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN3@CheckSizes
; Line 1488
	mov	eax, -2147220983			; 80040209H
	jmp	SHORT $LN4@CheckSizes
$LN3@CheckSizes:
; Line 1496
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	mov	DWORD PTR _pVideoInfo$[ebp], eax
; Line 1503
	mov	edx, DWORD PTR _pRequest$[ebp]
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+68]
	jae	SHORT $LN2@CheckSizes
; Line 1504
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN4@CheckSizes
$LN2@CheckSizes:
; Line 1509
	mov	edx, DWORD PTR _pRequest$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jle	SHORT $LN1@CheckSizes
; Line 1510
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN4@CheckSizes
$LN1@CheckSizes:
; Line 1513
	mov	eax, DWORD PTR _pRequest$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+4], edx
; Line 1514
	xor	eax, eax
$LN4@CheckSizes:
; Line 1515
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CheckSizes@CImageAllocator@@IAGJPAU_AllocatorProperties@@@Z ENDP ; CImageAllocator::CheckSizes
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z:PROC ; CBaseAllocator::SetProperties
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetProperties@CImageAllocator@@UAGJPAU_AllocatorProperties@@0@Z
_TEXT	SEGMENT
_hr$ = -32						; size = 4
_Adjusted$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_pRequest$ = 12						; size = 4
_pActual$ = 16						; size = 4
?SetProperties@CImageAllocator@@UAGJPAU_AllocatorProperties@@0@Z PROC ; CImageAllocator::SetProperties, COMDAT
; Line 1525
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1526
	mov	eax, DWORD PTR _pRequest$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Adjusted$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Adjusted$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _Adjusted$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _Adjusted$[ebp+12], edx
; Line 1530
	lea	eax, DWORD PTR _Adjusted$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 16					; 00000010H
	push	ecx
	call	?CheckSizes@CImageAllocator@@IAGJPAU_AllocatorProperties@@@Z ; CImageAllocator::CheckSizes
	mov	DWORD PTR _hr$[ebp], eax
; Line 1531
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetPropert
; Line 1532
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@SetPropert
$LN1@SetPropert:
; Line 1534
	mov	edx, DWORD PTR _pActual$[ebp]
	push	edx
	lea	eax, DWORD PTR _Adjusted$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?SetProperties@CBaseAllocator@@UAGJPAU_AllocatorProperties@@0@Z ; CBaseAllocator::SetProperties
$LN2@SetPropert:
; Line 1535
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetPropert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN6@SetPropert:
	DD	1
	DD	$LN5@SetPropert
$LN5@SetPropert:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@SetPropert
$LN4@SetPropert:
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	106					; 0000006aH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?SetProperties@CImageAllocator@@UAGJPAU_AllocatorProperties@@0@Z ENDP ; CImageAllocator::SetProperties
_TEXT	ENDS
PUBLIC	?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ; CBaseAllocator::CSampleList::Add
PUBLIC	?SetDIBData@CImageSample@@QAEXPAUtagDIBDATA@@@Z	; CImageSample::SetDIBData
PUBLIC	?CreateDIB@CImageAllocator@@IAEJJAAUtagDIBDATA@@@Z ; CImageAllocator::CreateDIB
PUBLIC	__$ArrayPad$
EXTRN	?Alloc@CBaseAllocator@@MAEJXZ:PROC		; CBaseAllocator::Alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@CImageAllocator@@MAEJXZ
_TEXT	SEGMENT
_hr$82646 = -128					; size = 4
_hr$ = -124						; size = 4
_DibData$ = -116					; size = 100
_pSample$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Alloc@CImageAllocator@@MAEJXZ PROC			; CImageAllocator::Alloc, COMDAT
; _this$ = ecx
; Line 1547
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1548
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN9@Alloc
	push	1548					; 0000060cH
	push	OFFSET $SG82633
	push	OFFSET $SG82634
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN9@Alloc:
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Alloc@CBaseAllocator@@MAEJXZ		; CBaseAllocator::Alloc
	mov	DWORD PTR _hr$[ebp], eax
; Line 1555
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@Alloc
; Line 1556
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN10@Alloc
$LN8@Alloc:
; Line 1564
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	SHORT $LN6@Alloc
	push	1564					; 0000061cH
	push	OFFSET $SG82641
	push	OFFSET $SG82642
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN6@Alloc:
; Line 1565
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	cmp	ecx, DWORD PTR [eax+72]
	jge	$LN5@Alloc
; Line 1569
	lea	edx, DWORD PTR _DibData$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateDIB@CImageAllocator@@IAEJJAAUtagDIBDATA@@@Z ; CImageAllocator::CreateDIB
	mov	DWORD PTR _hr$82646[ebp], eax
; Line 1570
	cmp	DWORD PTR _hr$82646[ebp], 0
	jge	SHORT $LN4@Alloc
; Line 1571
	mov	eax, DWORD PTR _hr$82646[ebp]
	jmp	$LN10@Alloc
$LN4@Alloc:
; Line 1576
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _DibData$[ebp+96]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pSample$[ebp], eax
; Line 1577
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN3@Alloc
; Line 1578
	mov	esi, esp
	mov	eax, DWORD PTR _DibData$[ebp+88]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@Alloc
	push	1578					; 0000062aH
	push	OFFSET $SG82651
	push	OFFSET $SG82652
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@Alloc:
; Line 1579
	mov	esi, esp
	mov	ecx, DWORD PTR _DibData$[ebp+92]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@Alloc
	push	1579					; 0000062bH
	push	OFFSET $SG82654
	push	OFFSET $SG82655
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Alloc:
; Line 1580
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN10@Alloc
$LN3@Alloc:
; Line 1585
	lea	edx, DWORD PTR _DibData$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pSample$[ebp]
	call	?SetDIBData@CImageSample@@QAEXPAUtagDIBDATA@@@Z ; CImageSample::SetDIBData
; Line 1586
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ; CBaseAllocator::CSampleList::Add
; Line 1587
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], edx
; Line 1588
	jmp	$LN6@Alloc
$LN5@Alloc:
; Line 1589
	xor	eax, eax
$LN10@Alloc:
; Line 1590
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Alloc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@Alloc:
	DD	1
	DD	$LN13@Alloc
$LN13@Alloc:
	DD	-116					; ffffff8cH
	DD	100					; 00000064H
	DD	$LN12@Alloc
$LN12@Alloc:
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?Alloc@CImageAllocator@@MAEJXZ ENDP			; CImageAllocator::Alloc
_TEXT	ENDS
PUBLIC	??_C@_1CA@MBBAJLBI@?$AAp?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ ; `string'
;	COMDAT ??_C@_1CA@MBBAJLBI@?$AAp?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
; File c:\downloads\mediapoint\src\filters\baseclasses\amfilter.h
CONST	SEGMENT
??_C@_1CA@MBBAJLBI@?$AAp?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'p'
	DB	00H, 'S', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
CONST	SEGMENT
??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'D', 00H, 'o', 00H, 'w', 00H, 'n', 00H
	DB	'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'P', 00H, 'o', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c'
	DB	00H, '\', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 'e', 00H
	DB	's', 00H, '\', 00H, 'a', 00H, 'm', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSample$ = 8						; size = 4
?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z PROC ; CBaseAllocator::CSampleList::Add, COMDAT
; _this$ = ecx
; Line 1367
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1368
	cmp	DWORD PTR _pSample$[ebp], 0
	jne	SHORT $LN1@Add
	push	1368					; 00000558H
	push	OFFSET ??_C@_1HG@MPHBNOLH@?$AAC?$AA?3?$AA?2?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAs?$AA?2?$AAM?$AAe?$AAd?$AAi?$AAa?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAf?$AAi?$AAl?$AAt@
	push	OFFSET ??_C@_1CA@MBBAJLBI@?$AAp?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Add:
; Line 1369
	mov	eax, DWORD PTR _pSample$[ebp]
	push	eax
	call	?NextSample@CBaseAllocator@@CGAAPAVCMediaSample@@PAV2@@Z ; CBaseAllocator::NextSample
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 1370
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSample$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1371
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1372
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@CSampleList@CBaseAllocator@@QAEXPAVCMediaSample@@@Z ENDP ; CBaseAllocator::CSampleList::Add
_TEXT	ENDS
PUBLIC	??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z ; CImageSample::CImageSample
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
xdata$x	SEGMENT
__unwindtable$?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z$0
__ehfuncinfo$?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z
_TEXT	SEGMENT
tv92 = -56						; size = 4
tv80 = -52						; size = 4
$T84109 = -48						; size = 4
$T84108 = -44						; size = 4
$T84105 = -40						; size = 4
$T84104 = -36						; size = 4
_pSample$ = -32						; size = 4
_hr$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pData$ = 8						; size = 4
_Length$ = 12						; size = 4
?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z PROC ; CImageAllocator::CreateImageSample, COMDAT
; _this$ = ecx
; Line 1598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1599
	mov	DWORD PTR _hr$[ebp], 0
; Line 1608
	push	176					; 000000b0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T84105[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T84105[ebp], 0
	je	SHORT $LN5@CreateImag
	mov	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	OFFSET $SG82672
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T84105[ebp]
	call	??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z ; CImageSample::CImageSample
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN6@CreateImag
$LN5@CreateImag:
	mov	DWORD PTR tv80[ebp], 0
$LN6@CreateImag:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T84104[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T84104[ebp]
	mov	DWORD PTR _pSample$[ebp], edx
; Line 1610
	cmp	DWORD PTR _pSample$[ebp], 0
	je	SHORT $LN1@CreateImag
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CreateImag
$LN1@CreateImag:
; Line 1611
	mov	eax, DWORD PTR _pSample$[ebp]
	mov	DWORD PTR $T84109[ebp], eax
	mov	ecx, DWORD PTR $T84109[ebp]
	mov	DWORD PTR $T84108[ebp], ecx
	cmp	DWORD PTR $T84108[ebp], 0
	je	SHORT $LN7@CreateImag
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T84108[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T84108[ebp]
	mov	edx, DWORD PTR [eax+84]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN8@CreateImag
$LN7@CreateImag:
	mov	DWORD PTR tv92[ebp], 0
$LN8@CreateImag:
; Line 1612
	xor	eax, eax
	jmp	SHORT $LN3@CreateImag
$LN2@CreateImag:
; Line 1614
	mov	eax, DWORD PTR _pSample$[ebp]
$LN3@CreateImag:
; Line 1615
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@CreateImag
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@CreateImag:
	DD	1
	DD	$LN12@CreateImag
$LN12@CreateImag:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@CreateImag
$LN10@CreateImag:
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z$0:
	mov	eax, DWORD PTR $T84105[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateImageSample@CImageAllocator@@MAEPAVCImageSample@@PAEJ@Z ENDP ; CImageAllocator::CreateImageSample
EXTRN	__imp__GetObjectW@12:PROC
EXTRN	__imp__CreateDIBSection@24:PROC
EXTRN	__imp__CreateFileMappingW@24:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateDIB@CImageAllocator@@IAEJJAAUtagDIBDATA@@@Z
_TEXT	SEGMENT
_Error$82707 = -36					; size = 4
_Error$82689 = -32					; size = 4
_hBitmap$ = -28						; size = 4
_hMapping$ = -24					; size = 4
_pBase$ = -16						; size = 4
_pbmi$ = -8						; size = 4
_this$ = -4						; size = 4
_InSize$ = 8						; size = 4
_DibData$ = 12						; size = 4
?CreateDIB@CImageAllocator@@IAEJJAAUtagDIBDATA@@@Z PROC	; CImageAllocator::CreateDIB, COMDAT
; _this$ = ecx
; Line 1623
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1636
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _InSize$[ebp]
	push	eax
	push	0
	push	4
	push	0
	push	-1
	call	DWORD PTR __imp__CreateFileMappingW@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hMapping$[ebp], eax
; Line 1637
	cmp	DWORD PTR _hMapping$[ebp], 0
	jne	SHORT $LN5@CreateDIB
; Line 1638
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Error$82689[ebp], eax
; Line 1639
	mov	eax, DWORD PTR _Error$82689[ebp]
	or	eax, -2147024896			; 80070000H
	jmp	$LN6@CreateDIB
$LN5@CreateDIB:
; Line 1647
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	add	eax, 48					; 00000030H
	mov	DWORD PTR _pbmi$[ebp], eax
; Line 1648
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+116], 0
	jne	SHORT $LN4@CreateDIB
; Line 1649
	push	1649					; 00000671H
	push	OFFSET $SG82697
	push	OFFSET $SG82698
	call	?DbgBreakPoint@@YGXPB_W0H@Z		; DbgBreakPoint
$LN4@CreateDIB:
; Line 1657
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _hMapping$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pBase$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pbmi$[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__CreateDIBSection@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hBitmap$[ebp], eax
; Line 1659
	cmp	DWORD PTR _hBitmap$[ebp], 0
	je	SHORT $LN2@CreateDIB
	cmp	DWORD PTR _pBase$[ebp], 0
	jne	SHORT $LN3@CreateDIB
$LN2@CreateDIB:
; Line 1660
	mov	esi, esp
	mov	eax, DWORD PTR _hMapping$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@CreateDIB
	push	1660					; 0000067cH
	push	OFFSET $SG82705
	push	OFFSET $SG82706
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CreateDIB:
; Line 1661
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Error$82707[ebp], eax
; Line 1662
	mov	eax, DWORD PTR _Error$82707[ebp]
	or	eax, -2147024896			; 80070000H
	jmp	SHORT $LN6@CreateDIB
$LN3@CreateDIB:
; Line 1667
	mov	ecx, DWORD PTR _DibData$[ebp]
	mov	edx, DWORD PTR _hBitmap$[ebp]
	mov	DWORD PTR [ecx+88], edx
; Line 1668
	mov	eax, DWORD PTR _DibData$[ebp]
	mov	ecx, DWORD PTR _hMapping$[ebp]
	mov	DWORD PTR [eax+92], ecx
; Line 1669
	mov	edx, DWORD PTR _DibData$[ebp]
	mov	eax, DWORD PTR _pBase$[ebp]
	mov	DWORD PTR [edx+96], eax
; Line 1670
	mov	ecx, DWORD PTR _DibData$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 1671
	mov	edx, DWORD PTR _DibData$[ebp]
	add	edx, 4
	mov	esi, esp
	push	edx
	push	84					; 00000054H
	mov	eax, DWORD PTR _hBitmap$[ebp]
	push	eax
	call	DWORD PTR __imp__GetObjectW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1673
	xor	eax, eax
$LN6@CreateDIB:
; Line 1674
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateDIB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN10@CreateDIB:
	DD	1
	DD	$LN9@CreateDIB
$LN9@CreateDIB:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN8@CreateDIB
$LN8@CreateDIB:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
?CreateDIB@CImageAllocator@@IAEJJAAUtagDIBDATA@@@Z ENDP	; CImageAllocator::CreateDIB
_TEXT	ENDS
PUBLIC	?NotifyMediaType@CImageAllocator@@QAEXPAVCMediaType@@@Z ; CImageAllocator::NotifyMediaType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NotifyMediaType@CImageAllocator@@QAEXPAVCMediaType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pMediaType$ = 8					; size = 4
?NotifyMediaType@CImageAllocator@@QAEXPAVCMediaType@@@Z PROC ; CImageAllocator::NotifyMediaType, COMDAT
; _this$ = ecx
; Line 1680
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1681
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pMediaType$[ebp]
	mov	DWORD PTR [eax+116], ecx
; Line 1682
	mov	esp, ebp
	pop	ebp
	ret	4
?NotifyMediaType@CImageAllocator@@QAEXPAVCMediaType@@@Z ENDP ; CImageAllocator::NotifyMediaType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NonDelegatingAddRef@CImageAllocator@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?NonDelegatingAddRef@CImageAllocator@@UAGKXZ PROC	; CImageAllocator::NonDelegatingAddRef, COMDAT
; Line 1688
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1689
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [ecx+16]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1690
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?NonDelegatingAddRef@CImageAllocator@@UAGKXZ ENDP	; CImageAllocator::NonDelegatingAddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NonDelegatingRelease@CImageAllocator@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?NonDelegatingRelease@CImageAllocator@@UAGKXZ PROC	; CImageAllocator::NonDelegatingRelease, COMDAT
; Line 1696
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1697
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [ecx+16]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1698
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?NonDelegatingRelease@CImageAllocator@@UAGKXZ ENDP	; CImageAllocator::NonDelegatingRelease
_TEXT	ENDS
PUBLIC	??_7CImageSample@@6B@				; CImageSample::`vftable'
PUBLIC	??_R4CImageSample@@6B@				; CImageSample::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImageSample@@@8			; CImageSample `RTTI Type Descriptor'
PUBLIC	??_R3CImageSample@@8				; CImageSample::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImageSample@@8				; CImageSample::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImageSample@@8			; CImageSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CMediaSample@@8			; CMediaSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCMediaSample@@@8			; CMediaSample `RTTI Type Descriptor'
PUBLIC	??_R3CMediaSample@@8				; CMediaSample::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMediaSample@@8				; CMediaSample::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IMediaSample2@@8			; IMediaSample2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIMediaSample2@@@8			; IMediaSample2 `RTTI Type Descriptor'
PUBLIC	??_R3IMediaSample2@@8				; IMediaSample2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMediaSample2@@8				; IMediaSample2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IMediaSample@@8			; IMediaSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIMediaSample@@@8			; IMediaSample `RTTI Type Descriptor'
PUBLIC	??_R3IMediaSample@@8				; IMediaSample::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMediaSample@@8				; IMediaSample::`RTTI Base Class Array'
EXTRN	??1CMediaSample@@UAE@XZ:PROC			; CMediaSample::~CMediaSample
EXTRN	??0CMediaSample@@QAE@PA_WPAVCBaseAllocator@@PAJPAEJ@Z:PROC ; CMediaSample::CMediaSample
EXTRN	?QueryInterface@CMediaSample@@UAGJABU_GUID@@PAPAX@Z:PROC ; CMediaSample::QueryInterface
EXTRN	?AddRef@CMediaSample@@UAGKXZ:PROC		; CMediaSample::AddRef
EXTRN	?Release@CMediaSample@@UAGKXZ:PROC		; CMediaSample::Release
EXTRN	?GetPointer@CMediaSample@@UAGJPAPAE@Z:PROC	; CMediaSample::GetPointer
EXTRN	?GetSize@CMediaSample@@UAGJXZ:PROC		; CMediaSample::GetSize
EXTRN	?GetTime@CMediaSample@@UAGJPA_J0@Z:PROC		; CMediaSample::GetTime
EXTRN	?SetTime@CMediaSample@@UAGJPA_J0@Z:PROC		; CMediaSample::SetTime
EXTRN	?IsSyncPoint@CMediaSample@@UAGJXZ:PROC		; CMediaSample::IsSyncPoint
EXTRN	?SetSyncPoint@CMediaSample@@UAGJH@Z:PROC	; CMediaSample::SetSyncPoint
EXTRN	?IsPreroll@CMediaSample@@UAGJXZ:PROC		; CMediaSample::IsPreroll
EXTRN	?SetPreroll@CMediaSample@@UAGJH@Z:PROC		; CMediaSample::SetPreroll
EXTRN	?GetActualDataLength@CMediaSample@@UAGJXZ:PROC	; CMediaSample::GetActualDataLength
EXTRN	?SetActualDataLength@CMediaSample@@UAGJJ@Z:PROC	; CMediaSample::SetActualDataLength
EXTRN	?GetMediaType@CMediaSample@@UAGJPAPAU_AMMediaType@@@Z:PROC ; CMediaSample::GetMediaType
EXTRN	?SetMediaType@CMediaSample@@UAGJPAU_AMMediaType@@@Z:PROC ; CMediaSample::SetMediaType
EXTRN	?IsDiscontinuity@CMediaSample@@UAGJXZ:PROC	; CMediaSample::IsDiscontinuity
EXTRN	?SetDiscontinuity@CMediaSample@@UAGJH@Z:PROC	; CMediaSample::SetDiscontinuity
EXTRN	?GetMediaTime@CMediaSample@@UAGJPA_J0@Z:PROC	; CMediaSample::GetMediaTime
EXTRN	?SetMediaTime@CMediaSample@@UAGJPA_J0@Z:PROC	; CMediaSample::SetMediaTime
EXTRN	?GetProperties@CMediaSample@@UAGJKPAE@Z:PROC	; CMediaSample::GetProperties
EXTRN	?SetProperties@CMediaSample@@UAGJKPBE@Z:PROC	; CMediaSample::SetProperties
EXTRN	??_ECImageSample@@UAEPAXI@Z:PROC		; CImageSample::`vector deleting destructor'
;	COMDAT ??_R2IMediaSample@@8
rdata$r	SEGMENT
??_R2IMediaSample@@8 DD FLAT:??_R1A@?0A@EA@IMediaSample@@8 ; IMediaSample::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IMediaSample@@8
rdata$r	SEGMENT
??_R3IMediaSample@@8 DD 00H				; IMediaSample::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMediaSample@@@8
_DATA	SEGMENT
??_R0?AUIMediaSample@@@8 DD FLAT:??_7type_info@@6B@	; IMediaSample `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMediaSample@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IMediaSample@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMediaSample@@8 DD FLAT:??_R0?AUIMediaSample@@@8 ; IMediaSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_R2IMediaSample2@@8
rdata$r	SEGMENT
??_R2IMediaSample2@@8 DD FLAT:??_R1A@?0A@EA@IMediaSample2@@8 ; IMediaSample2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IMediaSample@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IMediaSample2@@8
rdata$r	SEGMENT
??_R3IMediaSample2@@8 DD 00H				; IMediaSample2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IMediaSample2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMediaSample2@@@8
_DATA	SEGMENT
??_R0?AUIMediaSample2@@@8 DD FLAT:??_7type_info@@6B@	; IMediaSample2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMediaSample2@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IMediaSample2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMediaSample2@@8 DD FLAT:??_R0?AUIMediaSample2@@@8 ; IMediaSample2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMediaSample2@@8
rdata$r	ENDS
;	COMDAT ??_R2CMediaSample@@8
rdata$r	SEGMENT
??_R2CMediaSample@@8 DD FLAT:??_R1A@?0A@EA@CMediaSample@@8 ; CMediaSample::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IMediaSample2@@8
	DD	FLAT:??_R1A@?0A@EA@IMediaSample@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CMediaSample@@8
rdata$r	SEGMENT
??_R3CMediaSample@@8 DD 00H				; CMediaSample::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMediaSample@@@8
_DATA	SEGMENT
??_R0?AVCMediaSample@@@8 DD FLAT:??_7type_info@@6B@	; CMediaSample `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMediaSample@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CMediaSample@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMediaSample@@8 DD FLAT:??_R0?AVCMediaSample@@@8 ; CMediaSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMediaSample@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CImageSample@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImageSample@@8 DD FLAT:??_R0?AVCImageSample@@@8 ; CImageSample::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImageSample@@8
rdata$r	ENDS
;	COMDAT ??_R2CImageSample@@8
rdata$r	SEGMENT
??_R2CImageSample@@8 DD FLAT:??_R1A@?0A@EA@CImageSample@@8 ; CImageSample::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CMediaSample@@8
	DD	FLAT:??_R1A@?0A@EA@IMediaSample2@@8
	DD	FLAT:??_R1A@?0A@EA@IMediaSample@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CImageSample@@8
rdata$r	SEGMENT
??_R3CImageSample@@8 DD 00H				; CImageSample::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CImageSample@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImageSample@@@8
_DATA	SEGMENT
??_R0?AVCImageSample@@@8 DD FLAT:??_7type_info@@6B@	; CImageSample `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImageSample@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CImageSample@@6B@
rdata$r	SEGMENT
??_R4CImageSample@@6B@ DD 00H				; CImageSample::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImageSample@@@8
	DD	FLAT:??_R3CImageSample@@8
rdata$r	ENDS
;	COMDAT ??_7CImageSample@@6B@
CONST	SEGMENT
??_7CImageSample@@6B@ DD FLAT:??_R4CImageSample@@6B@	; CImageSample::`vftable'
	DD	FLAT:?QueryInterface@CMediaSample@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMediaSample@@UAGKXZ
	DD	FLAT:?Release@CMediaSample@@UAGKXZ
	DD	FLAT:?GetPointer@CMediaSample@@UAGJPAPAE@Z
	DD	FLAT:?GetSize@CMediaSample@@UAGJXZ
	DD	FLAT:?GetTime@CMediaSample@@UAGJPA_J0@Z
	DD	FLAT:?SetTime@CMediaSample@@UAGJPA_J0@Z
	DD	FLAT:?IsSyncPoint@CMediaSample@@UAGJXZ
	DD	FLAT:?SetSyncPoint@CMediaSample@@UAGJH@Z
	DD	FLAT:?IsPreroll@CMediaSample@@UAGJXZ
	DD	FLAT:?SetPreroll@CMediaSample@@UAGJH@Z
	DD	FLAT:?GetActualDataLength@CMediaSample@@UAGJXZ
	DD	FLAT:?SetActualDataLength@CMediaSample@@UAGJJ@Z
	DD	FLAT:?GetMediaType@CMediaSample@@UAGJPAPAU_AMMediaType@@@Z
	DD	FLAT:?SetMediaType@CMediaSample@@UAGJPAU_AMMediaType@@@Z
	DD	FLAT:?IsDiscontinuity@CMediaSample@@UAGJXZ
	DD	FLAT:?SetDiscontinuity@CMediaSample@@UAGJH@Z
	DD	FLAT:?GetMediaTime@CMediaSample@@UAGJPA_J0@Z
	DD	FLAT:?SetMediaTime@CMediaSample@@UAGJPA_J0@Z
	DD	FLAT:?GetProperties@CMediaSample@@UAGJKPAE@Z
	DD	FLAT:?SetProperties@CMediaSample@@UAGJKPBE@Z
	DD	FLAT:??_ECImageSample@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z$0
__ehfuncinfo$??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pAllocator$ = 8					; size = 4
_pName$ = 12						; size = 4
_phr$ = 16						; size = 4
_pBuffer$ = 20						; size = 4
_length$ = 24						; size = 4
??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z PROC ; CImageSample::CImageSample, COMDAT
; _this$ = ecx
; Line 1724
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _phr$[ebp]
	push	edx
	mov	eax, DWORD PTR _pAllocator$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMediaSample@@QAE@PA_WPAVCBaseAllocator@@PAJPAEJ@Z ; CMediaSample::CMediaSample
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CImageSample@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 0
; Line 1725
	cmp	DWORD PTR _pAllocator$[ebp], 0
	jne	SHORT $LN2@CImageSamp
	push	1725					; 000006bdH
	push	OFFSET $SG82733
	push	OFFSET $SG82734
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CImageSamp:
; Line 1726
	cmp	DWORD PTR _pBuffer$[ebp], 0
	jne	SHORT $LN3@CImageSamp
	push	1726					; 000006beH
	push	OFFSET $SG82736
	push	OFFSET $SG82737
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CImageSamp:
; Line 1727
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMediaSample@@UAE@XZ			; CMediaSample::~CMediaSample
__ehhandler$??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CImageSample@@QAE@PAVCBaseAllocator@@PA_WPAJPAEJ@Z ENDP ; CImageSample::CImageSample
PUBLIC	??1CImageSample@@UAE@XZ				; CImageSample::~CImageSample
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCImageSample@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCImageSample@@UAEPAXI@Z PROC			; CImageSample::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CImageSample@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCImageSample@@UAEPAXI@Z ENDP			; CImageSample::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CImageSample@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CImageSample@@UAE@XZ PROC				; CImageSample::~CImageSample, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMediaSample@@UAE@XZ			; CMediaSample::~CMediaSample
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CImageSample@@UAE@XZ ENDP				; CImageSample::~CImageSample
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetDIBData@CImageSample@@QAEXPAUtagDIBDATA@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDibData$ = 8						; size = 4
?SetDIBData@CImageSample@@QAEXPAUtagDIBDATA@@@Z PROC	; CImageSample::SetDIBData, COMDAT
; _this$ = ecx
; Line 1733
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1734
	cmp	DWORD PTR _pDibData$[ebp], 0
	jne	SHORT $LN1@SetDIBData
	push	1734					; 000006c6H
	push	OFFSET $SG82749
	push	OFFSET $SG82750
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetDIBData:
; Line 1735
	mov	esi, DWORD PTR _pDibData$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 72					; 00000048H
	mov	ecx, 25					; 00000019H
	rep movsd
; Line 1736
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 1
; Line 1737
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDIBData@CImageSample@@QAEXPAUtagDIBDATA@@@Z ENDP	; CImageSample::SetDIBData
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetDIBData@CImageSample@@QAEPAUtagDIBDATA@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDIBData@CImageSample@@QAEPAUtagDIBDATA@@XZ PROC	; CImageSample::GetDIBData, COMDAT
; _this$ = ecx
; Line 1743
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1744
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 1
	je	SHORT $LN1@GetDIBData
	push	1744					; 000006d0H
	push	OFFSET $SG82755
	push	OFFSET $SG82756
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetDIBData:
; Line 1745
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 72					; 00000048H
; Line 1746
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDIBData@CImageSample@@QAEPAUtagDIBDATA@@XZ ENDP	; CImageSample::GetDIBData
_TEXT	ENDS
PUBLIC	??_7CImagePalette@@6B@				; CImagePalette::`vftable'
PUBLIC	??0CImagePalette@@QAE@PAVCBaseFilter@@PAVCBaseWindow@@PAVCDrawImage@@@Z ; CImagePalette::CImagePalette
PUBLIC	??_R4CImagePalette@@6B@				; CImagePalette::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImagePalette@@@8			; CImagePalette `RTTI Type Descriptor'
PUBLIC	??_R3CImagePalette@@8				; CImagePalette::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImagePalette@@8				; CImagePalette::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImagePalette@@8			; CImagePalette::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECImagePalette@@UAEPAXI@Z:PROC		; CImagePalette::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CImagePalette@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImagePalette@@8 DD FLAT:??_R0?AVCImagePalette@@@8 ; CImagePalette::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImagePalette@@8
rdata$r	ENDS
;	COMDAT ??_R2CImagePalette@@8
rdata$r	SEGMENT
??_R2CImagePalette@@8 DD FLAT:??_R1A@?0A@EA@CImagePalette@@8 ; CImagePalette::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CImagePalette@@8
rdata$r	SEGMENT
??_R3CImagePalette@@8 DD 00H				; CImagePalette::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CImagePalette@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImagePalette@@@8
_DATA	SEGMENT
??_R0?AVCImagePalette@@@8 DD FLAT:??_7type_info@@6B@	; CImagePalette `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImagePalette@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CImagePalette@@6B@
rdata$r	SEGMENT
??_R4CImagePalette@@6B@ DD 00H				; CImagePalette::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImagePalette@@@8
	DD	FLAT:??_R3CImagePalette@@8
rdata$r	ENDS
;	COMDAT ??_7CImagePalette@@6B@
CONST	SEGMENT
??_7CImagePalette@@6B@ DD FLAT:??_R4CImagePalette@@6B@	; CImagePalette::`vftable'
	DD	FLAT:??_ECImagePalette@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CImagePalette@@QAE@PAVCBaseFilter@@PAVCBaseWindow@@PAVCDrawImage@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pBaseFilter$ = 8					; size = 4
_pBaseWindow$ = 12					; size = 4
_pDrawImage$ = 16					; size = 4
??0CImagePalette@@QAE@PAVCBaseFilter@@PAVCBaseWindow@@PAVCDrawImage@@@Z PROC ; CImagePalette::CImagePalette, COMDAT
; _this$ = ecx
; Line 1765
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CImagePalette@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pBaseWindow$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pBaseFilter$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pDrawImage$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 1766
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN2@CImagePale
	push	1766					; 000006e6H
	push	OFFSET $SG82764
	push	OFFSET $SG82765
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CImagePale:
; Line 1767
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CImagePalette@@QAE@PAVCBaseFilter@@PAVCBaseWindow@@PAVCDrawImage@@@Z ENDP ; CImagePalette::CImagePalette
_TEXT	ENDS
PUBLIC	??1CImagePalette@@UAE@XZ			; CImagePalette::~CImagePalette
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCImagePalette@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCImagePalette@@UAEPAXI@Z PROC			; CImagePalette::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CImagePalette@@UAE@XZ		; CImagePalette::~CImagePalette
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCImagePalette@@UAEPAXI@Z ENDP			; CImagePalette::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CImagePalette@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CImagePalette@@UAE@XZ PROC				; CImagePalette::~CImagePalette, COMDAT
; _this$ = ecx
; Line 1774
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CImagePalette@@6B@
; Line 1775
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN2@CImagePale@2
	push	1775					; 000006efH
	push	OFFSET $SG82774
	push	OFFSET $SG82775
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CImagePale@2:
; Line 1776
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CImagePalette@@UAE@XZ ENDP				; CImagePalette::~CImagePalette
_TEXT	ENDS
PUBLIC	?ShouldUpdate@CImagePalette@@QAEHPBUtagVIDEOINFOHEADER@@0@Z ; CImagePalette::ShouldUpdate
EXTRN	_memcmp:PROC
EXTRN	_GetBitmapPalette@4:PROC
EXTRN	_ContainsPalette@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ShouldUpdate@CImagePalette@@QAEHPBUtagVIDEOINFOHEADER@@0@Z
_TEXT	SEGMENT
_VideoEntries$ = -8					; size = 4
_this$ = -4						; size = 4
_pNewInfo$ = 8						; size = 4
_pOldInfo$ = 12						; size = 4
?ShouldUpdate@CImagePalette@@QAEHPBUtagVIDEOINFOHEADER@@0@Z PROC ; CImagePalette::ShouldUpdate, COMDAT
; _this$ = ecx
; Line 1790
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1793
	cmp	DWORD PTR _pOldInfo$[ebp], 0
	jne	SHORT $LN8@ShouldUpda
; Line 1794
	mov	eax, 1
	jmp	$LN9@ShouldUpda
$LN8@ShouldUpda:
; Line 1799
	mov	eax, DWORD PTR _pNewInfo$[ebp]
	push	eax
	call	_ContainsPalette@4
	test	eax, eax
	jne	SHORT $LN7@ShouldUpda
; Line 1800
	mov	ecx, DWORD PTR _pOldInfo$[ebp]
	push	ecx
	call	_ContainsPalette@4
	test	eax, eax
	jne	SHORT $LN7@ShouldUpda
; Line 1801
	xor	eax, eax
	jmp	SHORT $LN9@ShouldUpda
$LN7@ShouldUpda:
; Line 1807
	mov	edx, DWORD PTR _pNewInfo$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _VideoEntries$[ebp], eax
; Line 1808
	mov	ecx, DWORD PTR _pNewInfo$[ebp]
	push	ecx
	call	_ContainsPalette@4
	cmp	eax, 1
	jne	SHORT $LN5@ShouldUpda
; Line 1809
	mov	edx, DWORD PTR _pOldInfo$[ebp]
	push	edx
	call	_ContainsPalette@4
	cmp	eax, 1
	jne	SHORT $LN5@ShouldUpda
; Line 1810
	mov	eax, DWORD PTR _pOldInfo$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	cmp	ecx, DWORD PTR _VideoEntries$[ebp]
	jne	SHORT $LN5@ShouldUpda
; Line 1811
	mov	edx, DWORD PTR _pOldInfo$[ebp]
	cmp	DWORD PTR [edx+80], 0
	jbe	SHORT $LN5@ShouldUpda
; Line 1814
	mov	eax, DWORD PTR _VideoEntries$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _pOldInfo$[ebp]
	push	ecx
	call	_GetBitmapPalette@4
	push	eax
	mov	edx, DWORD PTR _pNewInfo$[ebp]
	push	edx
	call	_GetBitmapPalette@4
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@ShouldUpda
; Line 1816
	xor	eax, eax
	jmp	SHORT $LN9@ShouldUpda
$LN5@ShouldUpda:
; Line 1818
	mov	eax, 1
$LN9@ShouldUpda:
; Line 1819
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ShouldUpdate@CImagePalette@@QAEHPBUtagVIDEOINFOHEADER@@0@Z ENDP ; CImagePalette::ShouldUpdate
_TEXT	ENDS
PUBLIC	?MakePalette@CImagePalette@@SGPAUHPALETTE__@@PBUtagVIDEOINFOHEADER@@PAD@Z ; CImagePalette::MakePalette
PUBLIC	?RemovePalette@CImagePalette@@QAEJXZ		; CImagePalette::RemovePalette
PUBLIC	?PreparePalette@CImagePalette@@QAEJPBVCMediaType@@0PAD@Z ; CImagePalette::PreparePalette
EXTRN	?NotifyEvent@CBaseFilter@@QAEJJJJ@Z:PROC	; CBaseFilter::NotifyEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PreparePalette@CImagePalette@@QAEJPBVCMediaType@@0PAD@Z
_TEXT	SEGMENT
_pOldInfo$ = -12					; size = 4
_pNewInfo$ = -8						; size = 4
_this$ = -4						; size = 4
_pmtNew$ = 8						; size = 4
_pmtOld$ = 12						; size = 4
_szDevice$ = 16						; size = 4
?PreparePalette@CImagePalette@@QAEJPBVCMediaType@@0PAD@Z PROC ; CImagePalette::PreparePalette, COMDAT
; _this$ = ecx
; Line 1834
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1835
	mov	ecx, DWORD PTR _pmtNew$[ebp]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	mov	DWORD PTR _pNewInfo$[ebp], eax
; Line 1836
	mov	ecx, DWORD PTR _pmtOld$[ebp]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	mov	DWORD PTR _pOldInfo$[ebp], eax
; Line 1837
	cmp	DWORD PTR _pNewInfo$[ebp], 0
	jne	SHORT $LN8@PreparePal
	push	1837					; 0000072dH
	push	OFFSET $SG82804
	push	OFFSET $SG82805
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@PreparePal:
; Line 1844
	mov	eax, DWORD PTR _pOldInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNewInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShouldUpdate@CImagePalette@@QAEHPBUtagVIDEOINFOHEADER@@0@Z ; CImagePalette::ShouldUpdate
	test	eax, eax
	jne	SHORT $LN7@PreparePal
; Line 1845
	push	OFFSET $SG82807
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1846
	mov	eax, 1
	jmp	$LN9@PreparePal
$LN7@PreparePal:
; Line 1854
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemovePalette@CImagePalette@@QAEJXZ	; CImagePalette::RemovePalette
; Line 1855
	push	0
	push	0
	push	9
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?NotifyEvent@CBaseFilter@@QAEJJJJ@Z	; CBaseFilter::NotifyEvent
; Line 1859
	mov	eax, DWORD PTR _pNewInfo$[ebp]
	push	eax
	call	_ContainsPalette@4
	test	eax, eax
	jne	SHORT $LN6@PreparePal
; Line 1860
	push	OFFSET $SG82810
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1861
	mov	eax, 1
	jmp	$LN9@PreparePal
$LN6@PreparePal:
; Line 1864
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@PreparePal
; Line 1865
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?LockPaletteLock@CBaseWindow@@QAEXXZ	; CBaseWindow::LockPaletteLock
$LN5@PreparePal:
; Line 1873
	push	OFFSET $SG82813
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1874
	mov	eax, DWORD PTR _szDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNewInfo$[ebp]
	push	ecx
	call	?MakePalette@CImagePalette@@SGPAUHPALETTE__@@PBUtagVIDEOINFOHEADER@@PAD@Z ; CImagePalette::MakePalette
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1875
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@PreparePal
	push	1875					; 00000753H
	push	OFFSET $SG82815
	push	OFFSET $SG82816
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@PreparePal:
; Line 1877
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@PreparePal
; Line 1878
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?UnlockPaletteLock@CBaseWindow@@QAEXXZ	; CBaseWindow::UnlockPaletteLock
$LN3@PreparePal:
; Line 1885
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@PreparePal
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@PreparePal:
; Line 1891
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN1@PreparePal
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?IncrementPaletteVersion@CDrawImage@@QAEXXZ ; CDrawImage::IncrementPaletteVersion
$LN1@PreparePal:
; Line 1892
	xor	eax, eax
$LN9@PreparePal:
; Line 1893
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PreparePalette@CImagePalette@@QAEJPBVCMediaType@@0PAD@Z ENDP ; CImagePalette::PreparePalette
_TEXT	ENDS
PUBLIC	?FormatLength@CMediaType@@QBEKXZ		; CMediaType::FormatLength
PUBLIC	?CopyPalette@CImagePalette@@QAEJPBVCMediaType@@PAV2@@Z ; CImagePalette::CopyPalette
EXTRN	_memcpy:PROC
EXTRN	?ReallocFormatBuffer@CMediaType@@QAEPAEK@Z:PROC	; CMediaType::ReallocFormatBuffer
EXTRN	_GetBitmapFormatSize@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CopyPalette@CImagePalette@@QAEJPBVCMediaType@@PAV2@@Z
_TEXT	SEGMENT
_BitmapSize$ = -24					; size = 4
_Maximum$82837 = -20					; size = 4
_PaletteEntries$ = -16					; size = 4
_pSrcInfo$ = -12					; size = 4
_pDestInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_pSrc$ = 8						; size = 4
_pDest$ = 12						; size = 4
?CopyPalette@CImagePalette@@QAEJPBVCMediaType@@PAV2@@Z PROC ; CImagePalette::CopyPalette, COMDAT
; _this$ = ecx
; Line 1903
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1906
	mov	ecx, DWORD PTR _pDest$[ebp]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	mov	DWORD PTR _pDestInfo$[ebp], eax
; Line 1907
	mov	eax, DWORD PTR _pDestInfo$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 1908
	mov	ecx, DWORD PTR _pDestInfo$[ebp]
	mov	DWORD PTR [ecx+84], 0
; Line 1912
	mov	edx, DWORD PTR _pDestInfo$[ebp]
	movzx	eax, WORD PTR [edx+62]
	xor	ecx, ecx
	cmp	eax, 8
	setle	cl
	test	ecx, ecx
	jne	SHORT $LN7@CopyPalett
; Line 1913
	push	OFFSET $SG82828
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1914
	mov	eax, 1
	jmp	$LN8@CopyPalett
$LN7@CopyPalett:
; Line 1919
	mov	ecx, DWORD PTR _pSrc$[ebp]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	mov	DWORD PTR _pSrcInfo$[ebp], eax
; Line 1920
	mov	edx, DWORD PTR _pSrcInfo$[ebp]
	push	edx
	call	_ContainsPalette@4
	test	eax, eax
	jne	SHORT $LN6@CopyPalett
; Line 1921
	push	OFFSET $SG82833
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1922
	mov	eax, 1
	jmp	$LN8@CopyPalett
$LN6@CopyPalett:
; Line 1927
	mov	eax, DWORD PTR _pSrcInfo$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _PaletteEntries$[ebp], ecx
; Line 1928
	cmp	DWORD PTR _PaletteEntries$[ebp], 0
	jne	SHORT $LN5@CopyPalett
; Line 1929
	mov	edx, DWORD PTR _pSrcInfo$[ebp]
	movzx	ecx, WORD PTR [edx+62]
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _Maximum$82837[ebp], eax
; Line 1930
	mov	ecx, DWORD PTR _Maximum$82837[ebp]
	push	ecx
	push	OFFSET $SG82838
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 1931
	mov	edx, DWORD PTR _Maximum$82837[ebp]
	mov	DWORD PTR _PaletteEntries$[ebp], edx
$LN5@CopyPalett:
; Line 1936
	mov	eax, DWORD PTR _pSrcInfo$[ebp]
	cmp	DWORD PTR [eax+80], 256			; 00000100H
	jbe	SHORT $LN4@CopyPalett
	push	1936					; 00000790H
	push	OFFSET $SG82840
	push	OFFSET $SG82841
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CopyPalett:
; Line 1937
	mov	ecx, DWORD PTR _pSrcInfo$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	cmp	edx, DWORD PTR _PaletteEntries$[ebp]
	jbe	SHORT $LN3@CopyPalett
	push	1937					; 00000791H
	push	OFFSET $SG82843
	push	OFFSET $SG82844
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CopyPalett:
; Line 1938
	mov	eax, DWORD PTR _pDestInfo$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _pDestInfo$[ebp]
	lea	esi, DWORD PTR [edx+ecx+48]
	mov	eax, DWORD PTR _pDestInfo$[ebp]
	push	eax
	call	_GetBitmapPalette@4
	cmp	esi, eax
	je	SHORT $LN2@CopyPalett
	push	1938					; 00000792H
	push	OFFSET $SG82848
	push	OFFSET $SG82849
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CopyPalett:
; Line 1939
	mov	ecx, DWORD PTR _pDestInfo$[ebp]
	mov	edx, DWORD PTR _PaletteEntries$[ebp]
	mov	DWORD PTR [ecx+80], edx
; Line 1940
	mov	eax, DWORD PTR _pDestInfo$[ebp]
	mov	ecx, DWORD PTR _pSrcInfo$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
; Line 1941
	mov	eax, DWORD PTR _pSrcInfo$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_GetBitmapFormatSize@4
	mov	DWORD PTR _BitmapSize$[ebp], eax
; Line 1943
	mov	ecx, DWORD PTR _pDest$[ebp]
	call	?FormatLength@CMediaType@@QBEKXZ	; CMediaType::FormatLength
	cmp	eax, DWORD PTR _BitmapSize$[ebp]
	jae	SHORT $LN1@CopyPalett
; Line 1944
	push	OFFSET $SG82853
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 1945
	mov	ecx, DWORD PTR _BitmapSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pDest$[ebp]
	call	?ReallocFormatBuffer@CMediaType@@QAEPAEK@Z ; CMediaType::ReallocFormatBuffer
$LN1@CopyPalett:
; Line 1952
	mov	edx, DWORD PTR _PaletteEntries$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _pSrcInfo$[ebp]
	push	eax
	call	_GetBitmapPalette@4
	push	eax
	mov	ecx, DWORD PTR _pDestInfo$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _pDestInfo$[ebp]
	lea	ecx, DWORD PTR [eax+edx+48]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1954
	xor	eax, eax
$LN8@CopyPalett:
; Line 1955
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CopyPalette@CImagePalette@@QAEJPBVCMediaType@@PAV2@@Z ENDP ; CImagePalette::CopyPalette
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?FormatLength@CMediaType@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FormatLength@CMediaType@@QBEKXZ PROC			; CMediaType::FormatLength, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?FormatLength@CMediaType@@QBEKXZ ENDP			; CMediaType::FormatLength
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?RemovePalette@CImagePalette@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemovePalette@CImagePalette@@QAEJXZ PROC		; CImagePalette::RemovePalette, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
; Line 1964
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1965
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@RemovePale
; Line 1966
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?LockPaletteLock@CBaseWindow@@QAEXXZ	; CBaseWindow::LockPaletteLock
$LN6@RemovePale:
; Line 1971
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@RemovePale
; Line 1973
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@RemovePale
; Line 1976
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetPalette@CBaseWindow@@QAEPAUHPALETTE__@@XZ ; CBaseWindow::GetPalette
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], eax
	je	SHORT $LN3@RemovePale
	push	1976					; 000007b8H
	push	OFFSET $SG82866
	push	OFFSET $SG82867
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@RemovePale:
; Line 1978
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?UnsetPalette@CBaseWindow@@QAEXXZ	; CBaseWindow::UnsetPalette
$LN4@RemovePale:
; Line 1981
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@RemovePale
	push	1981					; 000007bdH
	push	OFFSET $SG82869
	push	OFFSET $SG82870
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@RemovePale:
; Line 1982
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN5@RemovePale:
; Line 1985
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@RemovePale
; Line 1986
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?UnlockPaletteLock@CBaseWindow@@QAEXXZ	; CBaseWindow::UnlockPaletteLock
$LN1@RemovePale:
; Line 1989
	xor	eax, eax
; Line 1990
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemovePalette@CImagePalette@@QAEJXZ ENDP		; CImagePalette::RemovePalette
_TEXT	ENDS
PUBLIC	?MakeIdentityPalette@CImagePalette@@SGJPAUtagPALETTEENTRY@@HPAD@Z ; CImagePalette::MakeIdentityPalette
EXTRN	__imp__CreatePalette@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakePalette@CImagePalette@@SGPAUHPALETTE__@@PBUtagVIDEOINFOHEADER@@PAD@Z
_TEXT	SEGMENT
$T84170 = -28						; size = 4
$T84169 = -24						; size = 4
_dwCount$82895 = -20					; size = 4
_hPalette$ = -16					; size = 4
_lp$ = -12						; size = 4
_pColours$ = -8						; size = 4
_pHeader$ = -4						; size = 4
_pVideoInfo$ = 8					; size = 4
_szDevice$ = 12						; size = 4
?MakePalette@CImagePalette@@SGPAUHPALETTE__@@PBUtagVIDEOINFOHEADER@@PAD@Z PROC ; CImagePalette::MakePalette, COMDAT
; Line 2003
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2004
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	push	eax
	call	_ContainsPalette@4
	cmp	eax, 1
	je	SHORT $LN8@MakePalett
	push	2004					; 000007d4H
	push	OFFSET $SG82877
	push	OFFSET $SG82878
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@MakePalett:
; Line 2005
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [ecx+80], 256			; 00000100H
	jbe	SHORT $LN7@MakePalett
	push	2005					; 000007d5H
	push	OFFSET $SG82880
	push	OFFSET $SG82881
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@MakePalett:
; Line 2006
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _pHeader$[ebp], edx
; Line 2012
	push	1032					; 00000408H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T84169[ebp], eax
	mov	eax, DWORD PTR $T84169[ebp]
	mov	DWORD PTR _lp$[ebp], eax
; Line 2013
	cmp	DWORD PTR _lp$[ebp], 0
	jne	SHORT $LN6@MakePalett
; Line 2014
	xor	eax, eax
	jmp	$LN9@MakePalett
$LN6@MakePalett:
; Line 2023
	mov	ecx, 768				; 00000300H
	mov	edx, DWORD PTR _lp$[ebp]
	mov	WORD PTR [edx], cx
; Line 2024
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR _pHeader$[ebp]
	mov	dx, WORD PTR [ecx+32]
	mov	WORD PTR [eax+2], dx
; Line 2025
	mov	eax, DWORD PTR _lp$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN5@MakePalett
	mov	edx, DWORD PTR _pHeader$[ebp]
	movzx	ecx, WORD PTR [edx+14]
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	WORD PTR [ecx+2], ax
$LN5@MakePalett:
; Line 2026
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	push	edx
	call	_GetBitmapPalette@4
	mov	DWORD PTR _pColours$[ebp], eax
; Line 2028
	mov	DWORD PTR _dwCount$82895[ebp], 0
	jmp	SHORT $LN4@MakePalett
$LN3@MakePalett:
	mov	eax, DWORD PTR _dwCount$82895[ebp]
	add	eax, 1
	mov	DWORD PTR _dwCount$82895[ebp], eax
$LN4@MakePalett:
	mov	ecx, DWORD PTR _lp$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	DWORD PTR _dwCount$82895[ebp], edx
	jae	SHORT $LN2@MakePalett
; Line 2029
	mov	eax, DWORD PTR _dwCount$82895[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR _dwCount$82895[ebp]
	mov	esi, DWORD PTR _pColours$[ebp]
	mov	dl, BYTE PTR [esi+edx*4+2]
	mov	BYTE PTR [ecx+eax*4+4], dl
; Line 2030
	mov	eax, DWORD PTR _dwCount$82895[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR _dwCount$82895[ebp]
	mov	esi, DWORD PTR _pColours$[ebp]
	mov	dl, BYTE PTR [esi+edx*4+1]
	mov	BYTE PTR [ecx+eax*4+5], dl
; Line 2031
	mov	eax, DWORD PTR _dwCount$82895[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR _dwCount$82895[ebp]
	mov	esi, DWORD PTR _pColours$[ebp]
	mov	dl, BYTE PTR [esi+edx*4]
	mov	BYTE PTR [ecx+eax*4+6], dl
; Line 2032
	mov	eax, DWORD PTR _dwCount$82895[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	BYTE PTR [ecx+eax*4+7], 0
; Line 2033
	jmp	SHORT $LN3@MakePalett
$LN2@MakePalett:
; Line 2035
	mov	edx, DWORD PTR _szDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _lp$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _lp$[ebp]
	add	edx, 4
	push	edx
	call	?MakeIdentityPalette@CImagePalette@@SGJPAUtagPALETTEENTRY@@HPAD@Z ; CImagePalette::MakeIdentityPalette
; Line 2039
	mov	esi, esp
	mov	eax, DWORD PTR _lp$[ebp]
	push	eax
	call	DWORD PTR __imp__CreatePalette@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hPalette$[ebp], eax
; Line 2040
	cmp	DWORD PTR _hPalette$[ebp], 0
	jne	SHORT $LN1@MakePalett
	push	2040					; 000007f8H
	push	OFFSET $SG82900
	push	OFFSET $SG82901
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@MakePalett:
; Line 2041
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	DWORD PTR $T84170[ebp], ecx
	mov	edx, DWORD PTR $T84170[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 2042
	mov	eax, DWORD PTR _hPalette$[ebp]
$LN9@MakePalett:
; Line 2043
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MakePalette@CImagePalette@@SGPAUHPALETTE__@@PBUtagVIDEOINFOHEADER@@PAD@Z ENDP ; CImagePalette::MakePalette
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetSystemPaletteEntries@16:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__CreateDCA@16:PROC
EXTRN	__imp__lstrcmpiA@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakeIdentityPalette@CImagePalette@@SGJPAUtagPALETTEENTRY@@HPAD@Z
_TEXT	SEGMENT
tv195 = -92						; size = 4
_Count$82944 = -88					; size = 4
_Count$82935 = -84					; size = 4
_Count$82929 = -80					; size = 4
_Result$ = -76						; size = 4
_Reserved$ = -72					; size = 4
_hdc$ = -68						; size = 4
_PalHiStart$ = -64					; size = 4
_PalLoCount$ = -60					; size = 4
_bIdentityPalette$ = -56				; size = 4
_SystemEntries$ = -48					; size = 40
__$ArrayPad$ = -4					; size = 4
_pEntry$ = 8						; size = 4
_iColours$ = 12						; size = 4
_szDevice$ = 16						; size = 4
?MakeIdentityPalette@CImagePalette@@SGJPAUtagPALETTEENTRY@@HPAD@Z PROC ; CImagePalette::MakeIdentityPalette, COMDAT
; Line 2057
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2059
	mov	DWORD PTR _bIdentityPalette$[ebp], 1
; Line 2060
	cmp	DWORD PTR _iColours$[ebp], 256		; 00000100H
	jle	SHORT $LN22@MakeIdenti
	push	2060					; 0000080cH
	push	OFFSET $SG82911
	push	OFFSET $SG82912
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN22@MakeIdenti:
; Line 2061
	mov	DWORD PTR _PalLoCount$[ebp], 10		; 0000000aH
; Line 2062
	mov	DWORD PTR _PalHiStart$[ebp], 246	; 000000f6H
; Line 2066
	cmp	DWORD PTR _iColours$[ebp], 10		; 0000000aH
	jge	SHORT $LN21@MakeIdenti
; Line 2067
	mov	eax, 1
	jmp	$LN23@MakeIdenti
$LN21@MakeIdenti:
; Line 2075
	cmp	DWORD PTR _szDevice$[ebp], 0
	je	SHORT $LN19@MakeIdenti
	mov	esi, esp
	push	OFFSET $SG82920
	mov	eax, DWORD PTR _szDevice$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcmpiA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN20@MakeIdenti
$LN19@MakeIdenti:
; Line 2076
	mov	esi, esp
	push	0
	push	0
	push	0
	push	OFFSET $SG82921
	call	DWORD PTR __imp__CreateDCA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax
; Line 2077
	jmp	SHORT $LN18@MakeIdenti
$LN20@MakeIdenti:
; Line 2078
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _szDevice$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__CreateDCA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdc$[ebp], eax
$LN18@MakeIdenti:
; Line 2079
	cmp	DWORD PTR _hdc$[ebp], 0
	jne	SHORT $LN17@MakeIdenti
; Line 2080
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN23@MakeIdenti
$LN17@MakeIdenti:
; Line 2082
	mov	esi, esp
	push	106					; 0000006aH
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDeviceCaps@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Reserved$[ebp], eax
; Line 2083
	cmp	DWORD PTR _Reserved$[ebp], 20		; 00000014H
	je	SHORT $LN16@MakeIdenti
; Line 2084
	mov	esi, esp
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2085
	mov	eax, 1
	jmp	$LN23@MakeIdenti
$LN16@MakeIdenti:
; Line 2092
	mov	esi, esp
	lea	ecx, DWORD PTR _SystemEntries$[ebp]
	push	ecx
	push	10					; 0000000aH
	push	0
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GetSystemPaletteEntries@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Result$[ebp], eax
; Line 2093
	mov	DWORD PTR _Count$82929[ebp], 0
	jmp	SHORT $LN15@MakeIdenti
$LN14@MakeIdenti:
	mov	eax, DWORD PTR _Count$82929[ebp]
	add	eax, 1
	mov	DWORD PTR _Count$82929[ebp], eax
$LN15@MakeIdenti:
	mov	ecx, DWORD PTR _Count$82929[ebp]
	cmp	ecx, DWORD PTR _Result$[ebp]
	jae	SHORT $LN13@MakeIdenti
; Line 2096
	mov	edx, DWORD PTR _Count$82929[ebp]
	movzx	eax, BYTE PTR _SystemEntries$[ebp+edx*4]
	mov	ecx, DWORD PTR _Count$82929[ebp]
	mov	edx, DWORD PTR _pEntry$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx*4]
	cmp	eax, ecx
	jne	SHORT $LN11@MakeIdenti
	mov	edx, DWORD PTR _Count$82929[ebp]
	movzx	eax, BYTE PTR _SystemEntries$[ebp+edx*4+1]
	mov	ecx, DWORD PTR _Count$82929[ebp]
	mov	edx, DWORD PTR _pEntry$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx*4+1]
	cmp	eax, ecx
	jne	SHORT $LN11@MakeIdenti
	mov	edx, DWORD PTR _Count$82929[ebp]
	movzx	eax, BYTE PTR _SystemEntries$[ebp+edx*4+2]
	mov	ecx, DWORD PTR _Count$82929[ebp]
	mov	edx, DWORD PTR _pEntry$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx*4+2]
	cmp	eax, ecx
	je	SHORT $LN12@MakeIdenti
$LN11@MakeIdenti:
; Line 2097
	mov	DWORD PTR _bIdentityPalette$[ebp], 0
$LN12@MakeIdenti:
; Line 2099
	jmp	SHORT $LN14@MakeIdenti
$LN13@MakeIdenti:
; Line 2103
	mov	esi, esp
	lea	edx, DWORD PTR _SystemEntries$[ebp]
	push	edx
	push	10					; 0000000aH
	push	246					; 000000f6H
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemPaletteEntries@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Result$[ebp], eax
; Line 2104
	mov	DWORD PTR _Count$82935[ebp], 0
	jmp	SHORT $LN10@MakeIdenti
$LN9@MakeIdenti:
	mov	ecx, DWORD PTR _Count$82935[ebp]
	add	ecx, 1
	mov	DWORD PTR _Count$82935[ebp], ecx
$LN10@MakeIdenti:
	mov	edx, DWORD PTR _Count$82935[ebp]
	cmp	edx, DWORD PTR _Result$[ebp]
	jae	SHORT $LN8@MakeIdenti
; Line 2105
	mov	eax, DWORD PTR _Count$82935[ebp]
	add	eax, 246				; 000000f6H
	cmp	eax, DWORD PTR _iColours$[ebp]
	jge	SHORT $LN7@MakeIdenti
; Line 2108
	mov	ecx, DWORD PTR _Count$82935[ebp]
	movzx	edx, BYTE PTR _SystemEntries$[ebp+ecx*4]
	mov	eax, DWORD PTR _Count$82935[ebp]
	mov	ecx, DWORD PTR _pEntry$[ebp]
	movzx	eax, BYTE PTR [ecx+eax*4+984]
	cmp	edx, eax
	jne	SHORT $LN5@MakeIdenti
	mov	ecx, DWORD PTR _Count$82935[ebp]
	movzx	edx, BYTE PTR _SystemEntries$[ebp+ecx*4+1]
	mov	eax, DWORD PTR _Count$82935[ebp]
	mov	ecx, DWORD PTR _pEntry$[ebp]
	movzx	eax, BYTE PTR [ecx+eax*4+985]
	cmp	edx, eax
	jne	SHORT $LN5@MakeIdenti
	mov	ecx, DWORD PTR _Count$82935[ebp]
	movzx	edx, BYTE PTR _SystemEntries$[ebp+ecx*4+2]
	mov	eax, DWORD PTR _Count$82935[ebp]
	mov	ecx, DWORD PTR _pEntry$[ebp]
	movzx	eax, BYTE PTR [ecx+eax*4+986]
	cmp	edx, eax
	je	SHORT $LN7@MakeIdenti
$LN5@MakeIdenti:
; Line 2109
	mov	DWORD PTR _bIdentityPalette$[ebp], 0
$LN7@MakeIdenti:
; Line 2112
	jmp	SHORT $LN9@MakeIdenti
$LN8@MakeIdenti:
; Line 2116
	mov	esi, esp
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2117
	cmp	DWORD PTR _bIdentityPalette$[ebp], 0
	jne	SHORT $LN4@MakeIdenti
; Line 2118
	mov	eax, 1
	jmp	SHORT $LN23@MakeIdenti
$LN4@MakeIdenti:
; Line 2123
	mov	DWORD PTR _Count$82944[ebp], 10		; 0000000aH
	jmp	SHORT $LN3@MakeIdenti
$LN2@MakeIdenti:
	mov	edx, DWORD PTR _Count$82944[ebp]
	add	edx, 1
	mov	DWORD PTR _Count$82944[ebp], edx
$LN3@MakeIdenti:
	cmp	DWORD PTR _iColours$[ebp], 246		; 000000f6H
	jle	SHORT $LN25@MakeIdenti
	mov	DWORD PTR tv195[ebp], 246		; 000000f6H
	jmp	SHORT $LN26@MakeIdenti
$LN25@MakeIdenti:
	mov	eax, DWORD PTR _iColours$[ebp]
	mov	DWORD PTR tv195[ebp], eax
$LN26@MakeIdenti:
	mov	ecx, DWORD PTR _Count$82944[ebp]
	cmp	ecx, DWORD PTR tv195[ebp]
	jge	SHORT $LN1@MakeIdenti
; Line 2124
	mov	edx, DWORD PTR _Count$82944[ebp]
	mov	eax, DWORD PTR _pEntry$[ebp]
	mov	BYTE PTR [eax+edx*4+3], 4
; Line 2125
	jmp	SHORT $LN2@MakeIdenti
$LN1@MakeIdenti:
; Line 2126
	xor	eax, eax
$LN23@MakeIdenti:
; Line 2127
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@MakeIdenti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN29@MakeIdenti:
	DD	1
	DD	$LN28@MakeIdenti
$LN28@MakeIdenti:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN27@MakeIdenti
$LN27@MakeIdenti:
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?MakeIdentityPalette@CImagePalette@@SGJPAUtagPALETTEENTRY@@HPAD@Z ENDP ; CImagePalette::MakeIdentityPalette
_TEXT	ENDS
PUBLIC	?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z	; CImageDisplay::RefreshDisplayType
PUBLIC	??0CImageDisplay@@QAE@XZ			; CImageDisplay::CImageDisplay
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CImageDisplay@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CImageDisplay@@QAE@XZ$0
__ehfuncinfo$??0CImageDisplay@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CImageDisplay@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CImageDisplay@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CImageDisplay@@QAE@XZ PROC				; CImageDisplay::CImageDisplay, COMDAT
; _this$ = ecx
; Line 2137
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CImageDisplay@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCritSec@@QAE@XZ			; CCritSec::CCritSec
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2138
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z ; CImageDisplay::RefreshDisplayType
; Line 2139
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CImageDisplay@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CCritSec@@QAE@XZ			; CCritSec::~CCritSec
__ehhandler$??0CImageDisplay@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CImageDisplay@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CImageDisplay@@QAE@XZ ENDP				; CImageDisplay::CImageDisplay
PUBLIC	?UpdateFormat@CImageDisplay@@QAEJPAUtagVIDEOINFO@@@Z ; CImageDisplay::UpdateFormat
PUBLIC	?CheckHeaderValidity@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckHeaderValidity
EXTRN	__imp__GetDIBits@28:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	_memset:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z$0
__ehfuncinfo$?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z
_TEXT	SEGMENT
tv141 = -52						; size = 4
tv135 = -48						; size = 4
$T84195 = -44						; size = 4
$T84192 = -40						; size = 4
_hbm$ = -36						; size = 4
_hdcDisplay$ = -32					; size = 4
_cDisplayLock$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_szDeviceName$ = 8					; size = 4
?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z PROC	; CImageDisplay::RefreshDisplayType, COMDAT
; _this$ = ecx
; Line 2153
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 2154
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2158
	push	1124					; 00000464H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2159
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 40			; 00000028H
; Line 2160
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+102], ax
; Line 2167
	cmp	DWORD PTR _szDeviceName$[ebp], 0
	je	SHORT $LN7@RefreshDis
	mov	esi, esp
	push	OFFSET $SG82963
	mov	edx, DWORD PTR _szDeviceName$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrcmpiA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN8@RefreshDis
$LN7@RefreshDis:
; Line 2168
	mov	esi, esp
	push	0
	push	0
	push	0
	push	OFFSET $SG82964
	call	DWORD PTR __imp__CreateDCA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdcDisplay$[ebp], eax
; Line 2169
	jmp	SHORT $LN6@RefreshDis
$LN8@RefreshDis:
; Line 2170
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _szDeviceName$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__CreateDCA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdcDisplay$[ebp], eax
$LN6@RefreshDis:
; Line 2171
	cmp	DWORD PTR _hdcDisplay$[ebp], 0
	jne	SHORT $LN5@RefreshDis
; Line 2172
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN4@RefreshDis
	push	2172					; 0000087cH
	push	OFFSET $SG82968
	push	OFFSET $SG82969
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@RefreshDis:
; Line 2174
	cmp	DWORD PTR _szDeviceName$[ebp], 0
	je	SHORT $LN11@RefreshDis
	mov	edx, DWORD PTR _szDeviceName$[ebp]
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN12@RefreshDis
$LN11@RefreshDis:
	mov	DWORD PTR tv135[ebp], OFFSET $SG82970
$LN12@RefreshDis:
	mov	eax, DWORD PTR tv135[ebp]
	push	eax
	push	OFFSET $SG82971
	push	1
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 2175
	mov	DWORD PTR $T84192[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T84192[ebp]
	jmp	$LN9@RefreshDis
; Line 2176
	jmp	SHORT $LN3@RefreshDis
$LN5@RefreshDis:
; Line 2178
	cmp	DWORD PTR _szDeviceName$[ebp], 0
	je	SHORT $LN13@RefreshDis
	mov	ecx, DWORD PTR _szDeviceName$[ebp]
	mov	DWORD PTR tv141[ebp], ecx
	jmp	SHORT $LN14@RefreshDis
$LN13@RefreshDis:
	mov	DWORD PTR tv141[ebp], OFFSET $SG82975
$LN14@RefreshDis:
	mov	edx, DWORD PTR tv141[ebp]
	push	edx
	push	OFFSET $SG82976
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
$LN3@RefreshDis:
; Line 2180
	mov	esi, esp
	push	1
	push	1
	mov	eax, DWORD PTR _hdcDisplay$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateCompatibleBitmap@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hbm$[ebp], eax
; Line 2181
	cmp	DWORD PTR _hbm$[ebp], 0
	je	SHORT $LN2@RefreshDis
; Line 2183
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	push	0
	push	1
	push	0
	mov	edx, DWORD PTR _hbm$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdcDisplay$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDIBits@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2186
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	push	0
	push	1
	push	0
	mov	edx, DWORD PTR _hbm$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdcDisplay$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDIBits@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2187
	mov	esi, esp
	mov	ecx, DWORD PTR _hbm$[ebp]
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@RefreshDis:
; Line 2189
	mov	esi, esp
	mov	edx, DWORD PTR _hdcDisplay$[ebp]
	push	edx
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2193
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	call	?CheckHeaderValidity@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckHeaderValidity
	test	eax, eax
	jne	SHORT $LN1@RefreshDis
	push	2193					; 00000891H
	push	OFFSET $SG82982
	push	OFFSET $SG82983
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@RefreshDis:
; Line 2194
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateFormat@CImageDisplay@@QAEJPAUtagVIDEOINFO@@@Z ; CImageDisplay::UpdateFormat
; Line 2196
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+102]
	push	eax
	push	OFFSET $SG82984
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 2197
	mov	DWORD PTR $T84195[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T84195[ebp]
$LN9@RefreshDis:
; Line 2198
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@RefreshDis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN19@RefreshDis:
	DD	1
	DD	$LN18@RefreshDis
$LN18@RefreshDis:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN16@RefreshDis
$LN16@RefreshDis:
	DB	99					; 00000063H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z$0:
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RefreshDisplayType@CImageDisplay@@QAEJPAD@Z ENDP	; CImageDisplay::RefreshDisplayType
PUBLIC	?CountPrefixBits@CImageDisplay@@KGKK@Z		; CImageDisplay::CountPrefixBits
PUBLIC	?CountSetBits@CImageDisplay@@KGKK@Z		; CImageDisplay::CountSetBits
PUBLIC	?CheckBitFields@CImageDisplay@@KGHPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckBitFields
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckBitFields@CImageDisplay@@KGHPBUtagVIDEOINFO@@@Z
_TEXT	SEGMENT
_Mask$83003 = -24					; size = 4
_TestField$83002 = -20					; size = 4
_PrefixBits$83001 = -16					; size = 4
_SetBits$82997 = -12					; size = 4
_iColour$82993 = -8					; size = 4
_pBitFields$ = -4					; size = 4
_pInput$ = 8						; size = 4
?CheckBitFields@CImageDisplay@@KGHPBUtagVIDEOINFO@@@Z PROC ; CImageDisplay::CheckBitFields, COMDAT
; Line 2207
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2208
	mov	eax, DWORD PTR _pInput$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _pInput$[ebp]
	lea	eax, DWORD PTR [edx+ecx+48]
	mov	DWORD PTR _pBitFields$[ebp], eax
; Line 2210
	mov	DWORD PTR _iColour$82993[ebp], 0
	jmp	SHORT $LN6@CheckBitFi
$LN5@CheckBitFi:
	mov	ecx, DWORD PTR _iColour$82993[ebp]
	add	ecx, 1
	mov	DWORD PTR _iColour$82993[ebp], ecx
$LN6@CheckBitFi:
	cmp	DWORD PTR _iColour$82993[ebp], 2
	jg	$LN4@CheckBitFi
; Line 2214
	mov	edx, DWORD PTR _iColour$82993[ebp]
	mov	eax, DWORD PTR _pBitFields$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?CountSetBits@CImageDisplay@@KGKK@Z	; CImageDisplay::CountSetBits
	mov	DWORD PTR _SetBits$82997[ebp], eax
; Line 2215
	cmp	DWORD PTR _SetBits$82997[ebp], 8
	ja	SHORT $LN2@CheckBitFi
	cmp	DWORD PTR _SetBits$82997[ebp], 0
	jne	SHORT $LN3@CheckBitFi
$LN2@CheckBitFi:
; Line 2216
	mov	edx, DWORD PTR _iColour$82993[ebp]
	push	edx
	push	OFFSET $SG83000
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 2217
	xor	eax, eax
	jmp	SHORT $LN7@CheckBitFi
$LN3@CheckBitFi:
; Line 2221
	mov	eax, DWORD PTR _iColour$82993[ebp]
	mov	ecx, DWORD PTR _pBitFields$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?CountPrefixBits@CImageDisplay@@KGKK@Z	; CImageDisplay::CountPrefixBits
	mov	DWORD PTR _PrefixBits$83001[ebp], eax
; Line 2230
	mov	eax, DWORD PTR _iColour$82993[ebp]
	mov	ecx, DWORD PTR _pBitFields$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _PrefixBits$83001[ebp]
	shr	edx, cl
	mov	DWORD PTR _TestField$83002[ebp], edx
; Line 2231
	or	eax, -1
	mov	ecx, DWORD PTR _SetBits$82997[ebp]
	shl	eax, cl
	mov	DWORD PTR _Mask$83003[ebp], eax
; Line 2232
	mov	ecx, DWORD PTR _TestField$83002[ebp]
	and	ecx, DWORD PTR _Mask$83003[ebp]
	je	SHORT $LN1@CheckBitFi
; Line 2233
	mov	edx, DWORD PTR _iColour$82993[ebp]
	push	edx
	push	OFFSET $SG83005
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 2234
	xor	eax, eax
	jmp	SHORT $LN7@CheckBitFi
$LN1@CheckBitFi:
; Line 2236
	jmp	$LN5@CheckBitFi
$LN4@CheckBitFi:
; Line 2237
	mov	eax, 1
$LN7@CheckBitFi:
; Line 2238
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckBitFields@CImageDisplay@@KGHPBUtagVIDEOINFO@@@Z ENDP ; CImageDisplay::CheckBitFields
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CountSetBits@CImageDisplay@@KGKK@Z
_TEXT	SEGMENT
_init$ = -8						; size = 4
_Count$ = -4						; size = 4
_Field$ = 8						; size = 4
?CountSetBits@CImageDisplay@@KGKK@Z PROC		; CImageDisplay::CountSetBits, COMDAT
; Line 2244
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2247
	mov	DWORD PTR _Count$[ebp], 0
; Line 2248
	mov	eax, DWORD PTR _Field$[ebp]
	mov	DWORD PTR _init$[ebp], eax
$LN2@CountSetBi:
; Line 2252
	cmp	DWORD PTR _init$[ebp], 0
	je	SHORT $LN1@CountSetBi
; Line 2253
	mov	ecx, DWORD PTR _init$[ebp]
	sub	ecx, 1
	and	ecx, DWORD PTR _init$[ebp]
	mov	DWORD PTR _init$[ebp], ecx
; Line 2254
	mov	edx, DWORD PTR _Count$[ebp]
	add	edx, 1
	mov	DWORD PTR _Count$[ebp], edx
; Line 2255
	jmp	SHORT $LN2@CountSetBi
$LN1@CountSetBi:
; Line 2256
	mov	eax, DWORD PTR _Count$[ebp]
; Line 2257
	mov	esp, ebp
	pop	ebp
	ret	4
?CountSetBits@CImageDisplay@@KGKK@Z ENDP		; CImageDisplay::CountSetBits
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CountPrefixBits@CImageDisplay@@KGKK@Z
_TEXT	SEGMENT
_Count$ = -8						; size = 4
_Mask$ = -4						; size = 4
_Field$ = 8						; size = 4
?CountPrefixBits@CImageDisplay@@KGKK@Z PROC		; CImageDisplay::CountPrefixBits, COMDAT
; Line 2265
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2266
	mov	DWORD PTR _Mask$[ebp], 1
; Line 2267
	mov	DWORD PTR _Count$[ebp], 0
$LN5@CountPrefi:
; Line 2269
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@CountPrefi
; Line 2270
	mov	ecx, DWORD PTR _Field$[ebp]
	and	ecx, DWORD PTR _Mask$[ebp]
	je	SHORT $LN3@CountPrefi
; Line 2271
	mov	eax, DWORD PTR _Count$[ebp]
	jmp	SHORT $LN6@CountPrefi
$LN3@CountPrefi:
; Line 2273
	mov	edx, DWORD PTR _Count$[ebp]
	add	edx, 1
	mov	DWORD PTR _Count$[ebp], edx
; Line 2275
	cmp	DWORD PTR _Mask$[ebp], -2147483648	; 80000000H
	jne	SHORT $LN2@CountPrefi
	push	2275					; 000008e3H
	push	OFFSET $SG83024
	push	OFFSET $SG83025
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@CountPrefi:
; Line 2276
	cmp	DWORD PTR _Mask$[ebp], -2147483648	; 80000000H
	jne	SHORT $LN1@CountPrefi
; Line 2277
	mov	eax, DWORD PTR _Count$[ebp]
	jmp	SHORT $LN6@CountPrefi
$LN1@CountPrefi:
; Line 2279
	mov	eax, DWORD PTR _Mask$[ebp]
	shl	eax, 1
	mov	DWORD PTR _Mask$[ebp], eax
; Line 2280
	jmp	SHORT $LN5@CountPrefi
$LN6@CountPrefi:
; Line 2281
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CountPrefixBits@CImageDisplay@@KGKK@Z ENDP		; CImageDisplay::CountPrefixBits
_TEXT	ENDS
PUBLIC	?CheckPaletteHeader@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckPaletteHeader
EXTRN	_GetBitmapSize@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckHeaderValidity@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z
_TEXT	SEGMENT
_pInput$ = 8						; size = 4
?CheckHeaderValidity@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z PROC ; CImageDisplay::CheckHeaderValidity, COMDAT
; Line 2292
	push	ebp
	mov	ebp, esp
; Line 2296
	mov	eax, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jle	SHORT $LN12@CheckHeade
	mov	ecx, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	jg	SHORT $LN13@CheckHeade
$LN12@CheckHeade:
; Line 2297
	push	OFFSET $SG83032
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2298
	xor	eax, eax
	jmp	$LN14@CheckHeade
$LN13@CheckHeade:
; Line 2303
	mov	edx, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN11@CheckHeade
; Line 2304
	mov	eax, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [eax+64], 3
	je	SHORT $LN11@CheckHeade
; Line 2305
	push	OFFSET $SG83035
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2306
	xor	eax, eax
	jmp	$LN14@CheckHeade
$LN11@CheckHeade:
; Line 2312
	mov	ecx, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [ecx+64], 3
	jne	SHORT $LN9@CheckHeade
; Line 2313
	mov	edx, DWORD PTR _pInput$[ebp]
	movzx	eax, WORD PTR [edx+62]
	cmp	eax, 16					; 00000010H
	je	SHORT $LN9@CheckHeade
; Line 2314
	mov	ecx, DWORD PTR _pInput$[ebp]
	movzx	edx, WORD PTR [ecx+62]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN9@CheckHeade
; Line 2315
	push	OFFSET $SG83039
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2316
	xor	eax, eax
	jmp	$LN14@CheckHeade
$LN9@CheckHeade:
; Line 2323
	mov	eax, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [eax+64], 3
	jne	SHORT $LN6@CheckHeade
; Line 2324
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?CheckBitFields@CImageDisplay@@KGHPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckBitFields
	test	eax, eax
	jne	SHORT $LN6@CheckHeade
; Line 2325
	push	OFFSET $SG83042
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2326
	xor	eax, eax
	jmp	SHORT $LN14@CheckHeade
$LN6@CheckHeade:
; Line 2332
	mov	edx, DWORD PTR _pInput$[ebp]
	movzx	eax, WORD PTR [edx+60]
	cmp	eax, 1
	je	SHORT $LN4@CheckHeade
; Line 2333
	push	OFFSET $SG83044
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2334
	xor	eax, eax
	jmp	SHORT $LN14@CheckHeade
$LN4@CheckHeade:
; Line 2339
	mov	ecx, DWORD PTR _pInput$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_GetBitmapSize@4
	mov	edx, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [edx+68], eax
	je	SHORT $LN3@CheckHeade
; Line 2340
	mov	eax, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN3@CheckHeade
; Line 2341
	push	OFFSET $SG83047
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2342
	xor	eax, eax
	jmp	SHORT $LN14@CheckHeade
$LN3@CheckHeade:
; Line 2348
	mov	ecx, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [ecx+48], 40			; 00000028H
	je	SHORT $LN1@CheckHeade
; Line 2349
	push	OFFSET $SG83050
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2350
	xor	eax, eax
	jmp	SHORT $LN14@CheckHeade
$LN1@CheckHeade:
; Line 2352
	mov	edx, DWORD PTR _pInput$[ebp]
	push	edx
	call	?CheckPaletteHeader@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckPaletteHeader
$LN14@CheckHeade:
; Line 2353
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CheckHeaderValidity@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z ENDP ; CImageDisplay::CheckHeaderValidity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CheckPaletteHeader@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z
_TEXT	SEGMENT
_pInput$ = 8						; size = 4
?CheckPaletteHeader@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z PROC ; CImageDisplay::CheckPaletteHeader, COMDAT
; Line 2362
	push	ebp
	mov	ebp, esp
; Line 2365
	mov	eax, DWORD PTR _pInput$[ebp]
	movzx	ecx, WORD PTR [eax+62]
	xor	edx, edx
	cmp	ecx, 8
	setle	dl
	test	edx, edx
	jne	SHORT $LN5@CheckPalet
; Line 2366
	mov	eax, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN4@CheckPalet
; Line 2367
	push	OFFSET $SG83056
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2368
	xor	eax, eax
	jmp	SHORT $LN6@CheckPalet
$LN4@CheckPalet:
; Line 2370
	mov	eax, 1
	jmp	SHORT $LN6@CheckPalet
$LN5@CheckPalet:
; Line 2375
	mov	ecx, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN3@CheckPalet
; Line 2376
	push	OFFSET $SG83058
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2377
	xor	eax, eax
	jmp	SHORT $LN6@CheckPalet
$LN3@CheckPalet:
; Line 2382
	mov	edx, DWORD PTR _pInput$[ebp]
	movzx	ecx, WORD PTR [edx+62]
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _pInput$[ebp]
	cmp	DWORD PTR [ecx+80], eax
	jbe	SHORT $LN2@CheckPalet
; Line 2383
	push	OFFSET $SG83061
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2384
	xor	eax, eax
	jmp	SHORT $LN6@CheckPalet
$LN2@CheckPalet:
; Line 2389
	mov	edx, DWORD PTR _pInput$[ebp]
	mov	eax, DWORD PTR _pInput$[ebp]
	mov	ecx, DWORD PTR [edx+84]
	cmp	ecx, DWORD PTR [eax+80]
	jbe	SHORT $LN1@CheckPalet
; Line 2390
	push	OFFSET $SG83063
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2391
	xor	eax, eax
	jmp	SHORT $LN6@CheckPalet
$LN1@CheckPalet:
; Line 2393
	mov	eax, 1
$LN6@CheckPalet:
; Line 2394
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CheckPaletteHeader@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z ENDP ; CImageDisplay::CheckPaletteHeader
_TEXT	ENDS
PUBLIC	?GetDisplayFormat@CImageDisplay@@QAEPBUtagVIDEOINFO@@XZ ; CImageDisplay::GetDisplayFormat
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDisplayFormat@CImageDisplay@@QAEPBUtagVIDEOINFO@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplayFormat@CImageDisplay@@QAEPBUtagVIDEOINFO@@XZ PROC ; CImageDisplay::GetDisplayFormat, COMDAT
; _this$ = ecx
; Line 2400
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2401
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
; Line 2402
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplayFormat@CImageDisplay@@QAEPBUtagVIDEOINFO@@XZ ENDP ; CImageDisplay::GetDisplayFormat
_TEXT	ENDS
PUBLIC	?IsPalettised@CImageDisplay@@QAEHXZ		; CImageDisplay::IsPalettised
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsPalettised@CImageDisplay@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPalettised@CImageDisplay@@QAEHXZ PROC		; CImageDisplay::IsPalettised, COMDAT
; _this$ = ecx
; Line 2408
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2409
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+102]
	xor	eax, eax
	cmp	ecx, 8
	setle	al
; Line 2410
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPalettised@CImageDisplay@@QAEHXZ ENDP		; CImageDisplay::IsPalettised
_TEXT	ENDS
PUBLIC	?GetDisplayDepth@CImageDisplay@@QAEGXZ		; CImageDisplay::GetDisplayDepth
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDisplayDepth@CImageDisplay@@QAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplayDepth@CImageDisplay@@QAEGXZ PROC		; CImageDisplay::GetDisplayDepth, COMDAT
; _this$ = ecx
; Line 2416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2417
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+102]
; Line 2418
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplayDepth@CImageDisplay@@QAEGXZ ENDP		; CImageDisplay::GetDisplayDepth
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?UpdateFormat@CImageDisplay@@QAEJPAUtagVIDEOINFO@@@Z
_TEXT	SEGMENT
_pbmi$ = -8						; size = 4
_this$ = -4						; size = 4
_pVideoInfo$ = 8					; size = 4
?UpdateFormat@CImageDisplay@@QAEJPAUtagVIDEOINFO@@@Z PROC ; CImageDisplay::UpdateFormat, COMDAT
; _this$ = ecx
; Line 2430
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2431
	cmp	DWORD PTR _pVideoInfo$[ebp], 0
	jne	SHORT $LN5@UpdateForm
	push	2431					; 0000097fH
	push	OFFSET $SG83078
	push	OFFSET $SG83079
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@UpdateForm:
; Line 2433
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _pbmi$[ebp], eax
; Line 2434
	mov	esi, esp
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetRectEmpty@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2435
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	add	edx, 16					; 00000010H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__SetRectEmpty@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2439
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	movzx	ecx, WORD PTR [eax+62]
	cmp	ecx, 8
	jg	SHORT $LN4@UpdateForm
; Line 2440
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [edx+80], 0
	jne	SHORT $LN4@UpdateForm
; Line 2441
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	movzx	ecx, WORD PTR [eax+62]
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	mov	DWORD PTR [eax+80], edx
$LN4@UpdateForm:
; Line 2449
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	mov	eax, DWORD PTR [ecx+84]
	cmp	eax, DWORD PTR [edx+80]
	jbe	SHORT $LN2@UpdateForm
; Line 2450
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	movzx	ecx, WORD PTR [ecx+62]
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	mov	DWORD PTR [eax+84], edx
$LN2@UpdateForm:
; Line 2455
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	jne	SHORT $LN1@UpdateForm
; Line 2456
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	_GetBitmapSize@4
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	DWORD PTR [ecx+68], eax
$LN1@UpdateForm:
; Line 2458
	xor	eax, eax
; Line 2459
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateFormat@CImageDisplay@@QAEJPAUtagVIDEOINFO@@@Z ENDP ; CImageDisplay::UpdateFormat
_TEXT	ENDS
PUBLIC	?GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z ; CImageDisplay::GetBitMasks
PUBLIC	?CheckVideoType@CImageDisplay@@QAEJPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckVideoType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckVideoType@CImageDisplay@@QAEJPBUtagVIDEOINFO@@@Z
_TEXT	SEGMENT
_pDisplayMask$ = -12					; size = 4
_pInputMask$ = -8					; size = 4
_this$ = -4						; size = 4
_pInput$ = 8						; size = 4
?CheckVideoType@CImageDisplay@@QAEJPBUtagVIDEOINFO@@@Z PROC ; CImageDisplay::CheckVideoType, COMDAT
; _this$ = ecx
; Line 2471
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2474
	mov	eax, DWORD PTR _pInput$[ebp]
	push	eax
	call	?CheckHeaderValidity@CImageDisplay@@SGHPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckHeaderValidity
	test	eax, eax
	jne	SHORT $LN11@CheckVideo
; Line 2475
	mov	eax, -2147024809			; 80070057H
	jmp	$LN12@CheckVideo
$LN11@CheckVideo:
; Line 2480
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+102]
	mov	eax, DWORD PTR _pInput$[ebp]
	movzx	ecx, WORD PTR [eax+62]
	cmp	edx, ecx
	jne	SHORT $LN10@CheckVideo
; Line 2481
	mov	edx, DWORD PTR _pInput$[ebp]
	movzx	eax, WORD PTR [edx+62]
	xor	ecx, ecx
	cmp	eax, 8
	setle	cl
	cmp	ecx, 1
	jne	SHORT $LN10@CheckVideo
; Line 2482
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+102]
	xor	ecx, ecx
	cmp	eax, 8
	setle	cl
	cmp	ecx, 1
	je	SHORT $LN8@CheckVideo
	push	2482					; 000009b2H
	push	OFFSET $SG83097
	push	OFFSET $SG83098
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@CheckVideo:
; Line 2483
	push	OFFSET $SG83099
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2484
	xor	eax, eax
	jmp	$LN12@CheckVideo
$LN10@CheckVideo:
; Line 2491
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+102]
	mov	ecx, DWORD PTR _pInput$[ebp]
	movzx	edx, WORD PTR [ecx+62]
	cmp	eax, edx
	jle	SHORT $LN7@CheckVideo
; Line 2492
	push	OFFSET $SG83101
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2493
	xor	eax, eax
	jmp	$LN12@CheckVideo
$LN7@CheckVideo:
; Line 2498
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+102]
	mov	edx, DWORD PTR _pInput$[ebp]
	movzx	eax, WORD PTR [edx+62]
	cmp	ecx, eax
	jge	SHORT $LN6@CheckVideo
; Line 2499
	push	OFFSET $SG83103
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2500
	mov	eax, -2147024809			; 80070057H
	jmp	$LN12@CheckVideo
$LN6@CheckVideo:
; Line 2506
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+102]
	mov	eax, DWORD PTR _pInput$[ebp]
	movzx	ecx, WORD PTR [eax+62]
	cmp	edx, ecx
	je	SHORT $LN5@CheckVideo
	push	2506					; 000009caH
	push	OFFSET $SG83106
	push	OFFSET $SG83107
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN5@CheckVideo:
; Line 2507
	mov	edx, DWORD PTR _pInput$[ebp]
	movzx	eax, WORD PTR [edx+62]
	xor	ecx, ecx
	cmp	eax, 8
	setle	cl
	test	ecx, ecx
	je	SHORT $LN4@CheckVideo
	push	2507					; 000009cbH
	push	OFFSET $SG83109
	push	OFFSET $SG83110
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CheckVideo:
; Line 2508
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+102]
	xor	ecx, ecx
	cmp	eax, 8
	setle	cl
	test	ecx, ecx
	je	SHORT $LN3@CheckVideo
	push	2508					; 000009ccH
	push	OFFSET $SG83112
	push	OFFSET $SG83113
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@CheckVideo:
; Line 2515
	mov	edx, DWORD PTR _pInput$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z ; CImageDisplay::GetBitMasks
	mov	DWORD PTR _pInputMask$[ebp], eax
; Line 2516
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z ; CImageDisplay::GetBitMasks
	mov	DWORD PTR _pDisplayMask$[ebp], eax
; Line 2520
	mov	ecx, DWORD PTR _pInputMask$[ebp]
	mov	edx, DWORD PTR _pDisplayMask$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@CheckVideo
	mov	ecx, DWORD PTR _pInputMask$[ebp]
	mov	edx, DWORD PTR _pDisplayMask$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN1@CheckVideo
	mov	ecx, DWORD PTR _pInputMask$[ebp]
	mov	edx, DWORD PTR _pDisplayMask$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN2@CheckVideo
$LN1@CheckVideo:
; Line 2522
	push	OFFSET $SG83119
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2523
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN12@CheckVideo
$LN2@CheckVideo:
; Line 2526
	push	OFFSET $SG83121
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2527
	xor	eax, eax
$LN12@CheckVideo:
; Line 2528
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckVideoType@CImageDisplay@@QAEJPBUtagVIDEOINFO@@@Z ENDP ; CImageDisplay::CheckVideoType
_TEXT	ENDS
EXTRN	?bits888@@3QBKB:BYTE				; bits888
EXTRN	?bits555@@3QBKB:BYTE				; bits555
;	COMDAT ?FailMasks@?1??GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z@4QBKB
CONST	SEGMENT
?FailMasks@?1??GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z@4QBKB DD 00H ; `CImageDisplay::GetBitMasks'::`2'::FailMasks
	DD	00H
	DD	00H
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
_pVideoInfo$ = 8					; size = 4
?GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z PROC ; CImageDisplay::GetBitMasks, COMDAT
; _this$ = ecx
; Line 2534
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2537
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [eax+64], 3
	jne	SHORT $LN8@GetBitMask
; Line 2538
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _pVideoInfo$[ebp]
	lea	eax, DWORD PTR [eax+edx+48]
	jmp	SHORT $LN9@GetBitMask
$LN8@GetBitMask:
; Line 2541
	mov	ecx, DWORD PTR _pVideoInfo$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN7@GetBitMask
	push	2541					; 000009edH
	push	OFFSET $SG83132
	push	OFFSET $SG83133
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN7@GetBitMask:
; Line 2543
	mov	edx, DWORD PTR _pVideoInfo$[ebp]
	movzx	eax, WORD PTR [edx+62]
	mov	DWORD PTR tv80[ebp], eax
	cmp	DWORD PTR tv80[ebp], 16			; 00000010H
	je	SHORT $LN4@GetBitMask
	cmp	DWORD PTR tv80[ebp], 24			; 00000018H
	je	SHORT $LN3@GetBitMask
	cmp	DWORD PTR tv80[ebp], 32			; 00000020H
	je	SHORT $LN2@GetBitMask
	jmp	SHORT $LN1@GetBitMask
$LN4@GetBitMask:
; Line 2544
	mov	eax, OFFSET ?bits555@@3QBKB		; bits555
	jmp	SHORT $LN9@GetBitMask
$LN3@GetBitMask:
; Line 2545
	mov	eax, OFFSET ?bits888@@3QBKB		; bits888
	jmp	SHORT $LN9@GetBitMask
$LN2@GetBitMask:
; Line 2546
	mov	eax, OFFSET ?bits888@@3QBKB		; bits888
	jmp	SHORT $LN9@GetBitMask
$LN1@GetBitMask:
; Line 2547
	mov	eax, OFFSET ?FailMasks@?1??GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z@4QBKB
$LN9@GetBitMask:
; Line 2549
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z ENDP ; CImageDisplay::GetBitMasks
_TEXT	ENDS
PUBLIC	?Subtype@CMediaType@@QBEPBU_GUID@@XZ		; CMediaType::Subtype
PUBLIC	?Type@CMediaType@@QBEPBU_GUID@@XZ		; CMediaType::Type
PUBLIC	_!=@8
PUBLIC	?FormatType@CMediaType@@QBEPBU_GUID@@XZ		; CMediaType::FormatType
PUBLIC	?CheckMediaType@CImageDisplay@@QAEJPBVCMediaType@@@Z ; CImageDisplay::CheckMediaType
EXTRN	_GetBitCount@4:PROC
EXTRN	_MEDIATYPE_Video:BYTE
EXTRN	_FORMAT_VideoInfo:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckMediaType@CImageDisplay@@QAEJPBVCMediaType@@@Z
_TEXT	SEGMENT
_pSubType$ = -24					; size = 4
_pMajorType$ = -20					; size = 4
_pInput$ = -16						; size = 4
_Length$ = -12						; size = 4
_pFormatType$ = -8					; size = 4
_this$ = -4						; size = 4
_pmtIn$ = 8						; size = 4
?CheckMediaType@CImageDisplay@@QAEJPBVCMediaType@@@Z PROC ; CImageDisplay::CheckMediaType, COMDAT
; _this$ = ecx
; Line 2559
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 2562
	mov	ecx, DWORD PTR _pmtIn$[ebp]
	call	?FormatType@CMediaType@@QBEPBU_GUID@@XZ	; CMediaType::FormatType
	mov	DWORD PTR _pFormatType$[ebp], eax
; Line 2563
	push	OFFSET _FORMAT_VideoInfo
	mov	eax, DWORD PTR _pFormatType$[ebp]
	push	eax
	call	_!=@8
	test	eax, eax
	je	SHORT $LN5@CheckMedia
; Line 2564
	push	OFFSET $SG83148
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2565
	mov	eax, -2147024809			; 80070057H
	jmp	$LN6@CheckMedia
$LN5@CheckMedia:
; Line 2567
	mov	ecx, DWORD PTR _pmtIn$[ebp]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	test	eax, eax
	jne	SHORT $LN4@CheckMedia
	push	2567					; 00000a07H
	push	OFFSET $SG83151
	push	OFFSET $SG83152
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@CheckMedia:
; Line 2571
	mov	ecx, DWORD PTR _pmtIn$[ebp]
	call	?FormatLength@CMediaType@@QBEKXZ	; CMediaType::FormatLength
	mov	DWORD PTR _Length$[ebp], eax
; Line 2572
	cmp	DWORD PTR _Length$[ebp], 88		; 00000058H
	jae	SHORT $LN3@CheckMedia
; Line 2573
	push	OFFSET $SG83159
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2574
	mov	eax, -2147467259			; 80004005H
	jmp	$LN6@CheckMedia
$LN3@CheckMedia:
; Line 2577
	mov	ecx, DWORD PTR _pmtIn$[ebp]
	call	?Format@CMediaType@@QBEPAEXZ		; CMediaType::Format
	mov	DWORD PTR _pInput$[ebp], eax
; Line 2581
	mov	ecx, DWORD PTR _pmtIn$[ebp]
	call	?Type@CMediaType@@QBEPBU_GUID@@XZ	; CMediaType::Type
	mov	DWORD PTR _pMajorType$[ebp], eax
; Line 2582
	push	OFFSET _MEDIATYPE_Video
	mov	ecx, DWORD PTR _pMajorType$[ebp]
	push	ecx
	call	_!=@8
	test	eax, eax
	je	SHORT $LN2@CheckMedia
; Line 2583
	push	OFFSET $SG83165
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2584
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN6@CheckMedia
$LN2@CheckMedia:
; Line 2589
	mov	ecx, DWORD PTR _pmtIn$[ebp]
	call	?Subtype@CMediaType@@QBEPBU_GUID@@XZ	; CMediaType::Subtype
	mov	DWORD PTR _pSubType$[ebp], eax
; Line 2590
	mov	edx, DWORD PTR _pSubType$[ebp]
	push	edx
	call	_GetBitCount@4
	movzx	eax, ax
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN1@CheckMedia
; Line 2591
	push	OFFSET $SG83169
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 2592
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN6@CheckMedia
$LN1@CheckMedia:
; Line 2594
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckVideoType@CImageDisplay@@QAEJPBUtagVIDEOINFO@@@Z ; CImageDisplay::CheckVideoType
$LN6@CheckMedia:
; Line 2595
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckMediaType@CImageDisplay@@QAEJPBVCMediaType@@@Z ENDP ; CImageDisplay::CheckMediaType
_TEXT	ENDS
PUBLIC	_==@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _!=@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_!=@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 198
	push	ebp
	mov	ebp, esp
; Line 199
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_==@8
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 200
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_!=@8	ENDP
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Type@CMediaType@@QBEPBU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@CMediaType@@QBEPBU_GUID@@XZ PROC			; CMediaType::Type, COMDAT
; _this$ = ecx
; File c:\downloads\mediapoint\src\filters\baseclasses\mtype.h
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@CMediaType@@QBEPBU_GUID@@XZ ENDP			; CMediaType::Type
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Subtype@CMediaType@@QBEPBU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Subtype@CMediaType@@QBEPBU_GUID@@XZ PROC		; CMediaType::Subtype, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
?Subtype@CMediaType@@QBEPBU_GUID@@XZ ENDP		; CMediaType::Subtype
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?FormatType@CMediaType@@QBEPBU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FormatType@CMediaType@@QBEPBU_GUID@@XZ PROC		; CMediaType::FormatType, COMDAT
; _this$ = ecx
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	mov	esp, ebp
	pop	ebp
	ret	0
?FormatType@CMediaType@@QBEPBU_GUID@@XZ ENDP		; CMediaType::FormatType
_TEXT	ENDS
PUBLIC	?GetColourMask@CImageDisplay@@QAEHPAK00@Z	; CImageDisplay::GetColourMask
;	COMDAT xdata$x
; File c:\downloads\mediapoint\src\filters\baseclasses\winutil.cpp
xdata$x	SEGMENT
__unwindtable$?GetColourMask@CImageDisplay@@QAEHPAK00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetColourMask@CImageDisplay@@QAEHPAK00@Z$0
__ehfuncinfo$?GetColourMask@CImageDisplay@@QAEHPAK00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetColourMask@CImageDisplay@@QAEHPAK00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?GetColourMask@CImageDisplay@@QAEHPAK00@Z
_TEXT	SEGMENT
$T84246 = -76						; size = 4
$T84245 = -72						; size = 4
$T84244 = -68						; size = 4
_SetBits$83194 = -64					; size = 4
_PrefixBits$83193 = -60					; size = 4
_iColour$83189 = -56					; size = 4
_pOutputMask$ = -48					; size = 12
_pBitFields$ = -32					; size = 4
_cDisplayLock$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pMaskRed$ = 8						; size = 4
_pMaskGreen$ = 12					; size = 4
_pMaskBlue$ = 16					; size = 4
?GetColourMask@CImageDisplay@@QAEHPAK00@Z PROC		; CImageDisplay::GetColourMask, COMDAT
; _this$ = ecx
; Line 2607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetColourMask@CImageDisplay@@QAEHPAK00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 2608
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	call	??0CAutoLock@@QAE@PAVCCritSec@@@Z	; CAutoLock::CAutoLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2609
	mov	ecx, DWORD PTR _pMaskRed$[ebp]
	mov	DWORD PTR [ecx], 255			; 000000ffH
; Line 2610
	mov	edx, DWORD PTR _pMaskGreen$[ebp]
	mov	DWORD PTR [edx], 255			; 000000ffH
; Line 2611
	mov	eax, DWORD PTR _pMaskBlue$[ebp]
	mov	DWORD PTR [eax], 255			; 000000ffH
; Line 2615
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+102]
	cmp	edx, 16					; 00000010H
	jge	SHORT $LN6@GetColourM
; Line 2616
	mov	DWORD PTR $T84244[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T84244[ebp]
	jmp	$LN7@GetColourM
$LN6@GetColourM:
; Line 2623
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+102]
	cmp	ecx, 24					; 00000018H
	jne	SHORT $LN5@GetColourM
; Line 2624
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN4@GetColourM
	push	2624					; 00000a40H
	push	OFFSET $SG83182
	push	OFFSET $SG83183
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN4@GetColourM:
; Line 2625
	mov	DWORD PTR $T84245[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T84245[ebp]
	jmp	$LN7@GetColourM
$LN5@GetColourM:
; Line 2630
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBitMasks@CImageDisplay@@QAEPBKPBUtagVIDEOINFO@@@Z ; CImageDisplay::GetBitMasks
	mov	DWORD PTR _pBitFields$[ebp], eax
; Line 2631
	mov	ecx, DWORD PTR _pMaskRed$[ebp]
	mov	DWORD PTR _pOutputMask$[ebp], ecx
	mov	edx, DWORD PTR _pMaskGreen$[ebp]
	mov	DWORD PTR _pOutputMask$[ebp+4], edx
	mov	eax, DWORD PTR _pMaskBlue$[ebp]
	mov	DWORD PTR _pOutputMask$[ebp+8], eax
; Line 2637
	mov	DWORD PTR _iColour$83189[ebp], 0
	jmp	SHORT $LN3@GetColourM
$LN2@GetColourM:
	mov	ecx, DWORD PTR _iColour$83189[ebp]
	add	ecx, 1
	mov	DWORD PTR _iColour$83189[ebp], ecx
$LN3@GetColourM:
	cmp	DWORD PTR _iColour$83189[ebp], 2
	jg	SHORT $LN1@GetColourM
; Line 2641
	mov	edx, DWORD PTR _iColour$83189[ebp]
	mov	eax, DWORD PTR _pBitFields$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?CountPrefixBits@CImageDisplay@@KGKK@Z	; CImageDisplay::CountPrefixBits
	mov	DWORD PTR _PrefixBits$83193[ebp], eax
; Line 2642
	mov	edx, DWORD PTR _iColour$83189[ebp]
	mov	eax, DWORD PTR _pBitFields$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?CountSetBits@CImageDisplay@@KGKK@Z	; CImageDisplay::CountSetBits
	mov	DWORD PTR _SetBits$83194[ebp], eax
; Line 2648
	mov	edx, DWORD PTR _iColour$83189[ebp]
	mov	eax, DWORD PTR _pBitFields$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _PrefixBits$83193[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _iColour$83189[ebp]
	mov	ecx, DWORD PTR _pOutputMask$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
; Line 2649
	mov	edx, DWORD PTR _iColour$83189[ebp]
	mov	eax, DWORD PTR _pOutputMask$[ebp+edx*4]
	mov	ecx, 8
	sub	ecx, DWORD PTR _SetBits$83194[ebp]
	mov	edx, DWORD PTR [eax]
	shl	edx, cl
	mov	eax, DWORD PTR _iColour$83189[ebp]
	mov	ecx, DWORD PTR _pOutputMask$[ebp+eax*4]
	mov	DWORD PTR [ecx], edx
; Line 2650
	jmp	SHORT $LN2@GetColourM
$LN1@GetColourM:
; Line 2651
	mov	DWORD PTR $T84246[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	call	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
	mov	eax, DWORD PTR $T84246[ebp]
$LN7@GetColourM:
; Line 2652
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@GetColourM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN14@GetColourM:
	DD	2
	DD	$LN13@GetColourM
$LN13@GetColourM:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@GetColourM
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN11@GetColourM
$LN11@GetColourM:
	DB	112					; 00000070H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
$LN10@GetColourM:
	DB	99					; 00000063H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetColourMask@CImageDisplay@@QAEHPAK00@Z$0:
	lea	ecx, DWORD PTR _cDisplayLock$[ebp]
	jmp	??1CAutoLock@@QAE@XZ			; CAutoLock::~CAutoLock
__ehhandler$?GetColourMask@CImageDisplay@@QAEHPAK00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetColourMask@CImageDisplay@@QAEHPAK00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetColourMask@CImageDisplay@@QAEHPAK00@Z ENDP		; CImageDisplay::GetColourMask
PUBLIC	_ConvertVideoInfoToVideoInfo2@4
EXTRN	__imp__CoTaskMemFree@4:PROC
EXTRN	_FORMAT_VideoInfo2:BYTE
EXTRN	__imp__CoTaskMemAlloc@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ConvertVideoInfoToVideoInfo2@4
_TEXT	SEGMENT
_pVideoInfo2$ = -12					; size = 4
_pvNew$ = -8						; size = 4
_pVideoInfo$ = -4					; size = 4
_pmt$ = 8						; size = 4
_ConvertVideoInfoToVideoInfo2@4 PROC			; COMDAT
; Line 2658
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2659
	push	OFFSET _FORMAT_VideoInfo
	mov	eax, DWORD PTR _pmt$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	call	_==@8
	test	eax, eax
	jne	SHORT $LN2@ConvertVid
	push	2659					; 00000a63H
	push	OFFSET $SG83200
	push	OFFSET $SG83201
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@ConvertVid:
; Line 2660
	mov	ecx, DWORD PTR _pmt$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _pVideoInfo$[ebp], edx
; Line 2662
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 24					; 00000018H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__CoTaskMemAlloc@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pvNew$[ebp], eax
; Line 2663
	cmp	DWORD PTR _pvNew$[ebp], 0
	jne	SHORT $LN1@ConvertVid
; Line 2664
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN3@ConvertVid
$LN1@ConvertVid:
; Line 2666
	push	48					; 00000030H
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _pvNew$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2668
	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _pvNew$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2671
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	eax, DWORD PTR [edx+68]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _pvNew$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2672
	mov	edx, DWORD PTR _pvNew$[ebp]
	mov	DWORD PTR _pVideoInfo2$[ebp], edx
; Line 2673
	mov	eax, DWORD PTR _pVideoInfo2$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo2$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+56], edx
; Line 2674
	mov	eax, DWORD PTR _pVideoInfo2$[ebp]
	mov	ecx, DWORD PTR _pVideoInfo2$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+60], edx
; Line 2675
	mov	eax, DWORD PTR _pmt$[ebp]
	add	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _FORMAT_VideoInfo2
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _FORMAT_VideoInfo2+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _FORMAT_VideoInfo2+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _FORMAT_VideoInfo2+12
	mov	DWORD PTR [eax+12], edx
; Line 2676
	mov	esi, esp
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	DWORD PTR __imp__CoTaskMemFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2677
	mov	edx, DWORD PTR _pmt$[ebp]
	mov	eax, DWORD PTR _pvNew$[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 2678
	mov	ecx, DWORD PTR _pmt$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR _pmt$[ebp]
	mov	DWORD PTR [eax+64], edx
; Line 2679
	xor	eax, eax
$LN3@ConvertVid:
; Line 2680
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_ConvertVideoInfoToVideoInfo2@4 ENDP
_TEXT	ENDS
END
