; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Downloads\MediaPoint\src\filters\BaseClasses\videoctl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAMFilterGraphCallback
CONST	SEGMENT
$SG81576 DB	00H, 00H
$SG81582 DB	00H
	ORG $+1
$SG81601 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81602 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81610 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81611 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81619 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81620 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81629 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81630 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81638 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81639 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81646 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81647 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81656 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81657 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81666 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81667 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81672 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81673 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81680 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81681 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81687 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81688 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81695 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81696 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81702 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81703 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81709 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81710 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81716 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81717 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81723 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81724 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81730 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81731 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81736 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81737 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81744 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81745 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81753 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81754 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81761 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81762 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG81769 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81770 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81779 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81780 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81786 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81787 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81797 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81798 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81806 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81807 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81817 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81818 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81825 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81826 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81833 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81834 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81842 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81843 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81850 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81851 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81858 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81859 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81865 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81866 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81872 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81873 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81879 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81880 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81887 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81888 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81894 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81895 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81901 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81902 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81909 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81910 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81916 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81917 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81923 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81924 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81930 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81931 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81941 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81942 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81947 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81948 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81957 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81958 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81964 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81965 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81970 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81971 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81977 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81978 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81985 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81986 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG81993 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG81994 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG82000 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82001 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG82007 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82008 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG82018 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82019 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG82025 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82026 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG82033 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82034 DB	'm', 00H, '_', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 'S', 00H, 'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG82042 DB	'U', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'b'
	DB	00H, 'r', 00H, 'a', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG82051 DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'D', 00H, 'o', 00H, 'L', 00H, 'o'
	DB	00H, 'a', 00H, 'd', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 00H
	DB	00H
$SG82053 DB	'A', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'y', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG82055 DB	'.', 00H, '.', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'o', 00H, 'c', 00H, 't', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG82056 DB	'm', 00H, '_', 00H, 'h', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG82059 DB	'D', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'W', 00H, '.', 00H
	DB	'D', 00H, 'L', 00H, 'L', 00H, 00H, 00H
$SG82061 DB	'C', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 'D', 00H, 'D'
	DB	00H, 'R', 00H, 'A', 00H, 'W', 00H, '.', 00H, 'D', 00H, 'L', 00H
	DB	'L', 00H, 00H, 00H
	ORG $+2
$SG82062 DB	'N', 00H, 'o', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG82065 DB	'DirectDrawCreate', 00H
	ORG $+3
$SG82067 DB	'DirectDrawEnumerateA', 00H
	ORG $+3
$SG82069 DB	'DirectDrawEnumerateExA', 00H
	ORG $+1
$SG82072 DB	'C', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 'n'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '=', 00H, '%', 00H, 'x', 00H, ' ', 00H, 'E', 00H
	DB	'n', 00H, 'u', 00H, 'm', 00H, '=', 00H, '%', 00H, 'x', 00H, 00H
	DB	00H
	ORG $+2
$SG82073 DB	'N', 00H, 'o', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'r', 00H, 'y', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, 00H, 00H
	ORG $+2
$SG82075 DB	'<NULL>', 00H
	ORG $+1
$SG82076 DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'D', 00H, 'D', 00H, 'r', 00H, 'a'
	DB	00H, 'w', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG82080 DB	'C', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' '
	DB	00H, 'D', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG82081 DB	'N', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG82086 DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H
	DB	'w', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 00H, 00H
$SG82088 DB	'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG82092 DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'I', 00H, 's', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H
	DB	'a', 00H, 'w', 00H, 'L', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
$SG82094 DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
$SG82099 DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'D', 00H
	DB	'r', 00H, 'a', 00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG82101 DB	'N', 00H, 'o', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, 00H, 00H
$SG82102 DB	'R', 00H, 'e', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'n', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'D', 00H, 'r', 00H, 'a', 00H
	DB	'w', 00H, 00H, 00H
	ORG $+2
$SG82112 DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	' ', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, ' ', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, '2', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'g'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+2
$SG82114 DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	' ', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, ' ', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, '1', 00H, 00H, 00H
CONST	ENDS
;	COMDAT _IID_IAMFilterGraphCallback
CONST	SEGMENT
_IID_IAMFilterGraphCallback DD 056a868fdH
	DW	0ad4H
	DW	011ceH
	DB	0b0H
	DB	0a3H
	DB	00H
	DB	020H
	DB	0afH
	DB	0bH
	DB	0a7H
	DB	070H
CONST	ENDS
PUBLIC	?StringFromResource@@YGPA_WPA_WH@Z		; StringFromResource
EXTRN	__imp__LoadStringW@16:PROC
EXTRN	?g_hInst@@3PAUHINSTANCE__@@A:DWORD		; g_hInst
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\downloads\mediapoint\src\filters\baseclasses\videoctl.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ?StringFromResource@@YGPA_WPA_WH@Z
_TEXT	SEGMENT
_pBuffer$ = 8						; size = 4
_iResourceID$ = 12					; size = 4
?StringFromResource@@YGPA_WPA_WH@Z PROC			; StringFromResource, COMDAT
; Line 19
	push	ebp
	mov	ebp, esp
	push	esi
; Line 20
	mov	esi, esp
	push	256					; 00000100H
	mov	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iResourceID$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
	push	edx
	call	DWORD PTR __imp__LoadStringW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@StringFrom
; Line 21
	mov	eax, OFFSET $SG81576
	jmp	SHORT $LN2@StringFrom
$LN1@StringFrom:
; Line 23
	mov	eax, DWORD PTR _pBuffer$[ebp]
$LN2@StringFrom:
; Line 24
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?StringFromResource@@YGPA_WPA_WH@Z ENDP			; StringFromResource
_TEXT	ENDS
PUBLIC	?StringFromResource@@YGPADPADH@Z		; StringFromResource
EXTRN	__imp__LoadStringA@16:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?StringFromResource@@YGPADPADH@Z
_TEXT	SEGMENT
_pBuffer$ = 8						; size = 4
_iResourceID$ = 12					; size = 4
?StringFromResource@@YGPADPADH@Z PROC			; StringFromResource, COMDAT
; Line 28
	push	ebp
	mov	ebp, esp
	push	esi
; Line 29
	mov	esi, esp
	push	256					; 00000100H
	mov	eax, DWORD PTR _pBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iResourceID$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
	push	edx
	call	DWORD PTR __imp__LoadStringA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@StringFrom@2
; Line 30
	mov	eax, OFFSET $SG81582
	jmp	SHORT $LN2@StringFrom@2
$LN1@StringFrom@2:
; Line 32
	mov	eax, DWORD PTR _pBuffer$[ebp]
$LN2@StringFrom@2:
; Line 33
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?StringFromResource@@YGPADPADH@Z ENDP			; StringFromResource
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetDialogSize@@YGHHP6GHPAUHWND__@@IIJ@ZJPAUtagSIZE@@@Z ; GetDialogSize
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__CreateDialogParamW@20:PROC
EXTRN	__imp__GetDesktopWindow@0:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDialogSize@@YGHHP6GHPAUHWND__@@IIJ@ZJPAUtagSIZE@@@Z
_TEXT	SEGMENT
_hwnd$ = -32						; size = 4
_rc$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_iResourceID$ = 8					; size = 4
_pDlgProc$ = 12						; size = 4
_lParam$ = 16						; size = 4
_pResult$ = 20						; size = 4
?GetDialogSize@@YGHHP6GHPAUHWND__@@IIJ@ZJPAUtagSIZE@@@Z PROC ; GetDialogSize, COMDAT
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 85
	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDlgProc$[ebp]
	push	ecx
	mov	edi, esp
	call	DWORD PTR __imp__GetDesktopWindow@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	movzx	edx, WORD PTR _iResourceID$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_hInst@@3PAUHINSTANCE__@@A ; g_hInst
	push	eax
	call	DWORD PTR __imp__CreateDialogParamW@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hwnd$[ebp], eax
; Line 86
	cmp	DWORD PTR _hwnd$[ebp], 0
	jne	SHORT $LN1@GetDialogS
; Line 87
	xor	eax, eax
	jmp	SHORT $LN2@GetDialogS
$LN1@GetDialogS:
; Line 90
	mov	esi, esp
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 91
	mov	eax, DWORD PTR _rc$[ebp+8]
	sub	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _pResult$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 92
	mov	edx, DWORD PTR _rc$[ebp+12]
	sub	edx, DWORD PTR _rc$[ebp+4]
	mov	eax, DWORD PTR _pResult$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 94
	mov	esi, esp
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__DestroyWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 95
	mov	eax, 1
$LN2@GetDialogS:
; Line 96
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GetDialogS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN6@GetDialogS:
	DD	1
	DD	$LN5@GetDialogS
$LN5@GetDialogS:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@GetDialogS
$LN4@GetDialogS:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
?GetDialogSize@@YGHHP6GHPAUHWND__@@IIJ@ZJPAUtagSIZE@@@Z ENDP ; GetDialogSize
_TEXT	ENDS
PUBLIC	_==@8
PUBLIC	?NonDelegatingQueryInterface@CAggDirectDraw@@UAGJABU_GUID@@PAPAX@Z ; CAggDirectDraw::NonDelegatingQueryInterface
EXTRN	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z:PROC ; CUnknown::NonDelegatingQueryInterface
EXTRN	_GetInterface@8:PROC
EXTRN	_IID_IDirectDraw:BYTE
EXTRN	?DbgAssert@@YGXPB_W0H@Z:PROC			; DbgAssert
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingQueryInterface@CAggDirectDraw@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CAggDirectDraw@@UAGJABU_GUID@@PAPAX@Z PROC ; CAggDirectDraw::NonDelegatingQueryInterface, COMDAT
; Line 108
	push	ebp
	mov	ebp, esp
; Line 109
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@NonDelegat
	push	109					; 0000006dH
	push	OFFSET $SG81601
	push	OFFSET $SG81602
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@NonDelegat:
; Line 113
	push	OFFSET _IID_IDirectDraw
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@NonDelegat
; Line 114
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN4@NonDelegat
; Line 115
	jmp	SHORT $LN4@NonDelegat
$LN2@NonDelegat:
; Line 116
	mov	ecx, DWORD PTR _ppv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z ; CUnknown::NonDelegatingQueryInterface
$LN4@NonDelegat:
; Line 118
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CAggDirectDraw@@UAGJABU_GUID@@PAPAX@Z ENDP ; CAggDirectDraw::NonDelegatingQueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	?Compact@CAggDirectDraw@@UAGJXZ			; CAggDirectDraw::Compact
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Compact@CAggDirectDraw@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Compact@CAggDirectDraw@@UAGJXZ PROC			; CAggDirectDraw::Compact, COMDAT
; File c:\downloads\mediapoint\src\filters\baseclasses\videoctl.cpp
; Line 122
	push	ebp
	mov	ebp, esp
	push	esi
; Line 123
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Compact
	push	123					; 0000007bH
	push	OFFSET $SG81610
	push	OFFSET $SG81611
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Compact:
; Line 124
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 125
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Compact@CAggDirectDraw@@UAGJXZ ENDP			; CAggDirectDraw::Compact
_TEXT	ENDS
PUBLIC	?CreateClipper@CAggDirectDraw@@UAGJKPAPAUIDirectDrawClipper@@PAUIUnknown@@@Z ; CAggDirectDraw::CreateClipper
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateClipper@CAggDirectDraw@@UAGJKPAPAUIDirectDrawClipper@@PAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_lplpDDClipper$ = 16					; size = 4
_pUnkOuter$ = 20					; size = 4
?CreateClipper@CAggDirectDraw@@UAGJKPAPAUIDirectDrawClipper@@PAUIUnknown@@@Z PROC ; CAggDirectDraw::CreateClipper, COMDAT
; Line 129
	push	ebp
	mov	ebp, esp
	push	esi
; Line 130
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@CreateClip
	push	130					; 00000082H
	push	OFFSET $SG81619
	push	OFFSET $SG81620
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CreateClip:
; Line 131
	mov	esi, esp
	mov	ecx, DWORD PTR _pUnkOuter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lplpDDClipper$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 132
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?CreateClipper@CAggDirectDraw@@UAGJKPAPAUIDirectDrawClipper@@PAUIUnknown@@@Z ENDP ; CAggDirectDraw::CreateClipper
_TEXT	ENDS
PUBLIC	?CreatePalette@CAggDirectDraw@@UAGJKPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@PAUIUnknown@@@Z ; CAggDirectDraw::CreatePalette
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreatePalette@CAggDirectDraw@@UAGJKPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@PAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_lpColorTable$ = 16					; size = 4
_lplpDDPalette$ = 20					; size = 4
_pUnkOuter$ = 24					; size = 4
?CreatePalette@CAggDirectDraw@@UAGJKPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@PAUIUnknown@@@Z PROC ; CAggDirectDraw::CreatePalette, COMDAT
; Line 136
	push	ebp
	mov	ebp, esp
	push	esi
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@CreatePale
	push	137					; 00000089H
	push	OFFSET $SG81629
	push	OFFSET $SG81630
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CreatePale:
; Line 138
	mov	esi, esp
	mov	ecx, DWORD PTR _pUnkOuter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lplpDDPalette$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpColorTable$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 139
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	20					; 00000014H
?CreatePalette@CAggDirectDraw@@UAGJKPAUtagPALETTEENTRY@@PAPAUIDirectDrawPalette@@PAUIUnknown@@@Z ENDP ; CAggDirectDraw::CreatePalette
_TEXT	ENDS
PUBLIC	?CreateSurface@CAggDirectDraw@@UAGJPAU_DDSURFACEDESC@@PAPAUIDirectDrawSurface@@PAUIUnknown@@@Z ; CAggDirectDraw::CreateSurface
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateSurface@CAggDirectDraw@@UAGJPAU_DDSURFACEDESC@@PAPAUIDirectDrawSurface@@PAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDSurfaceDesc$ = 12					; size = 4
_lplpDDSurface$ = 16					; size = 4
_pUnkOuter$ = 20					; size = 4
?CreateSurface@CAggDirectDraw@@UAGJPAU_DDSURFACEDESC@@PAPAUIDirectDrawSurface@@PAUIUnknown@@@Z PROC ; CAggDirectDraw::CreateSurface, COMDAT
; Line 143
	push	ebp
	mov	ebp, esp
	push	esi
; Line 144
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@CreateSurf
	push	144					; 00000090H
	push	OFFSET $SG81638
	push	OFFSET $SG81639
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@CreateSurf:
; Line 145
	mov	esi, esp
	mov	ecx, DWORD PTR _pUnkOuter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lplpDDSurface$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDDSurfaceDesc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 146
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?CreateSurface@CAggDirectDraw@@UAGJPAU_DDSURFACEDESC@@PAPAUIDirectDrawSurface@@PAUIUnknown@@@Z ENDP ; CAggDirectDraw::CreateSurface
_TEXT	ENDS
PUBLIC	?DuplicateSurface@CAggDirectDraw@@UAGJPAUIDirectDrawSurface@@PAPAU2@@Z ; CAggDirectDraw::DuplicateSurface
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DuplicateSurface@CAggDirectDraw@@UAGJPAUIDirectDrawSurface@@PAPAU2@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDSurface$ = 12					; size = 4
_lplpDupDDSurface$ = 16					; size = 4
?DuplicateSurface@CAggDirectDraw@@UAGJPAUIDirectDrawSurface@@PAPAU2@@Z PROC ; CAggDirectDraw::DuplicateSurface, COMDAT
; Line 150
	push	ebp
	mov	ebp, esp
	push	esi
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@DuplicateS
	push	151					; 00000097H
	push	OFFSET $SG81646
	push	OFFSET $SG81647
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DuplicateS:
; Line 152
	mov	esi, esp
	mov	ecx, DWORD PTR _lplpDupDDSurface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpDDSurface$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 153
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?DuplicateSurface@CAggDirectDraw@@UAGJPAUIDirectDrawSurface@@PAPAU2@@Z ENDP ; CAggDirectDraw::DuplicateSurface
_TEXT	ENDS
PUBLIC	?EnumDisplayModes@CAggDirectDraw@@UAGJKPAU_DDSURFACEDESC@@PAXP6GJ01@Z@Z ; CAggDirectDraw::EnumDisplayModes
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?EnumDisplayModes@CAggDirectDraw@@UAGJKPAU_DDSURFACEDESC@@PAXP6GJ01@Z@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwSurfaceDescCount$ = 12				; size = 4
_lplpDDSurfaceDescList$ = 16				; size = 4
_lpContext$ = 20					; size = 4
_lpEnumCallback$ = 24					; size = 4
?EnumDisplayModes@CAggDirectDraw@@UAGJKPAU_DDSURFACEDESC@@PAXP6GJ01@Z@Z PROC ; CAggDirectDraw::EnumDisplayModes, COMDAT
; Line 157
	push	ebp
	mov	ebp, esp
	push	esi
; Line 158
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@EnumDispla
	push	158					; 0000009eH
	push	OFFSET $SG81656
	push	OFFSET $SG81657
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@EnumDispla:
; Line 159
	mov	esi, esp
	mov	ecx, DWORD PTR _lpEnumCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _lplpDDSurfaceDescList$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwSurfaceDescCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 160
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	20					; 00000014H
?EnumDisplayModes@CAggDirectDraw@@UAGJKPAU_DDSURFACEDESC@@PAXP6GJ01@Z@Z ENDP ; CAggDirectDraw::EnumDisplayModes
_TEXT	ENDS
PUBLIC	?EnumSurfaces@CAggDirectDraw@@UAGJKPAU_DDSURFACEDESC@@PAXP6GJPAUIDirectDrawSurface@@01@Z@Z ; CAggDirectDraw::EnumSurfaces
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?EnumSurfaces@CAggDirectDraw@@UAGJKPAU_DDSURFACEDESC@@PAXP6GJPAUIDirectDrawSurface@@01@Z@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_lpDDSD$ = 16						; size = 4
_lpContext$ = 20					; size = 4
_lpEnumCallback$ = 24					; size = 4
?EnumSurfaces@CAggDirectDraw@@UAGJKPAU_DDSURFACEDESC@@PAXP6GJPAUIDirectDrawSurface@@01@Z@Z PROC ; CAggDirectDraw::EnumSurfaces, COMDAT
; Line 164
	push	ebp
	mov	ebp, esp
	push	esi
; Line 165
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@EnumSurfac
	push	165					; 000000a5H
	push	OFFSET $SG81666
	push	OFFSET $SG81667
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@EnumSurfac:
; Line 166
	mov	esi, esp
	mov	ecx, DWORD PTR _lpEnumCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDDSD$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 167
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	20					; 00000014H
?EnumSurfaces@CAggDirectDraw@@UAGJKPAU_DDSURFACEDESC@@PAXP6GJPAUIDirectDrawSurface@@01@Z@Z ENDP ; CAggDirectDraw::EnumSurfaces
_TEXT	ENDS
PUBLIC	?FlipToGDISurface@CAggDirectDraw@@UAGJXZ	; CAggDirectDraw::FlipToGDISurface
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FlipToGDISurface@CAggDirectDraw@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?FlipToGDISurface@CAggDirectDraw@@UAGJXZ PROC		; CAggDirectDraw::FlipToGDISurface, COMDAT
; Line 171
	push	ebp
	mov	ebp, esp
	push	esi
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@FlipToGDIS
	push	172					; 000000acH
	push	OFFSET $SG81672
	push	OFFSET $SG81673
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@FlipToGDIS:
; Line 173
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 174
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?FlipToGDISurface@CAggDirectDraw@@UAGJXZ ENDP		; CAggDirectDraw::FlipToGDISurface
_TEXT	ENDS
PUBLIC	?GetCaps@CAggDirectDraw@@UAGJPAU_DDCAPS_DX7@@0@Z ; CAggDirectDraw::GetCaps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetCaps@CAggDirectDraw@@UAGJPAU_DDCAPS_DX7@@0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDDriverCaps$ = 12					; size = 4
_lpDDHELCaps$ = 16					; size = 4
?GetCaps@CAggDirectDraw@@UAGJPAU_DDCAPS_DX7@@0@Z PROC	; CAggDirectDraw::GetCaps, COMDAT
; Line 178
	push	ebp
	mov	ebp, esp
	push	esi
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetCaps
	push	179					; 000000b3H
	push	OFFSET $SG81680
	push	OFFSET $SG81681
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetCaps:
; Line 180
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDHELCaps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpDDDriverCaps$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 181
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetCaps@CAggDirectDraw@@UAGJPAU_DDCAPS_DX7@@0@Z ENDP	; CAggDirectDraw::GetCaps
_TEXT	ENDS
PUBLIC	?GetDisplayMode@CAggDirectDraw@@UAGJPAU_DDSURFACEDESC@@@Z ; CAggDirectDraw::GetDisplayMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDisplayMode@CAggDirectDraw@@UAGJPAU_DDSURFACEDESC@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDSurfaceDesc$ = 12					; size = 4
?GetDisplayMode@CAggDirectDraw@@UAGJPAU_DDSURFACEDESC@@@Z PROC ; CAggDirectDraw::GetDisplayMode, COMDAT
; Line 185
	push	ebp
	mov	ebp, esp
	push	esi
; Line 186
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetDisplay
	push	186					; 000000baH
	push	OFFSET $SG81687
	push	OFFSET $SG81688
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetDisplay:
; Line 187
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDSurfaceDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 188
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetDisplayMode@CAggDirectDraw@@UAGJPAU_DDSURFACEDESC@@@Z ENDP ; CAggDirectDraw::GetDisplayMode
_TEXT	ENDS
PUBLIC	?GetFourCCCodes@CAggDirectDraw@@UAGJPAK0@Z	; CAggDirectDraw::GetFourCCCodes
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetFourCCCodes@CAggDirectDraw@@UAGJPAK0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpNumCodes$ = 12					; size = 4
_lpCodes$ = 16						; size = 4
?GetFourCCCodes@CAggDirectDraw@@UAGJPAK0@Z PROC		; CAggDirectDraw::GetFourCCCodes, COMDAT
; Line 192
	push	ebp
	mov	ebp, esp
	push	esi
; Line 193
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetFourCCC
	push	193					; 000000c1H
	push	OFFSET $SG81695
	push	OFFSET $SG81696
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetFourCCC:
; Line 194
	mov	esi, esp
	mov	ecx, DWORD PTR _lpCodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpNumCodes$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 195
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetFourCCCodes@CAggDirectDraw@@UAGJPAK0@Z ENDP		; CAggDirectDraw::GetFourCCCodes
_TEXT	ENDS
PUBLIC	?GetGDISurface@CAggDirectDraw@@UAGJPAPAUIDirectDrawSurface@@@Z ; CAggDirectDraw::GetGDISurface
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetGDISurface@CAggDirectDraw@@UAGJPAPAUIDirectDrawSurface@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lplpGDIDDSurface$ = 12					; size = 4
?GetGDISurface@CAggDirectDraw@@UAGJPAPAUIDirectDrawSurface@@@Z PROC ; CAggDirectDraw::GetGDISurface, COMDAT
; Line 199
	push	ebp
	mov	ebp, esp
	push	esi
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetGDISurf
	push	200					; 000000c8H
	push	OFFSET $SG81702
	push	OFFSET $SG81703
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetGDISurf:
; Line 201
	mov	esi, esp
	mov	ecx, DWORD PTR _lplpGDIDDSurface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 202
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetGDISurface@CAggDirectDraw@@UAGJPAPAUIDirectDrawSurface@@@Z ENDP ; CAggDirectDraw::GetGDISurface
_TEXT	ENDS
PUBLIC	?GetMonitorFrequency@CAggDirectDraw@@UAGJPAK@Z	; CAggDirectDraw::GetMonitorFrequency
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetMonitorFrequency@CAggDirectDraw@@UAGJPAK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpdwFrequency$ = 12					; size = 4
?GetMonitorFrequency@CAggDirectDraw@@UAGJPAK@Z PROC	; CAggDirectDraw::GetMonitorFrequency, COMDAT
; Line 206
	push	ebp
	mov	ebp, esp
	push	esi
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetMonitor
	push	207					; 000000cfH
	push	OFFSET $SG81709
	push	OFFSET $SG81710
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetMonitor:
; Line 208
	mov	esi, esp
	mov	ecx, DWORD PTR _lpdwFrequency$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 209
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetMonitorFrequency@CAggDirectDraw@@UAGJPAK@Z ENDP	; CAggDirectDraw::GetMonitorFrequency
_TEXT	ENDS
PUBLIC	?GetScanLine@CAggDirectDraw@@UAGJPAK@Z		; CAggDirectDraw::GetScanLine
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetScanLine@CAggDirectDraw@@UAGJPAK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpdwScanLine$ = 12					; size = 4
?GetScanLine@CAggDirectDraw@@UAGJPAK@Z PROC		; CAggDirectDraw::GetScanLine, COMDAT
; Line 213
	push	ebp
	mov	ebp, esp
	push	esi
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetScanLin
	push	214					; 000000d6H
	push	OFFSET $SG81716
	push	OFFSET $SG81717
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetScanLin:
; Line 215
	mov	esi, esp
	mov	ecx, DWORD PTR _lpdwScanLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 216
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetScanLine@CAggDirectDraw@@UAGJPAK@Z ENDP		; CAggDirectDraw::GetScanLine
_TEXT	ENDS
PUBLIC	?GetVerticalBlankStatus@CAggDirectDraw@@UAGJPAH@Z ; CAggDirectDraw::GetVerticalBlankStatus
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetVerticalBlankStatus@CAggDirectDraw@@UAGJPAH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpblsInVB$ = 12					; size = 4
?GetVerticalBlankStatus@CAggDirectDraw@@UAGJPAH@Z PROC	; CAggDirectDraw::GetVerticalBlankStatus, COMDAT
; Line 220
	push	ebp
	mov	ebp, esp
	push	esi
; Line 221
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetVertica
	push	221					; 000000ddH
	push	OFFSET $SG81723
	push	OFFSET $SG81724
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetVertica:
; Line 222
	mov	esi, esp
	mov	ecx, DWORD PTR _lpblsInVB$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 223
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetVerticalBlankStatus@CAggDirectDraw@@UAGJPAH@Z ENDP	; CAggDirectDraw::GetVerticalBlankStatus
_TEXT	ENDS
PUBLIC	?Initialize@CAggDirectDraw@@UAGJPAU_GUID@@@Z	; CAggDirectDraw::Initialize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Initialize@CAggDirectDraw@@UAGJPAU_GUID@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpGUID$ = 12						; size = 4
?Initialize@CAggDirectDraw@@UAGJPAU_GUID@@@Z PROC	; CAggDirectDraw::Initialize, COMDAT
; Line 227
	push	ebp
	mov	ebp, esp
	push	esi
; Line 228
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Initialize
	push	228					; 000000e4H
	push	OFFSET $SG81730
	push	OFFSET $SG81731
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Initialize:
; Line 229
	mov	esi, esp
	mov	ecx, DWORD PTR _lpGUID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+72]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 230
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?Initialize@CAggDirectDraw@@UAGJPAU_GUID@@@Z ENDP	; CAggDirectDraw::Initialize
_TEXT	ENDS
PUBLIC	?RestoreDisplayMode@CAggDirectDraw@@UAGJXZ	; CAggDirectDraw::RestoreDisplayMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?RestoreDisplayMode@CAggDirectDraw@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?RestoreDisplayMode@CAggDirectDraw@@UAGJXZ PROC		; CAggDirectDraw::RestoreDisplayMode, COMDAT
; Line 234
	push	ebp
	mov	ebp, esp
	push	esi
; Line 235
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@RestoreDis
	push	235					; 000000ebH
	push	OFFSET $SG81736
	push	OFFSET $SG81737
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@RestoreDis:
; Line 236
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 237
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?RestoreDisplayMode@CAggDirectDraw@@UAGJXZ ENDP		; CAggDirectDraw::RestoreDisplayMode
_TEXT	ENDS
PUBLIC	?SetCooperativeLevel@CAggDirectDraw@@UAGJPAUHWND__@@K@Z ; CAggDirectDraw::SetCooperativeLevel
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetCooperativeLevel@CAggDirectDraw@@UAGJPAUHWND__@@K@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_hWnd$ = 12						; size = 4
_dwFlags$ = 16						; size = 4
?SetCooperativeLevel@CAggDirectDraw@@UAGJPAUHWND__@@K@Z PROC ; CAggDirectDraw::SetCooperativeLevel, COMDAT
; Line 241
	push	ebp
	mov	ebp, esp
	push	esi
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@SetCoopera
	push	242					; 000000f2H
	push	OFFSET $SG81744
	push	OFFSET $SG81745
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetCoopera:
; Line 243
	mov	esi, esp
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 244
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?SetCooperativeLevel@CAggDirectDraw@@UAGJPAUHWND__@@K@Z ENDP ; CAggDirectDraw::SetCooperativeLevel
_TEXT	ENDS
PUBLIC	?SetDisplayMode@CAggDirectDraw@@UAGJKKK@Z	; CAggDirectDraw::SetDisplayMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetDisplayMode@CAggDirectDraw@@UAGJKKK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwWidth$ = 12						; size = 4
_dwHeight$ = 16						; size = 4
_dwBpp$ = 20						; size = 4
?SetDisplayMode@CAggDirectDraw@@UAGJKKK@Z PROC		; CAggDirectDraw::SetDisplayMode, COMDAT
; Line 248
	push	ebp
	mov	ebp, esp
	push	esi
; Line 249
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@SetDisplay
	push	249					; 000000f9H
	push	OFFSET $SG81753
	push	OFFSET $SG81754
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetDisplay:
; Line 250
	mov	esi, esp
	mov	ecx, DWORD PTR _dwBpp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwHeight$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwWidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+84]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 251
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?SetDisplayMode@CAggDirectDraw@@UAGJKKK@Z ENDP		; CAggDirectDraw::SetDisplayMode
_TEXT	ENDS
PUBLIC	?WaitForVerticalBlank@CAggDirectDraw@@UAGJKPAX@Z ; CAggDirectDraw::WaitForVerticalBlank
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WaitForVerticalBlank@CAggDirectDraw@@UAGJKPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_hEvent$ = 16						; size = 4
?WaitForVerticalBlank@CAggDirectDraw@@UAGJKPAX@Z PROC	; CAggDirectDraw::WaitForVerticalBlank, COMDAT
; Line 255
	push	ebp
	mov	ebp, esp
	push	esi
; Line 256
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@WaitForVer
	push	256					; 00000100H
	push	OFFSET $SG81761
	push	OFFSET $SG81762
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@WaitForVer:
; Line 257
	mov	esi, esp
	mov	ecx, DWORD PTR _hEvent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 258
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?WaitForVerticalBlank@CAggDirectDraw@@UAGJKPAX@Z ENDP	; CAggDirectDraw::WaitForVerticalBlank
_TEXT	ENDS
PUBLIC	?NonDelegatingQueryInterface@CAggDrawSurface@@UAGJABU_GUID@@PAPAX@Z ; CAggDrawSurface::NonDelegatingQueryInterface
EXTRN	_IID_IDirectDrawSurface:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?NonDelegatingQueryInterface@CAggDrawSurface@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppv$ = 16						; size = 4
?NonDelegatingQueryInterface@CAggDrawSurface@@UAGJABU_GUID@@PAPAX@Z PROC ; CAggDrawSurface::NonDelegatingQueryInterface, COMDAT
; Line 270
	push	ebp
	mov	ebp, esp
; Line 271
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@NonDelegat@2
	push	271					; 0000010fH
	push	OFFSET $SG81769
	push	OFFSET $SG81770
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN3@NonDelegat@2:
; Line 275
	push	OFFSET _IID_IDirectDrawSurface
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@NonDelegat@2
; Line 276
	mov	edx, DWORD PTR _ppv$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	_GetInterface@8
	jmp	SHORT $LN4@NonDelegat@2
; Line 277
	jmp	SHORT $LN4@NonDelegat@2
$LN2@NonDelegat@2:
; Line 278
	mov	ecx, DWORD PTR _ppv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?NonDelegatingQueryInterface@CUnknown@@UAGJABU_GUID@@PAPAX@Z ; CUnknown::NonDelegatingQueryInterface
$LN4@NonDelegat@2:
; Line 280
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?NonDelegatingQueryInterface@CAggDrawSurface@@UAGJABU_GUID@@PAPAX@Z ENDP ; CAggDrawSurface::NonDelegatingQueryInterface
_TEXT	ENDS
PUBLIC	?AddAttachedSurface@CAggDrawSurface@@UAGJPAUIDirectDrawSurface@@@Z ; CAggDrawSurface::AddAttachedSurface
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddAttachedSurface@CAggDrawSurface@@UAGJPAUIDirectDrawSurface@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDSAttachedSurface$ = 12				; size = 4
?AddAttachedSurface@CAggDrawSurface@@UAGJPAUIDirectDrawSurface@@@Z PROC ; CAggDrawSurface::AddAttachedSurface, COMDAT
; Line 284
	push	ebp
	mov	ebp, esp
	push	esi
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@AddAttache
	push	285					; 0000011dH
	push	OFFSET $SG81779
	push	OFFSET $SG81780
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@AddAttache:
; Line 286
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDSAttachedSurface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 287
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?AddAttachedSurface@CAggDrawSurface@@UAGJPAUIDirectDrawSurface@@@Z ENDP ; CAggDrawSurface::AddAttachedSurface
_TEXT	ENDS
PUBLIC	?AddOverlayDirtyRect@CAggDrawSurface@@UAGJPAUtagRECT@@@Z ; CAggDrawSurface::AddOverlayDirtyRect
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddOverlayDirtyRect@CAggDrawSurface@@UAGJPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpRect$ = 12						; size = 4
?AddOverlayDirtyRect@CAggDrawSurface@@UAGJPAUtagRECT@@@Z PROC ; CAggDrawSurface::AddOverlayDirtyRect, COMDAT
; Line 291
	push	ebp
	mov	ebp, esp
	push	esi
; Line 292
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@AddOverlay
	push	292					; 00000124H
	push	OFFSET $SG81786
	push	OFFSET $SG81787
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@AddOverlay:
; Line 293
	mov	esi, esp
	mov	ecx, DWORD PTR _lpRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 294
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?AddOverlayDirtyRect@CAggDrawSurface@@UAGJPAUtagRECT@@@Z ENDP ; CAggDrawSurface::AddOverlayDirtyRect
_TEXT	ENDS
PUBLIC	?Blt@CAggDrawSurface@@UAGJPAUtagRECT@@PAUIDirectDrawSurface@@0KPAU_DDBLTFX@@@Z ; CAggDrawSurface::Blt
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Blt@CAggDrawSurface@@UAGJPAUtagRECT@@PAUIDirectDrawSurface@@0KPAU_DDBLTFX@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDestRect$ = 12					; size = 4
_lpDDSrcSurface$ = 16					; size = 4
_lpSrcRect$ = 20					; size = 4
_dwFlags$ = 24						; size = 4
_lpDDBltFx$ = 28					; size = 4
?Blt@CAggDrawSurface@@UAGJPAUtagRECT@@PAUIDirectDrawSurface@@0KPAU_DDBLTFX@@@Z PROC ; CAggDrawSurface::Blt, COMDAT
; Line 298
	push	ebp
	mov	ebp, esp
	push	esi
; Line 299
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Blt
	push	299					; 0000012bH
	push	OFFSET $SG81797
	push	OFFSET $SG81798
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Blt:
; Line 300
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDBltFx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpSrcRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpDDSrcSurface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpDestRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 301
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	24					; 00000018H
?Blt@CAggDrawSurface@@UAGJPAUtagRECT@@PAUIDirectDrawSurface@@0KPAU_DDBLTFX@@@Z ENDP ; CAggDrawSurface::Blt
_TEXT	ENDS
PUBLIC	?BltBatch@CAggDrawSurface@@UAGJPAU_DDBLTBATCH@@KK@Z ; CAggDrawSurface::BltBatch
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BltBatch@CAggDrawSurface@@UAGJPAU_DDBLTBATCH@@KK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDBltBatch$ = 12					; size = 4
_dwCount$ = 16						; size = 4
_dwFlags$ = 20						; size = 4
?BltBatch@CAggDrawSurface@@UAGJPAU_DDBLTBATCH@@KK@Z PROC ; CAggDrawSurface::BltBatch, COMDAT
; Line 305
	push	ebp
	mov	ebp, esp
	push	esi
; Line 306
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@BltBatch
	push	306					; 00000132H
	push	OFFSET $SG81806
	push	OFFSET $SG81807
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@BltBatch:
; Line 307
	mov	esi, esp
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDDBltBatch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 308
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?BltBatch@CAggDrawSurface@@UAGJPAU_DDBLTBATCH@@KK@Z ENDP ; CAggDrawSurface::BltBatch
_TEXT	ENDS
PUBLIC	?BltFast@CAggDrawSurface@@UAGJKKPAUIDirectDrawSurface@@PAUtagRECT@@K@Z ; CAggDrawSurface::BltFast
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BltFast@CAggDrawSurface@@UAGJKKPAUIDirectDrawSurface@@PAUtagRECT@@K@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwX$ = 12						; size = 4
_dwY$ = 16						; size = 4
_lpDDSrcSurface$ = 20					; size = 4
_lpSrcRect$ = 24					; size = 4
_dwTrans$ = 28						; size = 4
?BltFast@CAggDrawSurface@@UAGJKKPAUIDirectDrawSurface@@PAUtagRECT@@K@Z PROC ; CAggDrawSurface::BltFast, COMDAT
; Line 312
	push	ebp
	mov	ebp, esp
	push	esi
; Line 313
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@BltFast
	push	313					; 00000139H
	push	OFFSET $SG81817
	push	OFFSET $SG81818
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@BltFast:
; Line 314
	mov	esi, esp
	mov	ecx, DWORD PTR _dwTrans$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpSrcRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDDSrcSurface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 315
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	24					; 00000018H
?BltFast@CAggDrawSurface@@UAGJKKPAUIDirectDrawSurface@@PAUtagRECT@@K@Z ENDP ; CAggDrawSurface::BltFast
_TEXT	ENDS
PUBLIC	?DeleteAttachedSurface@CAggDrawSurface@@UAGJKPAUIDirectDrawSurface@@@Z ; CAggDrawSurface::DeleteAttachedSurface
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteAttachedSurface@CAggDrawSurface@@UAGJKPAUIDirectDrawSurface@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_lpDDSAttachedSurface$ = 16				; size = 4
?DeleteAttachedSurface@CAggDrawSurface@@UAGJKPAUIDirectDrawSurface@@@Z PROC ; CAggDrawSurface::DeleteAttachedSurface, COMDAT
; Line 319
	push	ebp
	mov	ebp, esp
	push	esi
; Line 320
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@DeleteAtta
	push	320					; 00000140H
	push	OFFSET $SG81825
	push	OFFSET $SG81826
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@DeleteAtta:
; Line 321
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDSAttachedSurface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 322
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?DeleteAttachedSurface@CAggDrawSurface@@UAGJKPAUIDirectDrawSurface@@@Z ENDP ; CAggDrawSurface::DeleteAttachedSurface
_TEXT	ENDS
PUBLIC	?EnumAttachedSurfaces@CAggDrawSurface@@UAGJPAXP6GJPAUIDirectDrawSurface@@PAU_DDSURFACEDESC@@0@Z@Z ; CAggDrawSurface::EnumAttachedSurfaces
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?EnumAttachedSurfaces@CAggDrawSurface@@UAGJPAXP6GJPAUIDirectDrawSurface@@PAU_DDSURFACEDESC@@0@Z@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpContext$ = 12					; size = 4
_lpEnumSurfacesCallback$ = 16				; size = 4
?EnumAttachedSurfaces@CAggDrawSurface@@UAGJPAXP6GJPAUIDirectDrawSurface@@PAU_DDSURFACEDESC@@0@Z@Z PROC ; CAggDrawSurface::EnumAttachedSurfaces, COMDAT
; Line 326
	push	ebp
	mov	ebp, esp
	push	esi
; Line 327
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@EnumAttach
	push	327					; 00000147H
	push	OFFSET $SG81833
	push	OFFSET $SG81834
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@EnumAttach:
; Line 328
	mov	esi, esp
	mov	ecx, DWORD PTR _lpEnumSurfacesCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 329
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?EnumAttachedSurfaces@CAggDrawSurface@@UAGJPAXP6GJPAUIDirectDrawSurface@@PAU_DDSURFACEDESC@@0@Z@Z ENDP ; CAggDrawSurface::EnumAttachedSurfaces
_TEXT	ENDS
PUBLIC	?EnumOverlayZOrders@CAggDrawSurface@@UAGJKPAXP6GJPAUIDirectDrawSurface@@PAU_DDSURFACEDESC@@0@Z@Z ; CAggDrawSurface::EnumOverlayZOrders
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?EnumOverlayZOrders@CAggDrawSurface@@UAGJKPAXP6GJPAUIDirectDrawSurface@@PAU_DDSURFACEDESC@@0@Z@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_lpContext$ = 16					; size = 4
_lpfnCallback$ = 20					; size = 4
?EnumOverlayZOrders@CAggDrawSurface@@UAGJKPAXP6GJPAUIDirectDrawSurface@@PAU_DDSURFACEDESC@@0@Z@Z PROC ; CAggDrawSurface::EnumOverlayZOrders, COMDAT
; Line 333
	push	ebp
	mov	ebp, esp
	push	esi
; Line 334
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@EnumOverla
	push	334					; 0000014eH
	push	OFFSET $SG81842
	push	OFFSET $SG81843
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@EnumOverla:
; Line 335
	mov	esi, esp
	mov	ecx, DWORD PTR _lpfnCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 336
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?EnumOverlayZOrders@CAggDrawSurface@@UAGJKPAXP6GJPAUIDirectDrawSurface@@PAU_DDSURFACEDESC@@0@Z@Z ENDP ; CAggDrawSurface::EnumOverlayZOrders
_TEXT	ENDS
PUBLIC	?Flip@CAggDrawSurface@@UAGJPAUIDirectDrawSurface@@K@Z ; CAggDrawSurface::Flip
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Flip@CAggDrawSurface@@UAGJPAUIDirectDrawSurface@@K@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDSurfaceTargetOverride$ = 12			; size = 4
_dwFlags$ = 16						; size = 4
?Flip@CAggDrawSurface@@UAGJPAUIDirectDrawSurface@@K@Z PROC ; CAggDrawSurface::Flip, COMDAT
; Line 340
	push	ebp
	mov	ebp, esp
	push	esi
; Line 341
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Flip
	push	341					; 00000155H
	push	OFFSET $SG81850
	push	OFFSET $SG81851
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Flip:
; Line 342
	mov	esi, esp
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpDDSurfaceTargetOverride$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 343
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?Flip@CAggDrawSurface@@UAGJPAUIDirectDrawSurface@@K@Z ENDP ; CAggDrawSurface::Flip
_TEXT	ENDS
PUBLIC	?GetAttachedSurface@CAggDrawSurface@@UAGJPAU_DDSCAPS@@PAPAUIDirectDrawSurface@@@Z ; CAggDrawSurface::GetAttachedSurface
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetAttachedSurface@CAggDrawSurface@@UAGJPAU_DDSCAPS@@PAPAUIDirectDrawSurface@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDSCaps$ = 12					; size = 4
_lplpDDAttachedSurface$ = 16				; size = 4
?GetAttachedSurface@CAggDrawSurface@@UAGJPAU_DDSCAPS@@PAPAUIDirectDrawSurface@@@Z PROC ; CAggDrawSurface::GetAttachedSurface, COMDAT
; Line 347
	push	ebp
	mov	ebp, esp
	push	esi
; Line 348
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetAttache
	push	348					; 0000015cH
	push	OFFSET $SG81858
	push	OFFSET $SG81859
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetAttache:
; Line 349
	mov	esi, esp
	mov	ecx, DWORD PTR _lplpDDAttachedSurface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpDDSCaps$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 350
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetAttachedSurface@CAggDrawSurface@@UAGJPAU_DDSCAPS@@PAPAUIDirectDrawSurface@@@Z ENDP ; CAggDrawSurface::GetAttachedSurface
_TEXT	ENDS
PUBLIC	?GetBltStatus@CAggDrawSurface@@UAGJK@Z		; CAggDrawSurface::GetBltStatus
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetBltStatus@CAggDrawSurface@@UAGJK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
?GetBltStatus@CAggDrawSurface@@UAGJK@Z PROC		; CAggDrawSurface::GetBltStatus, COMDAT
; Line 354
	push	ebp
	mov	ebp, esp
	push	esi
; Line 355
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetBltStat
	push	355					; 00000163H
	push	OFFSET $SG81865
	push	OFFSET $SG81866
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetBltStat:
; Line 356
	mov	esi, esp
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 357
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetBltStatus@CAggDrawSurface@@UAGJK@Z ENDP		; CAggDrawSurface::GetBltStatus
_TEXT	ENDS
PUBLIC	?GetCaps@CAggDrawSurface@@UAGJPAU_DDSCAPS@@@Z	; CAggDrawSurface::GetCaps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetCaps@CAggDrawSurface@@UAGJPAU_DDSCAPS@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDSCaps$ = 12					; size = 4
?GetCaps@CAggDrawSurface@@UAGJPAU_DDSCAPS@@@Z PROC	; CAggDrawSurface::GetCaps, COMDAT
; Line 361
	push	ebp
	mov	ebp, esp
	push	esi
; Line 362
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetCaps@2
	push	362					; 0000016aH
	push	OFFSET $SG81872
	push	OFFSET $SG81873
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetCaps@2:
; Line 363
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDSCaps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 364
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetCaps@CAggDrawSurface@@UAGJPAU_DDSCAPS@@@Z ENDP	; CAggDrawSurface::GetCaps
_TEXT	ENDS
PUBLIC	?GetClipper@CAggDrawSurface@@UAGJPAPAUIDirectDrawClipper@@@Z ; CAggDrawSurface::GetClipper
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetClipper@CAggDrawSurface@@UAGJPAPAUIDirectDrawClipper@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lplpDDClipper$ = 12					; size = 4
?GetClipper@CAggDrawSurface@@UAGJPAPAUIDirectDrawClipper@@@Z PROC ; CAggDrawSurface::GetClipper, COMDAT
; Line 368
	push	ebp
	mov	ebp, esp
	push	esi
; Line 369
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetClipper
	push	369					; 00000171H
	push	OFFSET $SG81879
	push	OFFSET $SG81880
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetClipper:
; Line 370
	mov	esi, esp
	mov	ecx, DWORD PTR _lplpDDClipper$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 371
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetClipper@CAggDrawSurface@@UAGJPAPAUIDirectDrawClipper@@@Z ENDP ; CAggDrawSurface::GetClipper
_TEXT	ENDS
PUBLIC	?GetColorKey@CAggDrawSurface@@UAGJKPAU_DDCOLORKEY@@@Z ; CAggDrawSurface::GetColorKey
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetColorKey@CAggDrawSurface@@UAGJKPAU_DDCOLORKEY@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_lpDDColorKey$ = 16					; size = 4
?GetColorKey@CAggDrawSurface@@UAGJKPAU_DDCOLORKEY@@@Z PROC ; CAggDrawSurface::GetColorKey, COMDAT
; Line 375
	push	ebp
	mov	ebp, esp
	push	esi
; Line 376
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetColorKe
	push	376					; 00000178H
	push	OFFSET $SG81887
	push	OFFSET $SG81888
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetColorKe:
; Line 377
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDColorKey$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 378
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetColorKey@CAggDrawSurface@@UAGJKPAU_DDCOLORKEY@@@Z ENDP ; CAggDrawSurface::GetColorKey
_TEXT	ENDS
PUBLIC	?GetDC@CAggDrawSurface@@UAGJPAPAUHDC__@@@Z	; CAggDrawSurface::GetDC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDC@CAggDrawSurface@@UAGJPAPAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lphDC$ = 12						; size = 4
?GetDC@CAggDrawSurface@@UAGJPAPAUHDC__@@@Z PROC		; CAggDrawSurface::GetDC, COMDAT
; Line 382
	push	ebp
	mov	ebp, esp
	push	esi
; Line 383
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetDC
	push	383					; 0000017fH
	push	OFFSET $SG81894
	push	OFFSET $SG81895
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetDC:
; Line 384
	mov	esi, esp
	mov	ecx, DWORD PTR _lphDC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 385
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetDC@CAggDrawSurface@@UAGJPAPAUHDC__@@@Z ENDP		; CAggDrawSurface::GetDC
_TEXT	ENDS
PUBLIC	?GetFlipStatus@CAggDrawSurface@@UAGJK@Z		; CAggDrawSurface::GetFlipStatus
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetFlipStatus@CAggDrawSurface@@UAGJK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
?GetFlipStatus@CAggDrawSurface@@UAGJK@Z PROC		; CAggDrawSurface::GetFlipStatus, COMDAT
; Line 389
	push	ebp
	mov	ebp, esp
	push	esi
; Line 390
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetFlipSta
	push	390					; 00000186H
	push	OFFSET $SG81901
	push	OFFSET $SG81902
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetFlipSta:
; Line 391
	mov	esi, esp
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+72]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 392
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetFlipStatus@CAggDrawSurface@@UAGJK@Z ENDP		; CAggDrawSurface::GetFlipStatus
_TEXT	ENDS
PUBLIC	?GetOverlayPosition@CAggDrawSurface@@UAGJPAJ0@Z	; CAggDrawSurface::GetOverlayPosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetOverlayPosition@CAggDrawSurface@@UAGJPAJ0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpdwX$ = 12						; size = 4
_lpdwY$ = 16						; size = 4
?GetOverlayPosition@CAggDrawSurface@@UAGJPAJ0@Z PROC	; CAggDrawSurface::GetOverlayPosition, COMDAT
; Line 396
	push	ebp
	mov	ebp, esp
	push	esi
; Line 397
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetOverlay
	push	397					; 0000018dH
	push	OFFSET $SG81909
	push	OFFSET $SG81910
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetOverlay:
; Line 398
	mov	esi, esp
	mov	ecx, DWORD PTR _lpdwY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpdwX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 399
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetOverlayPosition@CAggDrawSurface@@UAGJPAJ0@Z ENDP	; CAggDrawSurface::GetOverlayPosition
_TEXT	ENDS
PUBLIC	?GetPalette@CAggDrawSurface@@UAGJPAPAUIDirectDrawPalette@@@Z ; CAggDrawSurface::GetPalette
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetPalette@CAggDrawSurface@@UAGJPAPAUIDirectDrawPalette@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lplpDDPalette$ = 12					; size = 4
?GetPalette@CAggDrawSurface@@UAGJPAPAUIDirectDrawPalette@@@Z PROC ; CAggDrawSurface::GetPalette, COMDAT
; Line 403
	push	ebp
	mov	ebp, esp
	push	esi
; Line 404
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetPalette
	push	404					; 00000194H
	push	OFFSET $SG81916
	push	OFFSET $SG81917
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetPalette:
; Line 405
	mov	esi, esp
	mov	ecx, DWORD PTR _lplpDDPalette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 406
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetPalette@CAggDrawSurface@@UAGJPAPAUIDirectDrawPalette@@@Z ENDP ; CAggDrawSurface::GetPalette
_TEXT	ENDS
PUBLIC	?GetPixelFormat@CAggDrawSurface@@UAGJPAU_DDPIXELFORMAT@@@Z ; CAggDrawSurface::GetPixelFormat
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetPixelFormat@CAggDrawSurface@@UAGJPAU_DDPIXELFORMAT@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDPixelFormat$ = 12					; size = 4
?GetPixelFormat@CAggDrawSurface@@UAGJPAU_DDPIXELFORMAT@@@Z PROC ; CAggDrawSurface::GetPixelFormat, COMDAT
; Line 410
	push	ebp
	mov	ebp, esp
	push	esi
; Line 411
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@GetPixelFo
	push	411					; 0000019bH
	push	OFFSET $SG81923
	push	OFFSET $SG81924
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@GetPixelFo:
; Line 412
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDPixelFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+84]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 413
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetPixelFormat@CAggDrawSurface@@UAGJPAU_DDPIXELFORMAT@@@Z ENDP ; CAggDrawSurface::GetPixelFormat
_TEXT	ENDS
PUBLIC	?GetSurfaceDesc@CAggDrawSurface@@UAGJPAU_DDSURFACEDESC@@@Z ; CAggDrawSurface::GetSurfaceDesc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetSurfaceDesc@CAggDrawSurface@@UAGJPAU_DDSURFACEDESC@@@Z
_TEXT	SEGMENT
_hr$ = -4						; size = 4
_this$ = 8						; size = 4
_lpDDSurfaceDesc$ = 12					; size = 4
?GetSurfaceDesc@CAggDrawSurface@@UAGJPAU_DDSURFACEDESC@@@Z PROC ; CAggDrawSurface::GetSurfaceDesc, COMDAT
; Line 427
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 428
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@GetSurface
	push	428					; 000001acH
	push	OFFSET $SG81930
	push	OFFSET $SG81931
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN2@GetSurface:
; Line 432
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDSurfaceDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+88]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 433
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@GetSurface
; Line 434
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN3@GetSurface
$LN1@GetSurface:
; Line 438
	mov	edx, DWORD PTR _lpDDSurfaceDesc$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+36], ecx
; Line 439
	mov	eax, DWORD PTR _hr$[ebp]
$LN3@GetSurface:
; Line 440
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetSurfaceDesc@CAggDrawSurface@@UAGJPAU_DDSURFACEDESC@@@Z ENDP ; CAggDrawSurface::GetSurfaceDesc
_TEXT	ENDS
PUBLIC	?Initialize@CAggDrawSurface@@UAGJPAUIDirectDraw@@PAU_DDSURFACEDESC@@@Z ; CAggDrawSurface::Initialize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Initialize@CAggDrawSurface@@UAGJPAUIDirectDraw@@PAU_DDSURFACEDESC@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDD$ = 12						; size = 4
_lpDDSurfaceDesc$ = 16					; size = 4
?Initialize@CAggDrawSurface@@UAGJPAUIDirectDraw@@PAU_DDSURFACEDESC@@@Z PROC ; CAggDrawSurface::Initialize, COMDAT
; Line 444
	push	ebp
	mov	ebp, esp
	push	esi
; Line 445
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Initialize@2
	push	445					; 000001bdH
	push	OFFSET $SG81941
	push	OFFSET $SG81942
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Initialize@2:
; Line 446
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDSurfaceDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpDD$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 447
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?Initialize@CAggDrawSurface@@UAGJPAUIDirectDraw@@PAU_DDSURFACEDESC@@@Z ENDP ; CAggDrawSurface::Initialize
_TEXT	ENDS
PUBLIC	?IsLost@CAggDrawSurface@@UAGJXZ			; CAggDrawSurface::IsLost
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsLost@CAggDrawSurface@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsLost@CAggDrawSurface@@UAGJXZ PROC			; CAggDrawSurface::IsLost, COMDAT
; Line 451
	push	ebp
	mov	ebp, esp
	push	esi
; Line 452
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@IsLost
	push	452					; 000001c4H
	push	OFFSET $SG81947
	push	OFFSET $SG81948
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@IsLost:
; Line 453
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 454
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?IsLost@CAggDrawSurface@@UAGJXZ ENDP			; CAggDrawSurface::IsLost
_TEXT	ENDS
PUBLIC	?Lock@CAggDrawSurface@@UAGJPAUtagRECT@@PAU_DDSURFACEDESC@@KPAX@Z ; CAggDrawSurface::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Lock@CAggDrawSurface@@UAGJPAUtagRECT@@PAU_DDSURFACEDESC@@KPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDestRect$ = 12					; size = 4
_lpDDSurfaceDesc$ = 16					; size = 4
_dwFlags$ = 20						; size = 4
_hEvent$ = 24						; size = 4
?Lock@CAggDrawSurface@@UAGJPAUtagRECT@@PAU_DDSURFACEDESC@@KPAX@Z PROC ; CAggDrawSurface::Lock, COMDAT
; Line 458
	push	ebp
	mov	ebp, esp
	push	esi
; Line 459
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Lock
	push	459					; 000001cbH
	push	OFFSET $SG81957
	push	OFFSET $SG81958
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Lock:
; Line 460
	mov	esi, esp
	mov	ecx, DWORD PTR _hEvent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDDSurfaceDesc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpDestRect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 461
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	20					; 00000014H
?Lock@CAggDrawSurface@@UAGJPAUtagRECT@@PAU_DDSURFACEDESC@@KPAX@Z ENDP ; CAggDrawSurface::Lock
_TEXT	ENDS
PUBLIC	?ReleaseDC@CAggDrawSurface@@UAGJPAUHDC__@@@Z	; CAggDrawSurface::ReleaseDC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReleaseDC@CAggDrawSurface@@UAGJPAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_hDC$ = 12						; size = 4
?ReleaseDC@CAggDrawSurface@@UAGJPAUHDC__@@@Z PROC	; CAggDrawSurface::ReleaseDC, COMDAT
; Line 465
	push	ebp
	mov	ebp, esp
	push	esi
; Line 466
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@ReleaseDC
	push	466					; 000001d2H
	push	OFFSET $SG81964
	push	OFFSET $SG81965
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@ReleaseDC:
; Line 467
	mov	esi, esp
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 468
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?ReleaseDC@CAggDrawSurface@@UAGJPAUHDC__@@@Z ENDP	; CAggDrawSurface::ReleaseDC
_TEXT	ENDS
PUBLIC	?Restore@CAggDrawSurface@@UAGJXZ		; CAggDrawSurface::Restore
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Restore@CAggDrawSurface@@UAGJXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Restore@CAggDrawSurface@@UAGJXZ PROC			; CAggDrawSurface::Restore, COMDAT
; Line 472
	push	ebp
	mov	ebp, esp
	push	esi
; Line 473
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Restore
	push	473					; 000001d9H
	push	OFFSET $SG81970
	push	OFFSET $SG81971
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Restore:
; Line 474
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+108]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 475
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Restore@CAggDrawSurface@@UAGJXZ ENDP			; CAggDrawSurface::Restore
_TEXT	ENDS
PUBLIC	?SetClipper@CAggDrawSurface@@UAGJPAUIDirectDrawClipper@@@Z ; CAggDrawSurface::SetClipper
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetClipper@CAggDrawSurface@@UAGJPAUIDirectDrawClipper@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDClipper$ = 12					; size = 4
?SetClipper@CAggDrawSurface@@UAGJPAUIDirectDrawClipper@@@Z PROC ; CAggDrawSurface::SetClipper, COMDAT
; Line 479
	push	ebp
	mov	ebp, esp
	push	esi
; Line 480
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@SetClipper
	push	480					; 000001e0H
	push	OFFSET $SG81977
	push	OFFSET $SG81978
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetClipper:
; Line 481
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDClipper$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+112]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 482
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?SetClipper@CAggDrawSurface@@UAGJPAUIDirectDrawClipper@@@Z ENDP ; CAggDrawSurface::SetClipper
_TEXT	ENDS
PUBLIC	?SetColorKey@CAggDrawSurface@@UAGJKPAU_DDCOLORKEY@@@Z ; CAggDrawSurface::SetColorKey
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetColorKey@CAggDrawSurface@@UAGJKPAU_DDCOLORKEY@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_lpDDColorKey$ = 16					; size = 4
?SetColorKey@CAggDrawSurface@@UAGJKPAU_DDCOLORKEY@@@Z PROC ; CAggDrawSurface::SetColorKey, COMDAT
; Line 486
	push	ebp
	mov	ebp, esp
	push	esi
; Line 487
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@SetColorKe
	push	487					; 000001e7H
	push	OFFSET $SG81985
	push	OFFSET $SG81986
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetColorKe:
; Line 488
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDColorKey$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 489
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?SetColorKey@CAggDrawSurface@@UAGJKPAU_DDCOLORKEY@@@Z ENDP ; CAggDrawSurface::SetColorKey
_TEXT	ENDS
PUBLIC	?SetOverlayPosition@CAggDrawSurface@@UAGJJJ@Z	; CAggDrawSurface::SetOverlayPosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetOverlayPosition@CAggDrawSurface@@UAGJJJ@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwX$ = 12						; size = 4
_dwY$ = 16						; size = 4
?SetOverlayPosition@CAggDrawSurface@@UAGJJJ@Z PROC	; CAggDrawSurface::SetOverlayPosition, COMDAT
; Line 493
	push	ebp
	mov	ebp, esp
	push	esi
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@SetOverlay
	push	494					; 000001eeH
	push	OFFSET $SG81993
	push	OFFSET $SG81994
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetOverlay:
; Line 495
	mov	esi, esp
	mov	ecx, DWORD PTR _dwY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 496
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?SetOverlayPosition@CAggDrawSurface@@UAGJJJ@Z ENDP	; CAggDrawSurface::SetOverlayPosition
_TEXT	ENDS
PUBLIC	?SetPalette@CAggDrawSurface@@UAGJPAUIDirectDrawPalette@@@Z ; CAggDrawSurface::SetPalette
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetPalette@CAggDrawSurface@@UAGJPAUIDirectDrawPalette@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpDDPalette$ = 12					; size = 4
?SetPalette@CAggDrawSurface@@UAGJPAUIDirectDrawPalette@@@Z PROC ; CAggDrawSurface::SetPalette, COMDAT
; Line 500
	push	ebp
	mov	ebp, esp
	push	esi
; Line 501
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@SetPalette
	push	501					; 000001f5H
	push	OFFSET $SG82000
	push	OFFSET $SG82001
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@SetPalette:
; Line 502
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDPalette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+124]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 503
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?SetPalette@CAggDrawSurface@@UAGJPAUIDirectDrawPalette@@@Z ENDP ; CAggDrawSurface::SetPalette
_TEXT	ENDS
PUBLIC	?Unlock@CAggDrawSurface@@UAGJPAX@Z		; CAggDrawSurface::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unlock@CAggDrawSurface@@UAGJPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpSurfaceData$ = 12					; size = 4
?Unlock@CAggDrawSurface@@UAGJPAX@Z PROC			; CAggDrawSurface::Unlock, COMDAT
; Line 507
	push	ebp
	mov	ebp, esp
	push	esi
; Line 508
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@Unlock
	push	508					; 000001fcH
	push	OFFSET $SG82007
	push	OFFSET $SG82008
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@Unlock:
; Line 509
	mov	esi, esp
	mov	ecx, DWORD PTR _lpSurfaceData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 510
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?Unlock@CAggDrawSurface@@UAGJPAX@Z ENDP			; CAggDrawSurface::Unlock
_TEXT	ENDS
PUBLIC	?UpdateOverlay@CAggDrawSurface@@UAGJPAUtagRECT@@PAUIDirectDrawSurface@@0KPAU_DDOVERLAYFX@@@Z ; CAggDrawSurface::UpdateOverlay
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?UpdateOverlay@CAggDrawSurface@@UAGJPAUtagRECT@@PAUIDirectDrawSurface@@0KPAU_DDOVERLAYFX@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_lpSrcRect$ = 12					; size = 4
_lpDDDestSurface$ = 16					; size = 4
_lpDestRect$ = 20					; size = 4
_dwFlags$ = 24						; size = 4
_lpDDOverlayFX$ = 28					; size = 4
?UpdateOverlay@CAggDrawSurface@@UAGJPAUtagRECT@@PAUIDirectDrawSurface@@0KPAU_DDOVERLAYFX@@@Z PROC ; CAggDrawSurface::UpdateOverlay, COMDAT
; Line 514
	push	ebp
	mov	ebp, esp
	push	esi
; Line 515
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@UpdateOver
	push	515					; 00000203H
	push	OFFSET $SG82018
	push	OFFSET $SG82019
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@UpdateOver:
; Line 516
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDOverlayFX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpDestRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpDDDestSurface$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpSrcRect$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+132]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 517
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	24					; 00000018H
?UpdateOverlay@CAggDrawSurface@@UAGJPAUtagRECT@@PAUIDirectDrawSurface@@0KPAU_DDOVERLAYFX@@@Z ENDP ; CAggDrawSurface::UpdateOverlay
_TEXT	ENDS
PUBLIC	?UpdateOverlayDisplay@CAggDrawSurface@@UAGJK@Z	; CAggDrawSurface::UpdateOverlayDisplay
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?UpdateOverlayDisplay@CAggDrawSurface@@UAGJK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
?UpdateOverlayDisplay@CAggDrawSurface@@UAGJK@Z PROC	; CAggDrawSurface::UpdateOverlayDisplay, COMDAT
; Line 521
	push	ebp
	mov	ebp, esp
	push	esi
; Line 522
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@UpdateOver@2
	push	522					; 0000020aH
	push	OFFSET $SG82025
	push	OFFSET $SG82026
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@UpdateOver@2:
; Line 523
	mov	esi, esp
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+136]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 524
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?UpdateOverlayDisplay@CAggDrawSurface@@UAGJK@Z ENDP	; CAggDrawSurface::UpdateOverlayDisplay
_TEXT	ENDS
PUBLIC	?UpdateOverlayZOrder@CAggDrawSurface@@UAGJKPAUIDirectDrawSurface@@@Z ; CAggDrawSurface::UpdateOverlayZOrder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?UpdateOverlayZOrder@CAggDrawSurface@@UAGJKPAUIDirectDrawSurface@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_lpDDSReference$ = 16					; size = 4
?UpdateOverlayZOrder@CAggDrawSurface@@UAGJKPAUIDirectDrawSurface@@@Z PROC ; CAggDrawSurface::UpdateOverlayZOrder, COMDAT
; Line 528
	push	ebp
	mov	ebp, esp
	push	esi
; Line 529
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@UpdateOver@3
	push	529					; 00000211H
	push	OFFSET $SG82033
	push	OFFSET $SG82034
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN1@UpdateOver@3:
; Line 530
	mov	esi, esp
	mov	ecx, DWORD PTR _lpDDSReference$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 531
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?UpdateOverlayZOrder@CAggDrawSurface@@UAGJKPAUIDirectDrawSurface@@@Z ENDP ; CAggDrawSurface::UpdateOverlayZOrder
_TEXT	ENDS
PUBLIC	??0CLoadDirectDraw@@QAE@XZ			; CLoadDirectDraw::CLoadDirectDraw
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CLoadDirectDraw@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLoadDirectDraw@@QAE@XZ PROC				; CLoadDirectDraw::CLoadDirectDraw, COMDAT
; _this$ = ecx
; Line 543
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 544
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLoadDirectDraw@@QAE@XZ ENDP				; CLoadDirectDraw::CLoadDirectDraw
_TEXT	ENDS
PUBLIC	?ReleaseDirectDraw@CLoadDirectDraw@@QAEXXZ	; CLoadDirectDraw::ReleaseDirectDraw
PUBLIC	??1CLoadDirectDraw@@QAE@XZ			; CLoadDirectDraw::~CLoadDirectDraw
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	?DbgLogInfo@@YAXKKPB_WZZ:PROC			; DbgLogInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CLoadDirectDraw@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLoadDirectDraw@@QAE@XZ PROC				; CLoadDirectDraw::~CLoadDirectDraw, COMDAT
; _this$ = ecx
; Line 550
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 551
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseDirectDraw@CLoadDirectDraw@@QAEXXZ ; CLoadDirectDraw::ReleaseDirectDraw
; Line 553
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@CLoadDirec
; Line 554
	push	OFFSET $SG82042
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 555
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CLoadDirec:
; Line 557
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLoadDirectDraw@@QAE@XZ ENDP				; CLoadDirectDraw::~CLoadDirectDraw
_TEXT	ENDS
PUBLIC	?LoadDirectDraw@CLoadDirectDraw@@QAEJPAD@Z	; CLoadDirectDraw::LoadDirectDraw
EXTRN	_DirectDrawCreateFromDevice@12:PROC
EXTRN	_DirectDrawCreateFromDeviceEx@12:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__imp__SetErrorMode@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?LoadDirectDraw@CLoadDirectDraw@@QAEJPAD@Z
_TEXT	SEGMENT
tv148 = -28						; size = 4
_ErrorMode$82058 = -24					; size = 4
_hr$ = -20						; size = 4
_pDrawEnumEx$ = -16					; size = 4
_pDrawEnum$ = -12					; size = 4
_pDrawCreate$ = -8					; size = 4
_this$ = -4						; size = 4
_szDevice$ = 8						; size = 4
?LoadDirectDraw@CLoadDirectDraw@@QAEJPAD@Z PROC		; CLoadDirectDraw::LoadDirectDraw, COMDAT
; _this$ = ecx
; Line 571
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 575
	mov	DWORD PTR _hr$[ebp], 0
; Line 577
	push	OFFSET $SG82051
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 581
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@LoadDirect
; Line 582
	push	OFFSET $SG82053
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 583
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN8@LoadDirect
	push	583					; 00000247H
	push	OFFSET $SG82055
	push	OFFSET $SG82056
	call	?DbgAssert@@YGXPB_W0H@Z			; DbgAssert
$LN8@LoadDirect:
; Line 584
	xor	eax, eax
	jmp	$LN10@LoadDirect
$LN9@LoadDirect:
; Line 589
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN7@LoadDirect
; Line 591
	mov	esi, esp
	push	32768					; 00008000H
	call	DWORD PTR __imp__SetErrorMode@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ErrorMode$82058[ebp], eax
; Line 592
	mov	esi, esp
	push	OFFSET $SG82059
	call	DWORD PTR __imp__LoadLibraryW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 593
	mov	esi, esp
	mov	edx, DWORD PTR _ErrorMode$82058[ebp]
	push	edx
	call	DWORD PTR __imp__SetErrorMode@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 595
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@LoadDirect
; Line 596
	push	OFFSET $SG82061
	push	1
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 597
	push	OFFSET $SG82062
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 598
	mov	eax, -2147467262			; 80004002H
	jmp	$LN10@LoadDirect
$LN7@LoadDirect:
; Line 604
	mov	esi, esp
	push	OFFSET $SG82065
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDrawCreate$[ebp], eax
; Line 606
	mov	esi, esp
	push	OFFSET $SG82067
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDrawEnum$[ebp], eax
; Line 608
	mov	esi, esp
	push	OFFSET $SG82069
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDrawEnumEx$[ebp], eax
; Line 611
	cmp	DWORD PTR _pDrawCreate$[ebp], 0
	je	SHORT $LN4@LoadDirect
	cmp	DWORD PTR _pDrawEnum$[ebp], 0
	jne	SHORT $LN5@LoadDirect
$LN4@LoadDirect:
; Line 613
	mov	ecx, DWORD PTR _pDrawEnum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDrawCreate$[ebp]
	push	edx
	push	OFFSET $SG82072
	push	1
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 20					; 00000014H
; Line 614
	push	OFFSET $SG82073
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseDirectDraw@CLoadDirectDraw@@QAEXXZ ; CLoadDirectDraw::ReleaseDirectDraw
; Line 616
	mov	eax, -2147467262			; 80004002H
	jmp	$LN10@LoadDirect
$LN5@LoadDirect:
; Line 620
	cmp	DWORD PTR _szDevice$[ebp], 0
	je	SHORT $LN12@LoadDirect
	mov	eax, DWORD PTR _szDevice$[ebp]
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN13@LoadDirect
$LN12@LoadDirect:
	mov	DWORD PTR tv148[ebp], OFFSET $SG82075
$LN13@LoadDirect:
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	push	OFFSET $SG82076
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 16					; 00000010H
; Line 624
	cmp	DWORD PTR _pDrawEnumEx$[ebp], 0
	je	SHORT $LN3@LoadDirect
; Line 626
	mov	edx, DWORD PTR _pDrawEnumEx$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDrawCreate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szDevice$[ebp]
	push	ecx
	call	_DirectDrawCreateFromDeviceEx@12
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	jmp	SHORT $LN2@LoadDirect
$LN3@LoadDirect:
; Line 629
	mov	eax, DWORD PTR _pDrawEnum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDrawCreate$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szDevice$[ebp]
	push	edx
	call	_DirectDrawCreateFromDevice@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@LoadDirect:
; Line 631
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@LoadDirect
; Line 632
	push	OFFSET $SG82080
	push	1
	push	16					; 00000010H
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 633
	push	OFFSET $SG82081
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 634
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseDirectDraw@CLoadDirectDraw@@QAEXXZ ; CLoadDirectDraw::ReleaseDirectDraw
; Line 635
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN10@LoadDirect
$LN1@LoadDirect:
; Line 637
	xor	eax, eax
$LN10@LoadDirect:
; Line 638
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadDirectDraw@CLoadDirectDraw@@QAEJPAD@Z ENDP		; CLoadDirectDraw::LoadDirectDraw
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReleaseDirectDraw@CLoadDirectDraw@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseDirectDraw@CLoadDirectDraw@@QAEXXZ PROC		; CLoadDirectDraw::ReleaseDirectDraw, COMDAT
; _this$ = ecx
; Line 648
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 649
	push	OFFSET $SG82086
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 653
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@ReleaseDir
; Line 654
	push	OFFSET $SG82088
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 655
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 656
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@ReleaseDir:
; Line 659
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseDirectDraw@CLoadDirectDraw@@QAEXXZ ENDP		; CLoadDirectDraw::ReleaseDirectDraw
_TEXT	ENDS
PUBLIC	?IsDirectDrawLoaded@CLoadDirectDraw@@QAEJXZ	; CLoadDirectDraw::IsDirectDrawLoaded
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDirectDrawLoaded@CLoadDirectDraw@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDirectDrawLoaded@CLoadDirectDraw@@QAEJXZ PROC	; CLoadDirectDraw::IsDirectDrawLoaded, COMDAT
; _this$ = ecx
; Line 665
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 666
	push	OFFSET $SG82092
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 668
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@IsDirectDr
; Line 669
	push	OFFSET $SG82094
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 670
	mov	eax, 1
	jmp	SHORT $LN2@IsDirectDr
$LN1@IsDirectDr:
; Line 672
	xor	eax, eax
$LN2@IsDirectDr:
; Line 673
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDirectDrawLoaded@CLoadDirectDraw@@QAEJXZ ENDP	; CLoadDirectDraw::IsDirectDrawLoaded
_TEXT	ENDS
PUBLIC	?GetDirectDraw@CLoadDirectDraw@@QAEPAUIDirectDraw@@XZ ; CLoadDirectDraw::GetDirectDraw
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDirectDraw@CLoadDirectDraw@@QAEPAUIDirectDraw@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDirectDraw@CLoadDirectDraw@@QAEPAUIDirectDraw@@XZ PROC ; CLoadDirectDraw::GetDirectDraw, COMDAT
; _this$ = ecx
; Line 679
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 680
	push	OFFSET $SG82099
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 682
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@GetDirectD
; Line 683
	push	OFFSET $SG82101
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 684
	xor	eax, eax
	jmp	SHORT $LN2@GetDirectD
$LN1@GetDirectD:
; Line 687
	push	OFFSET $SG82102
	push	5
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 688
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 689
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN2@GetDirectD:
; Line 690
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDirectDraw@CLoadDirectDraw@@QAEPAUIDirectDraw@@XZ ENDP ; CLoadDirectDraw::GetDirectDraw
_TEXT	ENDS
PUBLIC	?IsDirectDrawVersion1@CLoadDirectDraw@@QAEHXZ	; CLoadDirectDraw::IsDirectDrawVersion1
EXTRN	_IID_IDirectDraw2:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDirectDrawVersion1@CLoadDirectDraw@@QAEHXZ
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_p$ = -12						; size = 4
_this$ = -4						; size = 4
?IsDirectDrawVersion1@CLoadDirectDraw@@QAEHXZ PROC	; CLoadDirectDraw::IsDirectDrawVersion1, COMDAT
; _this$ = ecx
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 701
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@IsDirectDr@2
; Line 702
	xor	eax, eax
	jmp	SHORT $LN5@IsDirectDr@2
$LN4@IsDirectDr@2:
; Line 704
	mov	DWORD PTR _p$[ebp], 0
; Line 705
	mov	esi, esp
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	OFFSET _IID_IDirectDraw2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 706
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@IsDirectDr@2
; Line 707
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@IsDirectDr@2:
; Line 708
	cmp	DWORD PTR _hr$[ebp], 0
	jne	SHORT $LN2@IsDirectDr@2
; Line 709
	push	OFFSET $SG82112
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 710
	xor	eax, eax
	jmp	SHORT $LN5@IsDirectDr@2
; Line 711
	jmp	SHORT $LN5@IsDirectDr@2
$LN2@IsDirectDr@2:
; Line 712
	push	OFFSET $SG82114
	push	3
	push	2
	call	?DbgLogInfo@@YAXKKPB_WZZ		; DbgLogInfo
	add	esp, 12					; 0000000cH
; Line 713
	mov	eax, 1
$LN5@IsDirectDr@2:
; Line 715
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@IsDirectDr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@IsDirectDr@2:
	DD	1
	DD	$LN8@IsDirectDr@2
$LN8@IsDirectDr@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@IsDirectDr@2
$LN7@IsDirectDr@2:
	DB	112					; 00000070H
	DB	0
?IsDirectDrawVersion1@CLoadDirectDraw@@QAEHXZ ENDP	; CLoadDirectDraw::IsDirectDrawVersion1
_TEXT	ENDS
END
